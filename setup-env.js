#!/usr/bin/env node

/**
 * 🔧 Environment Setup Script
 * 
 * Helps create .env file from template with user input
 */

const fs = require('fs').promises;
const readline = require('readline');
const chalk = require('chalk');

class EnvSetup {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async setup() {
    console.log(chalk.blue('🔧 Self-Improvement Agent v2.0 - Environment Setup'));
    console.log('=' .repeat(60));

    try {
      // Check if .env already exists
      try {
        await fs.access('.env');
        const overwrite = await this.ask('⚠️ .env file already exists. Overwrite? (y/n): ');
        if (overwrite.toLowerCase() !== 'y') {
          console.log(chalk.yellow('Setup cancelled.'));
          this.rl.close();
          return;
        }
      } catch {
        // .env doesn't exist, proceed
      }

      console.log(chalk.green('\n🌐 Let\'s set up your environment variables!'));
      console.log(chalk.gray('You can skip any field by pressing Enter (defaults will be used)\n'));

      // Get API keys
      const pineconeKey = await this.ask('🌲 Pinecone API Key (or skip): ');
      const openaiKey = await this.ask('🤖 OpenAI API Key (or skip): ');
      const projectName = await this.ask('📁 Default project name (my-project): ') || 'my-project';

      // Create .env content
      const envContent = this.generateEnvContent({
        pineconeKey: pineconeKey || 'your_pinecone_api_key_here',
        openaiKey: openaiKey || 'your_openai_api_key_here',
        projectName
      });

      // Write .env file
      await fs.writeFile('.env', envContent);
      
      console.log(chalk.green('\n✅ .env file created successfully!'));
      console.log(chalk.blue('\n💡 Next steps:'));
      console.log(chalk.gray('  1. Update API keys in .env if you skipped them'));
      console.log(chalk.gray('  2. Run: npm run AAI:agent'));
      console.log(chalk.gray('  3. Test: memory stats, status'));

      if (!pineconeKey || !openaiKey) {
        console.log(chalk.yellow('\n⚠️ Some API keys are missing:'));
        if (!pineconeKey) console.log(chalk.gray('  • Get Pinecone key: https://app.pinecone.io/'));
        if (!openaiKey) console.log(chalk.gray('  • Get OpenAI key: https://platform.openai.com/'));
        console.log(chalk.gray('  • Agent will work with local memory only until keys are added'));
      }

    } catch (error) {
      console.error(chalk.red('❌ Setup failed:'), error.message);
    }

    this.rl.close();
  }

  generateEnvContent({ pineconeKey, openaiKey, projectName }) {
    return `# 🧠 Self-Improvement Agent v2.0 - Environment Configuration
# Generated by setup script

# ==================================================
# 🌐 Required API Keys
# ==================================================
PINECONE_API_KEY=${pineconeKey}
OPENAI_API_KEY=${openaiKey}

# ==================================================
# 📁 Basic Configuration
# ==================================================
PROJECT_NAME=${projectName}
PINECONE_INDEX_NAME=agentic-framework-memory

# Agent features
AGENT_MEMORY_ENABLED=true
AGENT_FILESTORE_ENABLED=true

# ==================================================
# 🧠 Memory Settings
# ==================================================
MEMORY_RETENTION_DAYS=90
MAX_LOCAL_MEMORIES=1000
ENABLE_PINECONE=true
ENABLE_OPENAI=true

# ==================================================
# 🔧 Development Settings
# ==================================================
DEBUG=false
LOG_LEVEL=info
NODE_ENV=development

# ==================================================
# 📊 Learning Settings
# ==================================================
TRACK_USER_FEEDBACK=true
ENABLE_PATTERN_LEARNING=true
ENABLE_CONTEXT_MEMORY=true

# ==================================================
# 🎯 Performance Settings
# ==================================================
MAX_CONCURRENT_ANALYSES=3
MEMORY_CLEANUP_INTERVAL=24
CACHE_REFRESH_INTERVAL=60

# ==================================================
# 📱 UI Settings
# ==================================================
ENABLE_COLORS=true
CLI_PROMPT=🤖 >
SHOW_PROGRESS=true
`;
  }

  ask(question) {
    return new Promise((resolve) => {
      this.rl.question(question, resolve);
    });
  }
}

// Run setup if called directly
if (require.main === module) {
  const setup = new EnvSetup();
  setup.setup().catch(console.error);
}

module.exports = EnvSetup; 