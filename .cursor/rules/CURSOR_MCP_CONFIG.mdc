---
description: 
globs: 
alwaysApply: false
---
# ⚙️ Cursor MCP Configuration for Automatic Task Management

**Configuration file for enabling automatic MCP task management integration in Cursor IDE**

## 🎯 Core Configuration
# ⚙️ Cursor MCP Configuration for Task Management

**Complete Cursor IDE configuration for MCP server integration and automatic rule activation**

> **📝 IMPORTANT FOR CURSOR AI**: When modifying this file, you MUST also update:
> - [CENTRALIZED_MCP_RULES.mdc](mdc:.cursor/rules/CENTRALIZED_MCP_RULES.mdc) - Update configuration summaries and links
> - [MCP_TASK_MANAGEMENT_RULES.mdc](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc) - Ensure all rules are properly configured
> - [WORKFLOW_AUTOMATION_RULES.mdc](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc) - Ensure all workflows have proper event handlers
> 
> **File Dependencies**: This file provides the technical configuration that enables all MCP rules and workflows.

## 🎯 Core Configuration

### MCP Server Configuration
```json
{
  "mcp": {
    "servers": {
      "aai-system-enhanced": {
        "command": "npm",
        "args": ["start"],
        "cwd": ".cursor/rules/agents",
        "env": {
          "AAI_MODE": "mcp",
          "NODE_ENV": "production"
        },
        "description": "AAI System Enhanced - Intelligent Task Management",
        "capabilities": {
          "tools": true,
          "resources": true,
          "prompts": true
        },
        "autoStart": true,
        "healthCheck": {
          "enabled": true,
          "interval": 300000,
          "timeout": 5000
        }
      }
    }
  }
}
```

### Cursor Workspace Settings
```json
{
  "aai.mcp.enabled": true,
  "aai.mcp.autoStart": true,
  "aai.mcp.server": "aai-system-enhanced",
  "aai.taskManagement.enabled": true,
  "aai.taskManagement.autoCreate": true,
  "aai.taskManagement.autoUpdate": true,
  "aai.taskManagement.autoPriority": true,
  "aai.workflow.automation": true,
  "aai.git.integration": true,
  "aai.analytics.enabled": true,
  "aai.logging.level": "info"
}
```

## 🔄 Automatic Rule Activation

### File Event Triggers
```typescript
// Cursor Event Handlers for MCP Integration
{
  "cursor.events": {
    "onFileCreate": {
      "enabled": true,
      "rules": ["MCP_TASK_MANAGEMENT_RULES.md#Rule1"],
      "conditions": {
        "directories": ["src/", "components/", "pages/", "api/"],
        "extensions": [".ts", ".tsx", ".js", ".jsx", ".vue", ".py"]
      }
    },
    "onFileModify": {
      "enabled": true,
      "rules": ["MCP_TASK_MANAGEMENT_RULES.md#Rule2"],
      "conditions": {
        "minLines": 50,
        "significantChanges": true
      }
    },
    "onFileOpen": {
      "enabled": true,
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow10"],
      "conditions": {
        "trackWorkSessions": true,
        "updateTaskContext": true
      }
    }
  }
}
```

### Git Event Triggers
```typescript
{
  "cursor.git": {
    "onBranchCreate": {
      "enabled": true,
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow1", "WORKFLOW_AUTOMATION_RULES.md#Workflow2"],
      "patterns": {
        "feature": ["feature/", "feat/"],
        "bugfix": ["bug/", "fix/", "hotfix/"],
        "refactor": ["refactor/", "improve/"]
      }
    },
    "onCommit": {
      "enabled": true,
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow6"],
      "conditions": {
        "updateProgress": true,
        "trackTime": true,
        "analyzeChanges": true
      }
    },
    "onPullRequest": {
      "enabled": true,
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow7"],
      "conditions": {
        "createReviewTasks": true,
        "updateTaskStatus": true
      }
    }
  }
}
```

### Time-Based Triggers
```typescript
{
  "cursor.schedule": {
    "dailyStandup": {
      "enabled": true,
      "time": "09:00",
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow8"],
      "actions": [
        "get_system_status",
        "list_tasks",
        "calculate_priority",
        "generateStandupReport"
      ]
    },
    "weeklyPlanning": {
      "enabled": true,
      "day": "monday",
      "time": "10:00",
      "rules": ["WORKFLOW_AUTOMATION_RULES.md#Workflow9"],
      "actions": [
        "get_system_status",
        "list_tasks",
        "calculate_priority",
        "generateSprintPlan"
      ]
    },
    "healthCheck": {
      "enabled": true,
      "interval": "5m",
      "rules": ["MCP_TASK_MANAGEMENT_RULES.md#Rule16"],
      "actions": ["get_system_status"]
    }
  }
}
```

## 🎯 Context-Aware Configuration

### Project-Specific Settings
```typescript
{
  "cursor.projects": {
    "default": {
      "projectId": "default",
      "taskPrefix": "TASK",
      "defaultPriority": "medium",
      "autoEstimation": true,
      "complexityAnalysis": true
    },
    "web-app": {
      "projectId": "web-app-v2",
      "taskPrefix": "WEB",
      "defaultPriority": "high",
      "technologies": ["react", "typescript", "node"],
      "estimationModel": "agile"
    },
    "mobile-app": {
      "projectId": "mobile-app-v1",
      "taskPrefix": "MOB",
      "defaultPriority": "medium",
      "technologies": ["react-native", "typescript"],
      "estimationModel": "scrum"
    }
  }
}
```

### File Type Mappings
```typescript
{
  "cursor.fileTypes": {
    ".tsx": {
      "tags": ["frontend", "react", "typescript"],
      "estimatedHours": 4,
      "complexity": "medium",
      "autoAnalysis": true
    },
    ".ts": {
      "tags": ["backend", "typescript", "logic"],
      "estimatedHours": 3,
      "complexity": "medium",
      "autoAnalysis": true
    },
    ".test.ts": {
      "tags": ["testing", "qa", "typescript"],
      "estimatedHours": 2,
      "complexity": "low",
      "autoAnalysis": false
    },
    ".css": {
      "tags": ["styling", "ui", "frontend"],
      "estimatedHours": 2,
      "complexity": "low",
      "autoAnalysis": false
    },
    ".md": {
      "tags": ["documentation", "writing"],
      "estimatedHours": 1,
      "complexity": "low",
      "autoAnalysis": false
    }
  }
}
```

## 🚀 MCP Tool Integration

### Tool Usage Configuration
```typescript
{
  "cursor.mcp.tools": {
    "create_task": {
      "enabled": true,
      "autoTrigger": true,
      "conditions": ["newFile", "newBranch", "todoComment"],
      "defaultParams": {
        "priority": "medium",
        "projectId": "getCurrentProjectId()",
        "tags": "getContextTags()"
      }
    },
    "update_task": {
      "enabled": true,
      "autoTrigger": true,
      "conditions": ["fileModify", "commit", "progressChange"],
      "batchUpdates": true
    },
    "decompose_task": {
      "enabled": true,
      "autoTrigger": false,
      "conditions": ["complexTask", "largeEstimate"],
      "threshold": {
        "estimatedHours": 8,
        "complexity": "high"
      }
    },
    "analyze_complexity": {
      "enabled": true,
      "autoTrigger": true,
      "conditions": ["largeFile", "complexLogic"],
      "threshold": {
        "lines": 200,
        "functions": 10
      }
    },
    "calculate_priority": {
      "enabled": true,
      "autoTrigger": true,
      "schedule": "daily",
      "conditions": ["deadlineChange", "dependencyUpdate"]
    }
  }
}
```

### Resource Access Configuration
```typescript
{
  "cursor.mcp.resources": {
    "task": {
      "enabled": true,
      "caching": true,
      "cacheDuration": 300000, // 5 minutes
      "autoRefresh": true
    },
    "project": {
      "enabled": true,
      "caching": true,
      "cacheDuration": 600000, // 10 minutes
      "autoRefresh": false
    }
  }
}
```

### Prompt Integration
```typescript
{
  "cursor.mcp.prompts": {
    "task-analysis": {
      "enabled": true,
      "autoSuggest": true,
      "contexts": ["complexTask", "newFeature"],
      "template": "Analyze the following task: {taskDescription}"
    },
    "priority-assessment": {
      "enabled": true,
      "autoSuggest": false,
      "contexts": ["sprintPlanning", "backlogGrooming"],
      "template": "Assess priorities for: {taskList}"
    }
  }
}
```

## 🔧 Advanced Configuration

### Performance Settings
```typescript
{
  "cursor.mcp.performance": {
    "batchSize": 10,
    "requestTimeout": 5000,
    "retryAttempts": 3,
    "retryDelay": 1000,
    "caching": {
      "enabled": true,
      "maxSize": 100,
      "ttl": 300000
    },
    "throttling": {
      "enabled": true,
      "maxRequestsPerSecond": 10
    }
  }
}
```

### Error Handling
```typescript
{
  "cursor.mcp.errorHandling": {
    "retryOnFailure": true,
    "fallbackMode": "graceful",
    "logErrors": true,
    "notifyUser": false,
    "offlineMode": {
      "enabled": true,
      "queueRequests": true,
      "maxQueueSize": 50
    }
  }
}
```

### Security Settings
```typescript
{
  "cursor.mcp.security": {
    "validateRequests": true,
    "sanitizeInputs": true,
    "rateLimiting": true,
    "allowedOrigins": ["localhost", "127.0.0.1"],
    "encryption": {
      "enabled": false,
      "algorithm": "aes-256-gcm"
    }
  }
}
```

## 📊 Analytics and Monitoring

### Metrics Collection
```typescript
{
  "cursor.mcp.analytics": {
    "enabled": true,
    "collectMetrics": true,
    "metricsInterval": 300000, // 5 minutes
    "trackEvents": [
      "taskCreated",
      "taskUpdated",
      "taskCompleted",
      "complexityAnalyzed",
      "priorityCalculated"
    ],
    "performance": {
      "trackResponseTimes": true,
      "trackErrorRates": true,
      "trackUsagePatterns": true
    }
  }
}
```

### Logging Configuration
```typescript
{
  "cursor.mcp.logging": {
    "level": "info",
    "enableConsole": true,
    "enableFile": true,
    "logFile": ".cursor/logs/mcp.log",
    "maxFileSize": "10MB",
    "maxFiles": 5,
    "structured": true,
    "includeTimestamp": true,
    "includeContext": true
  }
}
```

## 🎯 User Interface Integration

### Command Palette Integration
```typescript
{
  "cursor.commands": {
    "aai.createTask": {
      "title": "AAI: Create Task",
      "category": "Task Management",
      "keybinding": "ctrl+shift+t",
      "when": "editorTextFocus"
    },
    "aai.updateTask": {
      "title": "AAI: Update Current Task",
      "category": "Task Management",
      "keybinding": "ctrl+shift+u",
      "when": "editorTextFocus"
    },
    "aai.analyzeComplexity": {
      "title": "AAI: Analyze Code Complexity",
      "category": "Analysis",
      "keybinding": "ctrl+shift+a",
      "when": "editorHasSelection"
    },
    "aai.decomposeTask": {
      "title": "AAI: Decompose Task",
      "category": "Task Management",
      "when": "aai.hasActiveTask"
    },
    "aai.systemStatus": {
      "title": "AAI: Show System Status",
      "category": "Monitoring",
      "keybinding": "ctrl+shift+s"
    }
  }
}
```

### Status Bar Integration
```typescript
{
  "cursor.statusBar": {
    "aai.taskStatus": {
      "enabled": true,
      "position": "left",
      "priority": 100,
      "text": "$(checklist) {activeTaskCount} tasks",
      "tooltip": "Active tasks: {activeTaskList}",
      "command": "aai.showTaskList"
    },
    "aai.mcpStatus": {
      "enabled": true,
      "position": "right",
      "priority": 50,
      "text": "$(server) MCP",
      "tooltip": "MCP Server Status: {status}",
      "command": "aai.systemStatus"
    }
  }
}
```

### Sidebar Integration
```typescript
{
  "cursor.views": {
    "aai-tasks": {
      "id": "aai.taskExplorer",
      "name": "AAI Tasks",
      "when": "aai.mcp.enabled",
      "contents": [
        {
          "id": "aai.activeTasks",
          "name": "Active Tasks",
          "type": "tree"
        },
        {
          "id": "aai.recentTasks",
          "name": "Recent Tasks",
          "type": "tree"
        },
        {
          "id": "aai.systemMetrics",
          "name": "System Metrics",
          "type": "webview"
        }
      ]
    }
  }
}
```

## 🔄 Activation and Initialization

### Startup Sequence
```typescript
{
  "cursor.activation": {
    "events": ["onStartupFinished"],
    "sequence": [
      {
        "action": "startMCPServer",
        "timeout": 10000,
        "required": true
      },
      {
        "action": "loadConfiguration",
        "timeout": 5000,
        "required": true
      },
      {
        "action": "initializeRules",
        "timeout": 5000,
        "required": true
      },
      {
        "action": "registerEventHandlers",
        "timeout": 3000,
        "required": true
      },
      {
        "action": "loadActiveProject",
        "timeout": 5000,
        "required": false
      },
      {
        "action": "syncTasks",
        "timeout": 10000,
        "required": false
      }
    ]
  }
}
```

### Health Monitoring
```typescript
{
  "cursor.health": {
    "checks": [
      {
        "name": "mcpServerHealth",
        "interval": 60000,
        "action": "get_system_status",
        "timeout": 5000,
        "retries": 3
      },
      {
        "name": "taskSyncHealth",
        "interval": 300000,
        "action": "list_tasks",
        "timeout": 10000,
        "retries": 2
      }
    ],
    "onFailure": {
      "notify": true,
      "restart": true,
      "maxRestarts": 3
    }
  }
}
```

---

**This configuration enables seamless, automatic integration of intelligent task management into your Cursor IDE workflow through the AAI System Enhanced MCP server. All rules and workflows will be automatically activated based on your development activities.** 