---
description: 
globs: 
alwaysApply: false
---
# üéØ Centralized Cursor MCP Task Management Rules Index

**Master index for automatic intelligent task management integration in Cursor IDE**

> **üìù IMPORTANT FOR CURSOR AI**: When modifying any MCP task management content, you MUST update ALL related files listed below to maintain consistency across the rule system.

## üö® CRITICAL DATA ACCESS RULE üö®

**NEVER ACCESS TASK DATA DIRECTLY FROM JSON FILES. ALL TASK DATA OPERATIONS MUST BE PERFORMED THROUGH THE MCP SERVER TOOLS ONLY.**

- ‚ùå DO NOT read from or write to `nested_tasks.json` files directly
- ‚úÖ ALWAYS use MCP server tools (`create_task`, `get_tasks`, etc.) for task data operations
- ‚úÖ All task storage now uses a database backend (SQLite or Supabase) managed by the MCP server

This fundamental rule ensures data consistency, proper validation, and reliable storage operations across the system.

## üìã Overview

This is the central index for the complete MCP task management rule system. Each section below links to detailed rule files that work together to provide intelligent task management in Cursor IDE.

## üìÅ Rule Files Structure

### üîß Core MCP Integration Rules
**File**: [MCP_TASK_MANAGEMENT_RULES.mdc](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc)

**Summary**: Contains 20 fundamental rules for MCP tool integration and task management
- **Rules 1-5**: Task Management (Creation, Updates, Complexity, Decomposition, Priority)
- **Rules 6-9**: Workflow Integration (Startup, Feature Development, Bug Fix, Code Review)
- **Rules 10-12**: Context-Aware (File Types, Git Integration, Time-Based)
- **Rules 13-15**: Automation (Smart Creation, Dependency Tracking, Progress)
- **Rules 16-20**: System (Health Monitoring, Error Handling, Performance, Metrics, Improvement)

**Key MCP Tools Used**: `create_task`, `update_task`, `analyze_complexity`, `decompose_task`, `calculate_priority`, `get_system_status`

**Click to view**: [üìñ View Complete MCP Task Management Rules](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc)

---

### üîÑ Workflow Automation Rules
**File**: [WORKFLOW_AUTOMATION_RULES.mdc](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc)

**Summary**: Contains 11 workflow-specific automation rules for development process integration
- **Workflows 1-4**: Development (Feature Development, Bug Fix, Refactoring, Testing)
- **Workflow 5**: Documentation Updates
- **Workflows 6-7**: Git Integration (Commit Updates, Pull Request Workflow)
- **Workflows 8-9**: Time-Based (Daily Standup, Weekly Planning)
- **Workflows 10-11**: Context-Aware (File-Based Context, Project Switching)

**Key Features**: Automatic branch detection, commit-based updates, time-scheduled workflows, context switching

**Click to view**: [üìñ View Complete Workflow Automation Rules](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc)

---

### ‚öôÔ∏è Cursor MCP Configuration
**File**: [CURSOR_MCP_CONFIG.mdc](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc)

**Summary**: Complete Cursor IDE configuration for MCP server integration and rule activation
- **Core Configuration**: MCP server setup, workspace settings
- **Event Triggers**: File events, Git events, time-based triggers
- **Tool Integration**: MCP tool configuration and automation settings
- **Advanced Settings**: Performance, security, analytics, monitoring
- **UI Integration**: Command palette, status bar, sidebar integration

**Key Components**: Server configuration, event handlers, tool mappings, performance optimization

**Click to view**: [üìñ View Complete Cursor MCP Configuration](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc)

---

## üöÄ Quick Reference Links

### üìä Available MCP Tools

#### Core Task Operations
- `create_task` - Create a new task with intelligent defaults
- `get_tasks` - Query tasks with filtering and pagination
- `update_task` - Modify existing tasks with validation
- `delete_task` - Remove a specific task
- `get_task_by_id` - Get detailed information for a single task

#### Advanced Task Operations
- `get_most_priority_task` - Retrieve the highest priority task in the system
- `get_subtasks` - Get all subtasks of a specific parent task
- `delete_all_tasks` - Remove all tasks from the system (use with caution)
- `delete_all_subtasks` - Remove all subtasks of a specific parent task
- `get_task_tree` - Get a hierarchical tree of tasks starting from a root task

#### Analysis and Management
- `analyze_complexity` - [Rule 3](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc#rule-3-complexity-analysis)
- `decompose_task` - [Rule 4](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc#rule-4-task-decomposition)
- `calculate_priority` - [Rule 5](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc#rule-5-priority-recalculation)
- `get_system_status` - [Rule 16](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc#rule-16-mcp-server-health-monitoring)

### üîÑ Key Workflows
- **Feature Development** - [Workflow 1](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc#workflow-1-new-feature-development)
- **Bug Fix Process** - [Workflow 2](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc#workflow-2-bug-fix-process)
- **Daily Standup** - [Workflow 8](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc#workflow-8-daily-standup-preparation)
- **Commit Updates** - [Workflow 6](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc#workflow-6-commit-based-task-updates)

### ‚öôÔ∏è Configuration Sections
- **MCP Server Setup** - [Core Configuration](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc#core-mcp-server-configuration)
- **Event Triggers** - [Automatic Rule Activation](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc#automatic-rule-activation)
- **Tool Integration** - [MCP Tool Integration](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc#mcp-tool-integration)

## üéØ Rule Activation Summary

### Automatic Triggers
```typescript
// File Events ‚Üí MCP_TASK_MANAGEMENT_RULES.mdc
onFileCreate() ‚Üí Rule 1 (Automatic Task Creation)
onFileModify() ‚Üí Rule 2 (Task Progress Updates)
onFileOpen() ‚Üí Rule 10 (File Type Specific Rules)

// Git Events ‚Üí WORKFLOW_AUTOMATION_RULES.mdc
onBranchCreate() ‚Üí Workflow 1 (Feature Development)
onCommit() ‚Üí Workflow 6 (Commit Updates)
onPullRequest() ‚Üí Workflow 7 (PR Workflow)

// Time Events ‚Üí WORKFLOW_AUTOMATION_RULES.mdc
daily(09:00) ‚Üí Workflow 8 (Daily Standup)
weekly(monday, 10:00) ‚Üí Workflow 9 (Sprint Planning)

// Configuration ‚Üí CURSOR_MCP_CONFIG.mdc
All event handlers and tool configurations
```

## üîß Quick Setup Guide

### 1. MCP Server Configuration
```json
// From: CURSOR_MCP_CONFIG.mdc
{
  "mcp": {
    "servers": {
      "aai-system-enhanced": {
        "command": "npm",
        "args": ["run", "sse"],
        "cwd": ".cursor/rules/agents",
        "env": { 
          "STORAGE_TYPE": "sqlite",
          "SQLITE_DB_PATH": "./_store/tasks.db"
        }
      }
    }
  }
}
```

### 2. Enable Automatic Rules
```json
// From: CURSOR_MCP_CONFIG.mdc
{
  "aai.mcp.enabled": true,
  "aai.taskManagement.autoCreate": true,
  "aai.taskManagement.autoUpdate": true,
  "aai.workflow.automation": true
}
```

## üìù File Update Instructions for Cursor AI

> **üö® CRITICAL**: When modifying MCP task management content, follow these update rules:

### When updating MCP tools or rules:
1. **Primary Update**: Modify [MCP_TASK_MANAGEMENT_RULES.mdc](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc)
2. **Workflow Impact**: Check and update [WORKFLOW_AUTOMATION_RULES.mdc](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc)
3. **Configuration Impact**: Update [CURSOR_MCP_CONFIG.mdc](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc)
4. **Index Update**: Update this file with new summaries and links

### When updating workflows:
1. **Primary Update**: Modify [WORKFLOW_AUTOMATION_RULES.mdc](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc)
2. **Rule Dependencies**: Check [MCP_TASK_MANAGEMENT_RULES.mdc](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc) for related rules
3. **Configuration Update**: Update [CURSOR_MCP_CONFIG.mdc](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc) event handlers
4. **Index Update**: Update this file with workflow summaries

### When updating configuration:
1. **Primary Update**: Modify [CURSOR_MCP_CONFIG.mdc](mdc:.cursor/rules/CURSOR_MCP_CONFIG.mdc)
2. **Rule Validation**: Ensure all rules in [MCP_TASK_MANAGEMENT_RULES.mdc](mdc:.cursor/rules/MCP_TASK_MANAGEMENT_RULES.mdc) are supported
3. **Workflow Validation**: Ensure all workflows in [WORKFLOW_AUTOMATION_RULES.mdc](mdc:.cursor/rules/WORKFLOW_AUTOMATION_RULES.mdc) are configured
4. **Index Update**: Update this file with configuration summaries

### File Consistency Checklist:
- [ ] All MCP tools referenced consistently across files
- [ ] All workflow triggers properly configured
- [ ] All rule numbers and names match
- [ ] All file links in this index are valid
- [ ] All configuration examples are current

## üéØ Task Data Access Examples

### Retrieving Tasks
```javascript
// ‚ùå INCORRECT: Direct file access
const tasks = JSON.parse(fs.readFileSync('_store/projects/_core/tasks/nested_tasks.json'));

// ‚úÖ CORRECT: Using MCP tools
const tasksResult = await mcpTool.call('get_tasks', { 
  status: 'pending', 
  priority: 'high'
});
```

### Creating a Task
```javascript
// ‚ùå INCORRECT: Direct file modification
tasks.push(newTask);
fs.writeFileSync('_store/projects/_core/tasks/nested_tasks.json', JSON.stringify(tasks));

// ‚úÖ CORRECT: Using MCP tools
const result = await mcpTool.call('create_task', {
  title: 'Implement authentication',
  description: 'Add user login and registration',
  type: 'feature',
  priority: 'high'
});
```

### Working with Priority Tasks
```javascript
// ‚úÖ NEW: Get the highest priority task
const priorityTask = await mcpTool.call('get_most_priority_task', {
  status: 'pending'
});

// ‚úÖ NEW: Get all subtasks of a main task
const subtasks = await mcpTool.call('get_subtasks', {
  parentId: 'task_001'
});
```

## üìö Related Documentation

- **[AAI System Enhanced README](mdc:.cursor/rules/agents/README.md)** - Main system documentation
- **[Integration Guide](mdc:.cursor/rules/agents/docs/CURSOR_MCP_INTEGRATION.md)** - Complete setup guide
- **[Quick Reference](mdc:.cursor/rules/agents/docs/QUICK_REFERENCE.md)** - Fast reference card
- **[SSE Server Implementation](mdc:.cursor/rules/agents/src/api/SSEServer.ts)** - MCP Server source code
- **[Tasks_JSON_Structure.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)** - Document provides a detailed reference for interacting with Taskmaster 

## üîÑ Taskmaster Integration

### Local Task Management with MCP Synchronization

Taskmaster is the primary tool for managing local tasks in the development workflow. All AI agents should use Taskmaster's tools (via MCP) rather than direct file manipulation.

#### Taskmaster MCP Tools

All task operations should be performed using the Taskmaster MCP tools:

```javascript
// Create a new task
const newTaskResult = await mcpTool.call('add_task', {
  prompt: 'Implement feature X with these requirements...',
  dependencies: '1,2',
  priority: 'high',
  research: true
});

// Get task details
const taskDetails = await mcpTool.call('get_task', {
  id: '3.2'
});

// Update task status
await mcpTool.call('set_task_status', {
  id: '3.1',
  status: 'done'
});
```

#### SSE-based Task Synchronization

The MCP server provides real-time task synchronization between AI instances using Server-Sent Events (SSE):

1. Local tasks are managed via Taskmaster MCP tools
2. Changes are persisted to the local SQLite database (.cursor/rules/agents/_store/tasks.db)
3. The MCP SSE server broadcasts task changes to all connected clients
4. Other AI instances receive these updates and sync their local task context

**Key Implementation Files:**
- SSE Server: `.cursor/rules/agents/src/mcp/SSEServer.ts`
- Task Service: `.cursor/rules/agents/src/services/TaskService.ts`
- MCP Tool Handlers: `.cursor/rules/agents/src/mcp/TaskmasterTools.ts`

**IMPORTANT:** Never attempt to read or write task files directly. Always use the appropriate MCP tools to ensure proper synchronization across all AI instances.

## üìö Related Documentation

---

**This centralized index provides quick access to all MCP task management rules while maintaining detailed documentation in separate files. When Cursor reads this file, it knows to reference the linked files for complete implementation details.**