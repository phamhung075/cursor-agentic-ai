{
  "id": "preserved-script_manager.js-1748137076582",
  "type": "preserved-code",
  "content": "#!/usr/bin/env node\n\n/**\n * üõ†Ô∏è Script Manager\n * \n * Comprehensive management system for all agent-created scripts and tests\n * Provides listing, organization, and tracking capabilities\n */\n\nconst fs = require('fs').promises;\nconst path = require('path');\n\nclass ScriptManager {\n  constructor() {\n    this.scriptsDir = '.cursor/rules/agents/_store/scripts';\n    this.testsDir = '.cursor/rules/agents/_store/tests';\n    \n    this.categories = {\n      scripts: {\n        core: 'Core framework management',\n        backup: 'Backup and recovery utilities',\n        analysis: 'Analysis and reporting tools',  \n        cleanup: 'Cleanup and maintenance',\n        migration: 'Migration and conversion tools',\n        utility: 'General purpose utilities'\n      },\n      tests: {\n        integration: 'Integration tests',\n        unit: 'Unit tests', \n        system: 'System tests',\n        performance: 'Performance tests'\n      }\n    };\n    \n    this.results = {\n      scripts: {},\n      tests: {},\n      npm_scripts: [],\n      total_files: 0\n    };\n  }\n\n  /**\n   * Main script manager function\n   */\n  async manage(command = 'list') {\n    console.log('üõ†Ô∏è SCRIPT MANAGER');\n    console.log('‚îÅ'.repeat(60));\n    \n    try {\n      switch (command.toLowerCase()) {\n        case 'list':\n          await this.listAll();\n          break;\n        case 'organize':\n          await this.organizeScripts();\n          break;\n        case 'help':\n          this.showHelp();\n          break;\n        case 'analyze':\n          await this.analyzeUsage();\n          break;\n        case 'categories':\n          this.showCategories();\n          break;\n        default:\n          console.log(`‚ùå Unknown command: ${command}`);\n          this.showHelp();\n      }\n    } catch (error) {\n      console.error('‚ùå Script manager error:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * List all scripts and tests\n   */\n  async listAll() {\n    console.log('üìã LISTING ALL SCRIPTS AND TESTS');\n    console.log('');\n    \n    // Scan scripts directory\n    await this.scanDirectory(this.scriptsDir, 'scripts');\n    \n    // Scan tests directory\n    await this.scanDirectory(this.testsDir, 'tests');\n    \n    // Get npm scripts\n    await this.getNpmScripts();\n    \n    // Display results\n    this.displayResults();\n  }\n\n  /**\n   * Scan a directory for scripts/tests\n   */\n  async scanDirectory(dirPath, type) {\n    try {\n      const files = await fs.readdir(dirPath, { withFileTypes: true });\n      this.results[type] = {};\n      \n      // Initialize categories\n      for (const category of Object.keys(this.categories[type])) {\n        this.results[type][category] = [];\n      }\n      this.results[type]['uncategorized'] = [];\n      \n      for (const file of files) {\n        if (file.isFile() && (\n          file.name.endsWith('.js') || \n          file.name.endsWith('.py') || \n          file.name.endsWith('.sh')\n        )) {\n          const category = this.categorizeFile(file.name, type);\n          this.results[type][category].push({\n            name: file.name,\n            path: path.join(dirPath, file.name),\n            description: await this.extractDescription(path.join(dirPath, file.name))\n          });\n          this.results.total_files++;\n        }\n      }\n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Could not scan ${dirPath}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Categorize a file based on its name and content\n   */\n  categorizeFile(filename, type) {\n    const lower = filename.toLowerCase();\n    \n    if (type === 'scripts') {\n      if (lower.includes('core') || lower.includes('_core')) {\n        return 'core';\n      } else if (lower.includes('backup')) {\n        return 'backup';\n      } else if (lower.includes('analyze') || lower.includes('analysis')) {\n        return 'analysis';\n      } else if (lower.includes('clean') || lower.includes('cleanup')) {\n        return 'cleanup';\n      } else if (lower.includes('migrate') || lower.includes('migration')) {\n        return 'migration';\n      } else if (lower.includes('util') || lower.includes('helper')) {\n        return 'utility';\n      }\n    } else if (type === 'tests') {\n      if (lower.includes('integration')) {\n        return 'integration';\n      } else if (lower.includes('unit')) {\n        return 'unit';\n      } else if (lower.includes('system')) {\n        return 'system';\n      } else if (lower.includes('performance') || lower.includes('perf')) {\n        return 'performance';\n      }\n    }\n    \n    return 'uncategorized';\n  }\n\n  /**\n   * Extract description from file header\n   */\n  async extractDescription(filePath) {\n    try {\n      const content = await fs.readFile(filePath, 'utf8');\n      const lines = content.split('\\n').slice(0, 10); // Check first 10 lines\n      \n      for (const line of lines) {\n        // Look for description patterns\n        if (line.includes('* ') && (\n          line.toLowerCase().includes('description') || \n          line.includes('Purpose') ||\n          line.includes('@description')\n        )) {\n          return line.replace(/.*(\\*|\\/\\/)\\s*/, '').trim();\n        }\n        \n        // Look for comment descriptions\n        if (line.startsWith(' * ') && line.length > 10 && !line.includes('*')) {\n          const desc = line.replace(/^\\s*\\*\\s*/, '').trim();\n          if (desc && !desc.startsWith('@') && !desc.includes('===')) {\n            return desc;\n          }\n        }\n      }\n      \n      return 'No description available';\n    } catch (error) {\n      return 'Could not read file';\n    }\n  }\n\n  /**\n   * Get NPM scripts that reference our scripts\n   */\n  async getNpmScripts() {\n    try {\n      const packagePath = 'package.json';\n      const packageContent = await fs.readFile(packagePath, 'utf8');\n      const packageJson = JSON.parse(packageContent);\n      \n      this.results.npm_scripts = [];\n      \n      for (const [name, command] of Object.entries(packageJson.scripts || {})) {\n        if (command.includes('.cursor/rules/agents/_store/scripts/') || command.includes('.cursor/rules/agents/_store/tests/')) {\n          this.results.npm_scripts.push({ name, command });\n        }\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Could not read package.json');\n    }\n  }\n\n  /**\n   * Display all results\n   */\n  displayResults() {\n    console.log(`üìä SUMMARY: ${this.results.total_files} total files found`);\n    console.log('');\n    \n    // Display scripts\n    console.log('üîß SCRIPTS (.cursor/rules/agents/_store/scripts/)');\n    console.log('‚îÅ'.repeat(50));\n    this.displayCategoryResults('scripts');\n    \n    console.log('');\n    \n    // Display tests  \n    console.log('üß™ TESTS (.cursor/rules/agents/_store/tests/)');\n    console.log('‚îÅ'.repeat(50));\n    this.displayCategoryResults('tests');\n    \n    console.log('');\n    \n    // Display NPM scripts\n    if (this.results.npm_scripts.length > 0) {\n      console.log('üì¶ NPM INTEGRATION');\n      console.log('‚îÅ'.repeat(50));\n      this.results.npm_scripts.forEach(script => {\n        console.log(`  üöÄ npm run ${script.name}`);\n        console.log(`     ${script.command}`);\n      });\n      console.log('');\n    }\n    \n    console.log('üéØ Use \"npm run AAI:scripts-help\" for usage commands');\n  }\n\n  /**\n   * Display results for a specific category type\n   */\n  displayCategoryResults(type) {\n    const typeResults = this.results[type];\n    \n    for (const [category, description] of Object.entries(this.categories[type])) {\n      const files = typeResults[category] || [];\n      if (files.length > 0) {\n        console.log(`\\nüìÇ ${category.toUpperCase()} (${files.length} files)`);\n        console.log(`   ${description}`);\n        files.forEach(file => {\n          console.log(`   ‚úÖ ${file.name}`);\n          console.log(`      ${file.description}`);\n        });\n      }\n    }\n    \n    // Show uncategorized files\n    const uncategorized = typeResults['uncategorized'] || [];\n    if (uncategorized.length > 0) {\n      console.log(`\\n‚ùì UNCATEGORIZED (${uncategorized.length} files)`);\n      uncategorized.forEach(file => {\n        console.log(`   ‚ö™ ${file.name}`);\n        console.log(`      ${file.descript",
  "metadata": {
    "content": "#!/usr/bin/env node\n\n/**\n * üõ†Ô∏è Script Manager\n * \n * Comprehensive management system for all agent-created scripts and tests\n * Provides listing, organization, and tracking capabilities\n */\n\nconst fs = require('fs').promises;\nconst path = require('path');\n\nclass ScriptManager {\n  constructor() {\n    this.scriptsDir = '.cursor/rules/agents/_store/scripts';\n    this.testsDir = '.cursor/rules/agents/_store/tests';\n    \n    this.categories = {\n      scripts: {\n        core: 'Core framework management',\n        backup: 'Backup and recovery utilities',\n        analysis: 'Analysis and reporting tools',  \n        cleanup: 'Cleanup and maintenance',\n        migration: 'Migration and conversion tools',\n        utility: 'General purpose utilities'\n      },\n      tests: {\n        integration: 'Integration tests',\n        unit: 'Unit tests', \n        system: 'System tests',\n        performance: 'Performance tests'\n      }\n    };\n    \n    this.results = {\n      scripts: {},\n      tests: {},\n      npm_scripts: [],\n      total_files: 0\n    };\n  }\n\n  /**\n   * Main script manager function\n   */\n  async manage(command = 'list') {\n    console.log('üõ†Ô∏è SCRIPT MANAGER');\n    console.log('‚îÅ'.repeat(60));\n    \n    try {\n      switch (command.toLowerCase()) {\n        case 'list':\n          await this.listAll();\n          break;\n        case 'organize':\n          await this.organizeScripts();\n          break;\n        case 'help':\n          this.showHelp();\n          break;\n        case 'analyze':\n          await this.analyzeUsage();\n          break;\n        case 'categories':\n          this.showCategories();\n          break;\n        default:\n          console.log(`‚ùå Unknown command: ${command}`);\n          this.showHelp();\n      }\n    } catch (error) {\n      console.error('‚ùå Script manager error:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * List all scripts and tests\n   */\n  async listAll() {\n    console.log('üìã LISTING ALL SCRIPTS AND TESTS');\n    console.log('');\n    \n    // Scan scripts directory\n    await this.scanDirectory(this.scriptsDir, 'scripts');\n    \n    // Scan tests directory\n    await this.scanDirectory(this.testsDir, 'tests');\n    \n    // Get npm scripts\n    await this.getNpmScripts();\n    \n    // Display results\n    this.displayResults();\n  }\n\n  /**\n   * Scan a directory for scripts/tests\n   */\n  async scanDirectory(dirPath, type) {\n    try {\n      const files = await fs.readdir(dirPath, { withFileTypes: true });\n      this.results[type] = {};\n      \n      // Initialize categories\n      for (const category of Object.keys(this.categories[type])) {\n        this.results[type][category] = [];\n      }\n      this.results[type]['uncategorized'] = [];\n      \n      for (const file of files) {\n        if (file.isFile() && (\n          file.name.endsWith('.js') || \n          file.name.endsWith('.py') || \n          file.name.endsWith('.sh')\n        )) {\n          const category = this.categorizeFile(file.name, type);\n          this.results[type][category].push({\n            name: file.name,\n            path: path.join(dirPath, file.name),\n            description: await this.extractDescription(path.join(dirPath, file.name))\n          });\n          this.results.total_files++;\n        }\n      }\n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Could not scan ${dirPath}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Categorize a file based on its name and content\n   */\n  categorizeFile(filename, type) {\n    const lower = filename.toLowerCase();\n    \n    if (type === 'scripts') {\n      if (lower.includes('core') || lower.includes('_core')) {\n        return 'core';\n      } else if (lower.includes('backup')) {\n        return 'backup';\n      } else if (lower.includes('analyze') || lower.includes('analysis')) {\n        return 'analysis';\n      } else if (lower.includes('clean') || lower.includes('cleanup')) {\n        return 'cleanup';\n      } else if (lower.includes('migrate') || lower.includes('migration')) {\n        return 'migration';\n      } else if (lower.includes('util') || lower.includes('helper')) {\n        return 'utility';\n      }\n    } else if (type === 'tests') {\n      if (lower.includes('integration')) {\n        return 'integration';\n      } else if (lower.includes('unit')) {\n        return 'unit';\n      } else if (lower.includes('system')) {\n        return 'system';\n      } else if (lower.includes('performance') || lower.includes('perf')) {\n        return 'performance';\n      }\n    }\n    \n    return 'uncategorized';\n  }\n\n  /**\n   * Extract description from file header\n   */\n  async extractDescription(filePath) {\n    try {\n      const content = await fs.readFile(filePath, 'utf8');\n      const lines = content.split('\\n').slice(0, 10); // Check first 10 lines\n      \n      for (const line of lines) {\n        // Look for description patterns\n        if (line.includes('* ') && (\n          line.toLowerCase().includes('description') || \n          line.includes('Purpose') ||\n          line.includes('@description')\n        )) {\n          return line.replace(/.*(\\*|\\/\\/)\\s*/, '').trim();\n        }\n        \n        // Look for comment descriptions\n        if (line.startsWith(' * ') && line.length > 10 && !line.includes('*')) {\n          const desc = line.replace(/^\\s*\\*\\s*/, '').trim();\n          if (desc && !desc.startsWith('@') && !desc.includes('===')) {\n            return desc;\n          }\n        }\n      }\n      \n      return 'No description available';\n    } catch (error) {\n      return 'Could not read file';\n    }\n  }\n\n  /**\n   * Get NPM scripts that reference our scripts\n   */\n  async getNpmScripts() {\n    try {\n      const packagePath = 'package.json';\n      const packageContent = await fs.readFile(packagePath, 'utf8');\n      const packageJson = JSON.parse(packageContent);\n      \n      this.results.npm_scripts = [];\n      \n      for (const [name, command] of Object.entries(packageJson.scripts || {})) {\n        if (command.includes('.cursor/rules/agents/_store/scripts/') || command.includes('.cursor/rules/agents/_store/tests/')) {\n          this.results.npm_scripts.push({ name, command });\n        }\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Could not read package.json');\n    }\n  }\n\n  /**\n   * Display all results\n   */\n  displayResults() {\n    console.log(`üìä SUMMARY: ${this.results.total_files} total files found`);\n    console.log('');\n    \n    // Display scripts\n    console.log('üîß SCRIPTS (.cursor/rules/agents/_store/scripts/)');\n    console.log('‚îÅ'.repeat(50));\n    this.displayCategoryResults('scripts');\n    \n    console.log('');\n    \n    // Display tests  \n    console.log('üß™ TESTS (.cursor/rules/agents/_store/tests/)');\n    console.log('‚îÅ'.repeat(50));\n    this.displayCategoryResults('tests');\n    \n    console.log('');\n    \n    // Display NPM scripts\n    if (this.results.npm_scripts.length > 0) {\n      console.log('üì¶ NPM INTEGRATION');\n      console.log('‚îÅ'.repeat(50));\n      this.results.npm_scripts.forEach(script => {\n        console.log(`  üöÄ npm run ${script.name}`);\n        console.log(`     ${script.command}`);\n      });\n      console.log('');\n    }\n    \n    console.log('üéØ Use \"npm run AAI:scripts-help\" for usage commands');\n  }\n\n  /**\n   * Display results for a specific category type\n   */\n  displayCategoryResults(type) {\n    const typeResults = this.results[type];\n    \n    for (const [category, description] of Object.entries(this.categories[type])) {\n      const files = typeResults[category] || [];\n      if (files.length > 0) {\n        console.log(`\\nüìÇ ${category.toUpperCase()} (${files.length} files)`);\n        console.log(`   ${description}`);\n        files.forEach(file => {\n          console.log(`   ‚úÖ ${file.name}`);\n          console.log(`      ${file.description}`);\n        });\n      }\n    }\n    \n    // Show uncategorized files\n    const uncategorized = typeResults['uncategorized'] || [];\n    if (uncategorized.length > 0) {\n      console.log(`\\n‚ùì UNCATEGORIZED (${uncategorized.length} files)`);\n      uncategorized.forEach(file => {\n        console.log(`   ‚ö™ ${file.name}`);\n        console.log(`      ${file.descript",
    "description": "No description available",
    "filename": "script_manager.js",
    "functions": "ScriptManager",
    "keyFeatures": "Object-Oriented, Async/Await, File System, Path Manipulation, Process Management, Logging, JSON Processing",
    "originalPath": ".cursor/rules/agents/_store/scripts/script_manager.js",
    "preservedAt": "2025-05-25T01:35:35.658Z",
    "size": 14136,
    "timestamp": "2025-05-25T01:37:56.582Z",
    "type": "preserved-code"
  },
  "embedding": []
}