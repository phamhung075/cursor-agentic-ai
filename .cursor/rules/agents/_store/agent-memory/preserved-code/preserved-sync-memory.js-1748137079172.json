{
  "id": "preserved-sync-memory.js-1748137079172",
  "type": "preserved-code",
  "content": "#!/usr/bin/env node\n\n/**\n * 🔄 Memory Sync Script\n * \n * Standalone script to sync memories between local storage and Pinecone\n */\n\n// Load environment variables\nrequire('dotenv').config();\n\nconst path = require('path');\nconst chalk = require('chalk');\n\n// Import the self-improvement agent\nconst SelfImprovementAgent = require('../../self-improvement/index');\n\nasync function main() {\n  const args = process.argv.slice(2);\n  const command = args[0] || 'help';\n\n  console.log(chalk.blue('🔄 Memory Sync Tool'));\n  console.log('');\n\n  // Check if API keys are configured\n  if (!process.env.PINECONE_API_KEY) {\n    console.log(chalk.red('❌ PINECONE_API_KEY not found in environment'));\n    console.log(chalk.gray('💡 Please set up your .env file with Pinecone API key'));\n    process.exit(1);\n  }\n\n  if (!process.env.OPENAI_API_KEY) {\n    console.log(chalk.yellow('⚠️ OPENAI_API_KEY not found - using fallback embeddings'));\n  }\n\n  try {\n    // Initialize agent\n    const agent = new SelfImprovementAgent();\n    await agent.initialize();\n\n    switch (command) {\n      case 'status':\n        await showStatus(agent);\n        break;\n        \n      case 'up':\n      case 'upload':\n        await syncUp(agent);\n        break;\n        \n      case 'down':\n      case 'download':\n        await syncDown(agent);\n        break;\n        \n      case 'both':\n      case 'sync':\n        await syncBoth(agent);\n        break;\n        \n      case 'reset':\n        await resetPinecone(agent);\n        break;\n        \n      case 'fix-embeddings':\n        console.log('🔧 Fixing embedding dimensions...');\n        await agent.handleMemoryCommand('fix-embeddings');\n        break;\n        \n      case 'help':\n      default:\n        showHelp();\n        break;\n    }\n\n    await agent.shutdown();\n    \n  } catch (error) {\n    console.error(chalk.red('❌ Error:'), error.message);\n    process.exit(1);\n  }\n}\n\nasync function showStatus(agent) {\n  console.log(chalk.green('📊 Checking sync status...'));\n  const result = await agent.handleMemoryCommand('sync-status');\n  \n  if (result.success) {\n    const status = result.syncStatus;\n    console.log(chalk.blue(`  📡 Pinecone: ${status.pineconeConnected ? '✅ Connected' : '❌ Disconnected'}`));\n    console.log(chalk.blue(`  🤖 OpenAI: ${status.openaiConnected ? '✅ Connected' : '❌ Disconnected'}`));\n    console.log(chalk.blue(`  💾 Local Memories: ${status.localMemories}`));\n    console.log(chalk.blue(`  ☁️ Pinecone Memories: ${status.pineconeMemories}`));\n    \n    if (status.localMemories !== status.pineconeMemories) {\n      console.log(chalk.yellow('⚠️ Memories are out of sync'));\n      console.log(chalk.gray('💡 Run \"npm run sync-memory both\" to synchronize'));\n    } else {\n      console.log(chalk.green('✅ Memories are in sync'));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncUp(agent) {\n  console.log(chalk.green('📤 Uploading local memories to Pinecone...'));\n  const result = await agent.handleMemoryCommand('sync-up');\n  \n  if (result.success) {\n    console.log(chalk.green(`✅ Upload complete: ${result.uploaded} uploaded, ${result.skipped} skipped`));\n    if (result.errors > 0) {\n      console.log(chalk.yellow(`⚠️ ${result.errors} errors occurred`));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncDown(agent) {\n  console.log(chalk.green('📥 Downloading Pinecone memories to local...'));\n  const result = await agent.handleMemoryCommand('sync-down');\n  \n  if (result.success) {\n    console.log(chalk.green(`✅ Download complete: ${result.downloaded} downloaded, ${result.skipped} skipped`));\n    if (result.errors > 0) {\n      console.log(chalk.yellow(`⚠️ ${result.errors} errors occurred`));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncBoth(agent) {\n  console.log(chalk.green('🔄 Performing bidirectional sync...'));\n  const result = await agent.handleMemoryCommand('sync-both');\n  \n  if (result.success) {\n    console.log(chalk.green('✅ Bidirectional sync complete!'));\n    console.log(chalk.blue(`📤 Upload: ${result.upload.uploaded} uploaded, ${result.upload.skipped} skipped`));\n    console.log(chalk.blue(`📥 Download: ${result.download.downloaded} downloaded, ${result.download.skipped} skipped`));\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function resetPinecone(agent) {\n  console.log(chalk.red('⚠️ WARNING: This will delete ALL memories from Pinecone!'));\n  console.log(chalk.gray('Press Ctrl+C to cancel, or wait 5 seconds to continue...'));\n  \n  await new Promise(resolve => setTimeout(resolve, 5000));\n  \n  const result = await agent.handleMemoryCommand('reset-pinecone');\n  \n  if (result.success) {\n    console.log(chalk.green('✅ Pinecone index reset successfully'));\n    console.log(chalk.yellow('⚠️ All cloud memories have been deleted'));\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nfunction showHelp() {\n  console.log(chalk.yellow('🔄 Memory Sync Tool - Usage:'));\n  console.log('');\n  console.log(chalk.blue('Commands:'));\n  console.log(chalk.gray('  status          - Show sync status'));\n  console.log(chalk.gray('  up/upload       - Upload local → Pinecone'));\n  console.log(chalk.gray('  down/download   - Download Pinecone → local'));\n  console.log(chalk.gray('  both/sync       - Bidirectional sync (recommended)'));\n  console.log(chalk.gray('  reset           - Reset Pinecone index (DANGER)'));\n  console.log(chalk.gray('  fix-embeddings   - Fix embedding dimensions'));\n  console.log(chalk.gray('  help            - Show this help'));\n  console.log('');\n  console.log(chalk.green('Examples:'));\n  console.log(chalk.gray('  node .cursor/rules/agents/_store/scripts/sync-memory.js status'));\n  console.log(chalk.gray('  node .cursor/rules/agents/_store/scripts/sync-memory.js both'));\n  console.log(chalk.gray('  npm run sync-memory both'));\n  console.log('');\n  console.log(chalk.yellow('Environment:'));\n  console.log(chalk.gray('  PINECONE_API_KEY - Required for Pinecone access'));\n  console.log(chalk.gray('  OPENAI_API_KEY   - Optional for better embeddings'));\n}\n\n// Run the script\nif (require.main === module) {\n  main().catch(error => {\n    console.error(chalk.red('💥 Fatal error:'), error.message);\n    process.exit(1);\n  });\n}\n\nmodule.exports = { main }; ",
  "metadata": {
    "content": "#!/usr/bin/env node\n\n/**\n * 🔄 Memory Sync Script\n * \n * Standalone script to sync memories between local storage and Pinecone\n */\n\n// Load environment variables\nrequire('dotenv').config();\n\nconst path = require('path');\nconst chalk = require('chalk');\n\n// Import the self-improvement agent\nconst SelfImprovementAgent = require('../../self-improvement/index');\n\nasync function main() {\n  const args = process.argv.slice(2);\n  const command = args[0] || 'help';\n\n  console.log(chalk.blue('🔄 Memory Sync Tool'));\n  console.log('');\n\n  // Check if API keys are configured\n  if (!process.env.PINECONE_API_KEY) {\n    console.log(chalk.red('❌ PINECONE_API_KEY not found in environment'));\n    console.log(chalk.gray('💡 Please set up your .env file with Pinecone API key'));\n    process.exit(1);\n  }\n\n  if (!process.env.OPENAI_API_KEY) {\n    console.log(chalk.yellow('⚠️ OPENAI_API_KEY not found - using fallback embeddings'));\n  }\n\n  try {\n    // Initialize agent\n    const agent = new SelfImprovementAgent();\n    await agent.initialize();\n\n    switch (command) {\n      case 'status':\n        await showStatus(agent);\n        break;\n        \n      case 'up':\n      case 'upload':\n        await syncUp(agent);\n        break;\n        \n      case 'down':\n      case 'download':\n        await syncDown(agent);\n        break;\n        \n      case 'both':\n      case 'sync':\n        await syncBoth(agent);\n        break;\n        \n      case 'reset':\n        await resetPinecone(agent);\n        break;\n        \n      case 'fix-embeddings':\n        console.log('🔧 Fixing embedding dimensions...');\n        await agent.handleMemoryCommand('fix-embeddings');\n        break;\n        \n      case 'help':\n      default:\n        showHelp();\n        break;\n    }\n\n    await agent.shutdown();\n    \n  } catch (error) {\n    console.error(chalk.red('❌ Error:'), error.message);\n    process.exit(1);\n  }\n}\n\nasync function showStatus(agent) {\n  console.log(chalk.green('📊 Checking sync status...'));\n  const result = await agent.handleMemoryCommand('sync-status');\n  \n  if (result.success) {\n    const status = result.syncStatus;\n    console.log(chalk.blue(`  📡 Pinecone: ${status.pineconeConnected ? '✅ Connected' : '❌ Disconnected'}`));\n    console.log(chalk.blue(`  🤖 OpenAI: ${status.openaiConnected ? '✅ Connected' : '❌ Disconnected'}`));\n    console.log(chalk.blue(`  💾 Local Memories: ${status.localMemories}`));\n    console.log(chalk.blue(`  ☁️ Pinecone Memories: ${status.pineconeMemories}`));\n    \n    if (status.localMemories !== status.pineconeMemories) {\n      console.log(chalk.yellow('⚠️ Memories are out of sync'));\n      console.log(chalk.gray('💡 Run \"npm run sync-memory both\" to synchronize'));\n    } else {\n      console.log(chalk.green('✅ Memories are in sync'));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncUp(agent) {\n  console.log(chalk.green('📤 Uploading local memories to Pinecone...'));\n  const result = await agent.handleMemoryCommand('sync-up');\n  \n  if (result.success) {\n    console.log(chalk.green(`✅ Upload complete: ${result.uploaded} uploaded, ${result.skipped} skipped`));\n    if (result.errors > 0) {\n      console.log(chalk.yellow(`⚠️ ${result.errors} errors occurred`));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncDown(agent) {\n  console.log(chalk.green('📥 Downloading Pinecone memories to local...'));\n  const result = await agent.handleMemoryCommand('sync-down');\n  \n  if (result.success) {\n    console.log(chalk.green(`✅ Download complete: ${result.downloaded} downloaded, ${result.skipped} skipped`));\n    if (result.errors > 0) {\n      console.log(chalk.yellow(`⚠️ ${result.errors} errors occurred`));\n    }\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function syncBoth(agent) {\n  console.log(chalk.green('🔄 Performing bidirectional sync...'));\n  const result = await agent.handleMemoryCommand('sync-both');\n  \n  if (result.success) {\n    console.log(chalk.green('✅ Bidirectional sync complete!'));\n    console.log(chalk.blue(`📤 Upload: ${result.upload.uploaded} uploaded, ${result.upload.skipped} skipped`));\n    console.log(chalk.blue(`📥 Download: ${result.download.downloaded} downloaded, ${result.download.skipped} skipped`));\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nasync function resetPinecone(agent) {\n  console.log(chalk.red('⚠️ WARNING: This will delete ALL memories from Pinecone!'));\n  console.log(chalk.gray('Press Ctrl+C to cancel, or wait 5 seconds to continue...'));\n  \n  await new Promise(resolve => setTimeout(resolve, 5000));\n  \n  const result = await agent.handleMemoryCommand('reset-pinecone');\n  \n  if (result.success) {\n    console.log(chalk.green('✅ Pinecone index reset successfully'));\n    console.log(chalk.yellow('⚠️ All cloud memories have been deleted'));\n  } else {\n    console.log(chalk.red(`❌ ${result.message}`));\n  }\n}\n\nfunction showHelp() {\n  console.log(chalk.yellow('🔄 Memory Sync Tool - Usage:'));\n  console.log('');\n  console.log(chalk.blue('Commands:'));\n  console.log(chalk.gray('  status          - Show sync status'));\n  console.log(chalk.gray('  up/upload       - Upload local → Pinecone'));\n  console.log(chalk.gray('  down/download   - Download Pinecone → local'));\n  console.log(chalk.gray('  both/sync       - Bidirectional sync (recommended)'));\n  console.log(chalk.gray('  reset           - Reset Pinecone index (DANGER)'));\n  console.log(chalk.gray('  fix-embeddings   - Fix embedding dimensions'));\n  console.log(chalk.gray('  help            - Show this help'));\n  console.log('');\n  console.log(chalk.green('Examples:'));\n  console.log(chalk.gray('  node .cursor/rules/agents/_store/scripts/sync-memory.js status'));\n  console.log(chalk.gray('  node .cursor/rules/agents/_store/scripts/sync-memory.js both'));\n  console.log(chalk.gray('  npm run sync-memory both'));\n  console.log('');\n  console.log(chalk.yellow('Environment:'));\n  console.log(chalk.gray('  PINECONE_API_KEY - Required for Pinecone access'));\n  console.log(chalk.gray('  OPENAI_API_KEY   - Optional for better embeddings'));\n}\n\n// Run the script\nif (require.main === module) {\n  main().catch(error => {\n    console.error(chalk.red('💥 Fatal error:'), error.message);\n    process.exit(1);\n  });\n}\n\nmodule.exports = { main }; ",
    "description": "No description available",
    "filename": "sync-memory.js",
    "functions": "main, showStatus, syncUp, syncDown, syncBoth, resetPinecone, showHelp",
    "keyFeatures": "Async/Await, Logging",
    "originalPath": ".cursor/rules/agents/_store/scripts/sync-memory.js",
    "preservedAt": "2025-05-25T01:35:35.661Z",
    "size": 6309,
    "timestamp": "2025-05-25T01:37:59.172Z",
    "type": "preserved-code"
  },
  "embedding": []
}