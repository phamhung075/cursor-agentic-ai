{
  "id": "preserved-install-agent-ai.js-1748137073215",
  "type": "preserved-code",
  "content": "#!/usr/bin/env node\n\n/**\n * 🚀 Agent AI Installer - Install Agent AI system into any project\n * \n * This script copies the complete Agent AI system to another project directory\n */\n\nconst fs = require('fs').promises;\nconst path = require('path');\nconst readline = require('readline');\nconst { execSync } = require('child_process');\n\nclass AgentAIInstaller {\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    \n    this.sourceRoot = path.resolve(__dirname, '../../..');\n    this.requiredFiles = [\n      // Core agent files\n      '.cursor/rules/agents/self-improvement/',\n      '.cursor/rules/agents/utils/',\n      '.cursor/rules/agents/_store/scripts/setup-env.js',\n      '.cursor/rules/agents/_store/scripts/demo_agent.js',\n      '.cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js',\n      '.cursor/rules/agents/_store/templates/environment-template.env',\n      '.cursor/rules/agents/_store/tests/',\n      '.cursor/rules/agents/README.md',\n      \n      // Documentation\n      '.cursor/rules/agents/_store/docs/'\n    ];\n    \n    this.requiredDependencies = {\n      \"chokidar\": \"^3.5.3\",\n      \"marked\": \"^5.1.1\", \n      \"gray-matter\": \"^4.0.3\",\n      \"chalk\": \"^4.1.2\",\n      \"@pinecone-database/pinecone\": \"^2.0.1\",\n      \"openai\": \"^4.28.0\"\n    };\n    \n    this..cursor/rules/agentscripts = {\n      \"AAI:start\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:agent\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:analyze\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:improve\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:legacy\": \"node .cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js\",\n      \"AAI:demo\": \"node .cursor/rules/agents/_store/scripts/demo_agent.js\",\n      \"AAI:install-deps\": \"npm install\",\n      \"AAI:test\": \"echo \\\"Tests to be implemented\\\" && exit 0\",\n      \"AAI:test-agent\": \"node .cursor/rules/agents/_store/tests/test_new_agent.js\",\n      \"AAI:test-system\": \"node .cursor/rules/agents/_store/tests/test_new_system.js\",\n      \"AAI:test-integration\": \"node .cursor/rules/agents/_store/tests/test_autopilot_integration.js\",\n      \"AAI:test-dependencies\": \"node .cursor/rules/agents/_store/tests/test_dependency_tracking.js\",\n      \"AAI:migrate-files\": \"node .cursor/rules/agents/utils/migrate_to_store.js\",\n      \"AAI:setup-env\": \"node .cursor/rules/agents/_store/scripts/setup-env.js\",\n      \"AAI:test-startup\": \"node .cursor/rules/agents/self-improvement/index.js --test\"\n    };\n  }\n\n  showHelp() {\n    console.log('🚀 Agent AI Installer');\n    console.log('=' .repeat(50));\n    console.log('Install the complete Agent AI system into any project\\n');\n    \n    console.log('🤖 AI Assistant Compatibility:');\n    console.log('  ✅ Windsurf - Full compatibility');\n    console.log('  ✅ Cursor - Full compatibility');\n    console.log('  ✅ Cline - Full compatibility');\n    console.log('  ✅ Any AI Assistant - Universal support');\n    console.log('  💡 Runs independently alongside your chosen AI tool!\\n');\n    \n    console.log('📖 Usage:');\n    console.log('  node install-agent-ai.js [target-directory]');\n    console.log('  node install-agent-ai.js --help\\n');\n    \n    console.log('📁 Examples:');\n    console.log('  node install-agent-ai.js                    # Install to current directory');\n    console.log('  node install-agent-ai.js /path/to/project   # Install to specific directory');\n    console.log('  node install-agent-ai.js --help             # Show this help\\n');\n    \n    console.log('🎯 What gets installed:');\n    console.log('  ✅ Complete Agent AI system (.cursor/rules/agents/ directory)');\n    console.log('  ✅ All required dependencies in package.json');\n    console.log('  ✅ AAI scripts for npm run commands');\n    console.log('  ✅ Environment template (.env.example)');\n    console.log('  ✅ Proper .gitignore entries');\n    console.log('  ✅ Complete documentation');\n    console.log('  ✅ File dependency tracking system');\n    console.log('  ✅ Intelligent memory with Pinecone integration\\n');\n    \n    console.log('🚀 After installation:');\n    console.log('  cd target-directory');\n    console.log('  npm run AAI:agent          # Start the Agent AI');\n    console.log('  npm run AAI:test-system    # Test installation');\n    console.log('  npm run AAI:setup-env      # Setup environment\\n');\n    \n    console.log('💡 The Agent AI works 100% locally without API keys!');\n    console.log('🤖 Compatible with Windsurf, Cursor, Cline, and all AI assistants!');\n    console.log('📚 Full documentation: .cursor/rules/agents/_store/docs/INSTALLATION_GUIDE.md');\n  }\n\n  async install() {\n    // Check for help flag\n    if (process.argv.includes('--help') || process.argv.includes('-h')) {\n      this.showHelp();\n      this.rl.close();\n      return;\n    }\n\n    console.log('🚀 Agent AI Installer');\n    console.log('=' .repeat(50));\n    \n    try {\n      // Get target directory\n      const targetDir = await this.getTargetDirectory();\n      \n      // Validate target directory\n      await this.validateTarget(targetDir);\n      \n      // Confirm installation\n      const confirmed = await this.confirmInstallation(targetDir);\n      if (!confirmed) {\n        console.log('Installation cancelled.');\n        return;\n      }\n      \n      // Create backup if package.json exists\n      await this.createBackup(targetDir);\n      \n      // Copy agent files\n      console.log('\\n📁 Copying Agent AI files...');\n      await this.copyAgentFiles(targetDir);\n      \n      // Setup directory structure\n      console.log('📂 Setting up directory structure...');\n      await this.setupDirectories(targetDir);\n      \n      // Update package.json\n      console.log('📝 Updating package.json...');\n      await this.updatePackageJson(targetDir);\n      \n      // Create environment template\n      console.log('🔧 Setting up environment...');\n      await this.setupEnvironment(targetDir);\n      \n      // Install dependencies\n      console.log('📦 Installing dependencies...');\n      await this.installDependencies(targetDir);\n      \n      // Create gitignore entries\n      console.log('🛡️ Setting up .gitignore...');\n      await this.setupGitignore(targetDir);\n      \n      // Success message\n      this.showSuccessMessage(targetDir);\n      \n    } catch (error) {\n      console.error('❌ Installation failed:', error.message);\n      console.error('Please check the error and try again.');\n      console.log('\\n💡 Run with --help for usage information');\n    }\n    \n    this.rl.close();\n  }\n\n  async getTargetDirectory() {\n    const argDir = process.argv[2];\n    if (argDir && !argDir.startsWith('--')) {\n      return path.resolve(argDir);\n    }\n    \n    const defaultTarget = process.cwd();\n    const target = await this.ask(`📁 Target project directory (${defaultTarget}): `) || defaultTarget;\n    return path.resolve(target);\n  }\n\n  async validateTarget(targetDir) {\n    try {\n      const stats = await fs.stat(targetDir);\n      if (!stats.isDirectory()) {\n        throw new Error('Target must be a directory');\n      }\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        const create = await this.ask('Directory does not exist. Create it? (y/n): ');\n        if (create.toLowerCase() === 'y') {\n          await fs.mkdir(targetDir, { recursive: true });\n        } else {\n          throw new Error('Target directory does not exist');\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async confirmInstallation(targetDir) {\n    console.log(`\\n🎯 Installing Agent AI to: ${targetDir}`);\n    console.log('This will:');\n    console.log('  ✅ Copy all Agent AI files');\n    console.log('  ✅ Update package.json with AAI scripts');\n    console.log('  ✅ Install required dependencies');\n    console.log('  ✅ Setup environment configuration');\n    console.log('  ✅ Create proper .gitignore entries');\n    \n    const confirm = await this.ask('\\nProceed with installation? (y/n): ');\n    return confirm.toLowerCase() === 'y';\n  }\n\n  async createBackup(targetDir) {\n    const packageJsonPath = path.join(targetDir, 'package.json');\n    try {\n      await fs.access(packageJsonPath);\n      const backupPath = path.join(targetDir, 'package.json.backup');\n      await fs.copyFile(packageJsonPath, backupPath);\n      console",
  "metadata": {
    "content": "#!/usr/bin/env node\n\n/**\n * 🚀 Agent AI Installer - Install Agent AI system into any project\n * \n * This script copies the complete Agent AI system to another project directory\n */\n\nconst fs = require('fs').promises;\nconst path = require('path');\nconst readline = require('readline');\nconst { execSync } = require('child_process');\n\nclass AgentAIInstaller {\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    \n    this.sourceRoot = path.resolve(__dirname, '../../..');\n    this.requiredFiles = [\n      // Core agent files\n      '.cursor/rules/agents/self-improvement/',\n      '.cursor/rules/agents/utils/',\n      '.cursor/rules/agents/_store/scripts/setup-env.js',\n      '.cursor/rules/agents/_store/scripts/demo_agent.js',\n      '.cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js',\n      '.cursor/rules/agents/_store/templates/environment-template.env',\n      '.cursor/rules/agents/_store/tests/',\n      '.cursor/rules/agents/README.md',\n      \n      // Documentation\n      '.cursor/rules/agents/_store/docs/'\n    ];\n    \n    this.requiredDependencies = {\n      \"chokidar\": \"^3.5.3\",\n      \"marked\": \"^5.1.1\", \n      \"gray-matter\": \"^4.0.3\",\n      \"chalk\": \"^4.1.2\",\n      \"@pinecone-database/pinecone\": \"^2.0.1\",\n      \"openai\": \"^4.28.0\"\n    };\n    \n    this..cursor/rules/agentscripts = {\n      \"AAI:start\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:agent\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:analyze\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:improve\": \"node .cursor/rules/agents/self-improvement/index.js\",\n      \"AAI:legacy\": \"node .cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js\",\n      \"AAI:demo\": \"node .cursor/rules/agents/_store/scripts/demo_agent.js\",\n      \"AAI:install-deps\": \"npm install\",\n      \"AAI:test\": \"echo \\\"Tests to be implemented\\\" && exit 0\",\n      \"AAI:test-agent\": \"node .cursor/rules/agents/_store/tests/test_new_agent.js\",\n      \"AAI:test-system\": \"node .cursor/rules/agents/_store/tests/test_new_system.js\",\n      \"AAI:test-integration\": \"node .cursor/rules/agents/_store/tests/test_autopilot_integration.js\",\n      \"AAI:test-dependencies\": \"node .cursor/rules/agents/_store/tests/test_dependency_tracking.js\",\n      \"AAI:migrate-files\": \"node .cursor/rules/agents/utils/migrate_to_store.js\",\n      \"AAI:setup-env\": \"node .cursor/rules/agents/_store/scripts/setup-env.js\",\n      \"AAI:test-startup\": \"node .cursor/rules/agents/self-improvement/index.js --test\"\n    };\n  }\n\n  showHelp() {\n    console.log('🚀 Agent AI Installer');\n    console.log('=' .repeat(50));\n    console.log('Install the complete Agent AI system into any project\\n');\n    \n    console.log('🤖 AI Assistant Compatibility:');\n    console.log('  ✅ Windsurf - Full compatibility');\n    console.log('  ✅ Cursor - Full compatibility');\n    console.log('  ✅ Cline - Full compatibility');\n    console.log('  ✅ Any AI Assistant - Universal support');\n    console.log('  💡 Runs independently alongside your chosen AI tool!\\n');\n    \n    console.log('📖 Usage:');\n    console.log('  node install-agent-ai.js [target-directory]');\n    console.log('  node install-agent-ai.js --help\\n');\n    \n    console.log('📁 Examples:');\n    console.log('  node install-agent-ai.js                    # Install to current directory');\n    console.log('  node install-agent-ai.js /path/to/project   # Install to specific directory');\n    console.log('  node install-agent-ai.js --help             # Show this help\\n');\n    \n    console.log('🎯 What gets installed:');\n    console.log('  ✅ Complete Agent AI system (.cursor/rules/agents/ directory)');\n    console.log('  ✅ All required dependencies in package.json');\n    console.log('  ✅ AAI scripts for npm run commands');\n    console.log('  ✅ Environment template (.env.example)');\n    console.log('  ✅ Proper .gitignore entries');\n    console.log('  ✅ Complete documentation');\n    console.log('  ✅ File dependency tracking system');\n    console.log('  ✅ Intelligent memory with Pinecone integration\\n');\n    \n    console.log('🚀 After installation:');\n    console.log('  cd target-directory');\n    console.log('  npm run AAI:agent          # Start the Agent AI');\n    console.log('  npm run AAI:test-system    # Test installation');\n    console.log('  npm run AAI:setup-env      # Setup environment\\n');\n    \n    console.log('💡 The Agent AI works 100% locally without API keys!');\n    console.log('🤖 Compatible with Windsurf, Cursor, Cline, and all AI assistants!');\n    console.log('📚 Full documentation: .cursor/rules/agents/_store/docs/INSTALLATION_GUIDE.md');\n  }\n\n  async install() {\n    // Check for help flag\n    if (process.argv.includes('--help') || process.argv.includes('-h')) {\n      this.showHelp();\n      this.rl.close();\n      return;\n    }\n\n    console.log('🚀 Agent AI Installer');\n    console.log('=' .repeat(50));\n    \n    try {\n      // Get target directory\n      const targetDir = await this.getTargetDirectory();\n      \n      // Validate target directory\n      await this.validateTarget(targetDir);\n      \n      // Confirm installation\n      const confirmed = await this.confirmInstallation(targetDir);\n      if (!confirmed) {\n        console.log('Installation cancelled.');\n        return;\n      }\n      \n      // Create backup if package.json exists\n      await this.createBackup(targetDir);\n      \n      // Copy agent files\n      console.log('\\n📁 Copying Agent AI files...');\n      await this.copyAgentFiles(targetDir);\n      \n      // Setup directory structure\n      console.log('📂 Setting up directory structure...');\n      await this.setupDirectories(targetDir);\n      \n      // Update package.json\n      console.log('📝 Updating package.json...');\n      await this.updatePackageJson(targetDir);\n      \n      // Create environment template\n      console.log('🔧 Setting up environment...');\n      await this.setupEnvironment(targetDir);\n      \n      // Install dependencies\n      console.log('📦 Installing dependencies...');\n      await this.installDependencies(targetDir);\n      \n      // Create gitignore entries\n      console.log('🛡️ Setting up .gitignore...');\n      await this.setupGitignore(targetDir);\n      \n      // Success message\n      this.showSuccessMessage(targetDir);\n      \n    } catch (error) {\n      console.error('❌ Installation failed:', error.message);\n      console.error('Please check the error and try again.');\n      console.log('\\n💡 Run with --help for usage information');\n    }\n    \n    this.rl.close();\n  }\n\n  async getTargetDirectory() {\n    const argDir = process.argv[2];\n    if (argDir && !argDir.startsWith('--')) {\n      return path.resolve(argDir);\n    }\n    \n    const defaultTarget = process.cwd();\n    const target = await this.ask(`📁 Target project directory (${defaultTarget}): `) || defaultTarget;\n    return path.resolve(target);\n  }\n\n  async validateTarget(targetDir) {\n    try {\n      const stats = await fs.stat(targetDir);\n      if (!stats.isDirectory()) {\n        throw new Error('Target must be a directory');\n      }\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        const create = await this.ask('Directory does not exist. Create it? (y/n): ');\n        if (create.toLowerCase() === 'y') {\n          await fs.mkdir(targetDir, { recursive: true });\n        } else {\n          throw new Error('Target directory does not exist');\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async confirmInstallation(targetDir) {\n    console.log(`\\n🎯 Installing Agent AI to: ${targetDir}`);\n    console.log('This will:');\n    console.log('  ✅ Copy all Agent AI files');\n    console.log('  ✅ Update package.json with AAI scripts');\n    console.log('  ✅ Install required dependencies');\n    console.log('  ✅ Setup environment configuration');\n    console.log('  ✅ Create proper .gitignore entries');\n    \n    const confirm = await this.ask('\\nProceed with installation? (y/n): ');\n    return confirm.toLowerCase() === 'y';\n  }\n\n  async createBackup(targetDir) {\n    const packageJsonPath = path.join(targetDir, 'package.json');\n    try {\n      await fs.access(packageJsonPath);\n      const backupPath = path.join(targetDir, 'package.json.backup');\n      await fs.copyFile(packageJsonPath, backupPath);\n      console",
    "description": "No description available",
    "filename": "install-agent-ai.js",
    "functions": "AgentAIInstaller",
    "keyFeatures": "Object-Oriented, Async/Await, File System, Path Manipulation, Process Management, Logging, JSON Processing",
    "originalPath": ".cursor/rules/agents/_store/scripts/install-agent-ai.js",
    "preservedAt": "2025-05-25T01:35:35.655Z",
    "size": 14149,
    "timestamp": "2025-05-25T01:37:53.216Z",
    "type": "preserved-code"
  },
  "embedding": []
}