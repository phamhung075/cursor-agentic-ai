================================================
FILE: README.md
================================================
# MCP Hello World - MCP Server Mock for Testing


This is a **minimal Model Context Protocol (MCP) server** implemented in TypeScript, primarily intended to serve as a **Test Double / Mock Server**.

**Core Purpose**: To provide a lightweight, controllable, and predictable MCP server environment for **unit testing** or **integration testing** client code that needs to interact with an MCP server.

**Note:** This project is **not suitable for production environments** or deployment as a general-purpose MCP server.

## Why Use `mcp-hello-world` in Tests?

When testing code related to MCP clients, you usually don't want to depend on a real, potentially complex, and unpredictably responsive AI backend service. Using `mcp-hello-world` as a test double offers several advantages:

1.  **Isolation**: Focus your tests on client logic without worrying about network issues or the availability of the real server.
2.  **Predictability**: The provided `echo` and `debug` tools have simple, fixed behaviors, making it easy to write assertions.
3.  **Speed**: Fast startup and response times, suitable for frequent use in unit tests.
4.  **Lightweight**: Few dependencies, easy to integrate into test environments.
5.  **Protocol Coverage**: Supports both `STDIO` and `HTTP/SSE` MCP transport protocols, allowing you to test client behavior under different connection methods.

## Installation

Add this package as a **dev dependency** to your project:

```bash
# Using pnpm
pnpm add --save-dev mcp-hello-world

# Or using bun
bun add --dev mcp-hello-world
```

## Manual Execution (for Debugging Tests)

You might want to run the server manually sometimes to debug your tests or client behavior.

### STDIO Mode

This is the simplest way to run, especially during local development and debugging.

```bash
# Ensure it's installed (globally or in the project)
# Using npx (universal)
npx mcp-hello-world

# Or using pnpm dlx
pnpm dlx mcp-hello-world

# Or using bunx
bunx mcp-hello-world
```

The server will listen on standard input and output MCP responses to standard output. You can use tools like [MCP Inspector](https://github.com/lobehub/mcp-inspector) to connect to the process.

### HTTP/SSE Mode

If you need to debug via a network interface or test HTTP-based MCP clients.

```bash
# 1. Clone the repository (if not already installed in the project)
# git clone https://github.com/lobehub/mcp-hello-world.git
# cd mcp-hello-world
# pnpm install / bun install

# 2. Build the project
# Using pnpm
pnpm build
# Or using bun
bun run build

# 3. Start the HTTP server
# Using pnpm
pnpm start:http
# Or using bun
bun run start:http
```

The server will start on `http://localhost:3000` and provide:
-   SSE endpoint: `/sse`
-   Message endpoint: `/messages`

## Usage in Tests

You can programmatically start and stop the `mcp-hello-world` server within your test framework (like Jest, Vitest, Mocha, etc.) for automated testing.

### Example: Testing with STDIO Mode (Node.js)

```typescript
// test/my-mcp-client.test.ts (Example using Jest)
import { spawn } from 'child_process';
import { MCPClient } from '../src/my-mcp-client'; // Assuming this is your client code

describe('My MCP Client (STDIO)', () => {
  let mcpServerProcess;
  let client: MCPClient;

  beforeAll(() => {
    // Start the mcp-hello-world process before tests
    // Using npx (or pnpm dlx / bunx) ensures the command is found and executed
    mcpServerProcess = spawn('npx', ['mcp-hello-world']);

    // Instantiate your client and connect to the subprocess's stdio
    client = new MCPClient(mcpServerProcess.stdin, mcpServerProcess.stdout);
  });

  afterAll(() => {
    // Shut down the mcp-hello-world process after tests
    mcpServerProcess.kill();
  });

  it('should receive echo response', async () => {
    const request = {
      jsonrpc: '2.0',
      id: 1,
      method: 'tools/invoke',
      params: { name: 'echo', parameters: { message: 'test message' } },
    };

    const response = await client.sendRequest(request); // Assuming your client has this method

    expect(response).toEqual({
      jsonrpc: '2.0',
      id: 1,
      result: { content: [{ type: 'text', text: 'Hello test message' }] },
    });
  });

  it('should get greeting resource', async () => {
    const request = {
      jsonrpc: '2.0',
      id: 2,
      method: 'resources/get',
      params: { uri: 'greeting://Alice' },
    };
    const response = await client.sendRequest(request);
    expect(response).toEqual({
      jsonrpc: '2.0',
      id: 2,
      result: { data: 'Hello Alice!' }, // Confirm return format based on actual implementation
    });
  });

  // ... other test cases
});
```

### Example: Testing with HTTP/SSE Mode

For HTTP/SSE, you might need to:
1.  Use `exec` or `spawn` in `beforeAll` to start `pnpm start:http` or `bun run start:http`.
2.  Use an HTTP client (like `axios`, `node-fetch`, or your test framework's built-in client) to connect to `http://localhost:3000/sse` and `/messages` for testing.
3.  Ensure you shut down the started server process in `afterAll`.

## Provided MCP Capabilities (for Test Assertions)

`mcp-hello-world` provides the following fixed capabilities for interaction and assertion in your tests:

### Resources

-   **`hello://world`**
    -   Description: A static Hello World resource.
    -   Method: `resources/get`
    -   Parameters: None
    -   Returns: `{ data: 'Hello World!' }`
-   **`greeting://{name}`**
    -   Description: A dynamic greeting resource.
    -   Method: `resources/get`
    -   Parameters: `name` included in the URI, e.g., `greeting://Bob`.
    -   Returns: `{ data: 'Hello {name}!' }` (e.g., `{ data: 'Hello Bob!' }`)

### Tools

-   **`echo`**
    -   Description: Echoes the input message, prefixed with "Hello ".
    -   Method: `tools/invoke`
    -   Parameters: `{ name: 'echo', parameters: { message: string } }`
    -   Returns: `{ content: [{ type: 'text', text: 'Hello {message}' }] }` (e.g., `{ content: [{ type: 'text', text: 'Hello test' }] }`)
-   **`debug`**
    -   Description: Lists all available MCP method definitions on the server.
    -   Method: `tools/invoke`
    -   Parameters: `{ name: 'debug', parameters: {} }`
    -   Returns: A JSON structure containing definitions for all registered resources, tools, and prompts.

### Prompts

-   **`helpful-assistant`**
    -   Description: A basic assistant prompt definition.
    -   Method: `prompts/get`
    -   Parameters: None
    -   Returns: A JSON structure for the prompt with predefined `system` and `user` roles.

## License

MIT



================================================
FILE: CHANGELOG.md
================================================
<a name="readme-top"></a>

# Changelog

### [Version&nbsp;1.1.2](https://github.com/lobehub/mcp-hello-world/compare/v1.1.1...v1.1.2)
<sup>Released on **2025-04-20**</sup>


#### üíÑ Styles

- **misc**: Improve output.


<br/>



<details>
<summary><kbd>Improvements and Fixes</kbd></summary>



#### Styles

* **misc**: Improve output ([3dd383c](https://github.com/lobehub/mcp-hello-world/commit/3dd383c))

</details>


<div align="right">

[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)

</div>

### [Version&nbsp;1.1.1](https://github.com/lobehub/mcp-hello-world/compare/v1.1.0...v1.1.1)
<sup>Released on **2025-04-20**</sup>


#### üêõ Bug Fixes

- **misc**: Fix output files.


<br/>



<details>
<summary><kbd>Improvements and Fixes</kbd></summary>



#### What's fixed

* **misc**: Fix output files ([fe5c9d8](https://github.com/lobehub/mcp-hello-world/commit/fe5c9d8))

</details>


<div align="right">

[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)

</div>

## [Version&nbsp;1.1.0](https://github.com/lobehub/mcp-hello-world/compare/v1.0.0...v1.1.0)
<sup>Released on **2025-04-20**</sup>


#### ‚ú® Features

- **misc**: Bump version.


<br/>



<details>
<summary><kbd>Improvements and Fixes</kbd></summary>



#### What's improved

* **misc**: Bump version ([fa7bdd5](https://github.com/lobehub/mcp-hello-world/commit/fa7bdd5))

</details>


<div align="right">

[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)

</div>

## Version&nbsp;1.0.0
<sup>Released on **2025-04-20**</sup>


#### ‚ú® Features

- **misc**: Init mcp hello word.


<br/>



<details>
<summary><kbd>Improvements and Fixes</kbd></summary>



#### What's improved

* **misc**: Init mcp hello word ([8a8f5c9](https://github.com/lobehub/mcp-hello-world/commit/8a8f5c9))

</details>


<div align="right">

[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)

</div>



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2023 LobeHub

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: package.json
================================================
{
  "name": "mcp-hello-world",
  "version": "1.1.2",
  "description": "A simple Hello World MCP server",
  "keywords": [
    "lobehub",
    "model-context-protocol",
    "sdk"
  ],
  "homepage": "https://github.com/lobehub/mcp-hello-world",
  "bugs": {
    "url": "https://github.com/lobehub/mcp-hello-world/issues/new"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lobehub/mcp-hello-world.git"
  },
  "license": "MIT",
  "type": "module",
  "author": "LobeHub <i@lobehub.com>",
  "bin": {
    "mcp-hello-world": "./build/stdio.js"
  },
  "sideEffects": false,
  "main": "./build/index.js",
  "types": "./build/index.d.ts",
  "files": [
    "build"
  ],
  "scripts": {
    "build": "tsc",
    "ci": "npm run lint && npm run type-check",
    "start": "node build/stdio.js",
    "start:http": "node build/http.js",
    "lint": "eslint \"{src,example}/**/*.{js,jsx,ts,tsx}\" --fix",
    "lint:style": "stylelint \"{src,example}/**/*.{js,jsx,ts,tsx}\" --fix",
    "prepack": "npm run build && clean-pkg-json",
    "prepare": "husky install",
    "prepublishOnly": "npm run build",
    "prettier": "prettier -c --write --no-error-on-unmatched-pattern \"**/**\"",
    "release": "semantic-release",
    "test": "vitest --passWithNoTests",
    "test:coverage": "vitest run --coverage  --passWithNoTests",
    "test:update": "vitest -u",
    "type-check": "tsc -p tsconfig-check.json"
  },
  "lint-staged": {
    "*.json": [
      "prettier --write --no-error-on-unmatched-pattern"
    ],
    "*.{js,jsx}": [
      "prettier --write",
      "stylelint --fix",
      "eslint --fix"
    ],
    "*.{ts,tsx}": [
      "prettier --parser=typescript --write",
      "stylelint --fix",
      "eslint --fix"
    ]
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.7.0",
    "express": "^4.18.2",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@commitlint/cli": "^18",
    "@lobehub/i18n-cli": "^1.10.0",
    "@lobehub/lint": "latest",
    "@testing-library/react": "^14.1.2",
    "@types/lodash-es": "^4",
    "@types/node": "^22",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@vitest/coverage-v8": "^1",
    "clean-pkg-json": "^1",
    "commitlint": "^18",
    "dumi": "^2",
    "dumi-theme-lobehub": "latest",
    "eslint": "^8",
    "husky": "^8",
    "jsdom": "^22",
    "leva": "^0",
    "lint-staged": "^15",
    "prettier": "^3",
    "react": "^18",
    "react-dom": "^18",
    "remark": "^14",
    "remark-cli": "^11",
    "semantic-release": "^21",
    "@types/express": "^4.17.21",
    "rimraf": "^5.0.5",
    "stylelint": "^15",
    "ts-json-schema-generator": "^1.4.0",
    "typescript": "^5",
    "vitest": "^1"
  },
  "peerDependencies": {
    "react": ">=18",
    "react-dom": ">=18"
  },
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org"
  }
}



================================================
FILE: README.zh-CN.md
================================================
# MCP Hello World - Áî®‰∫éÊµãËØïÁöÑ MCP ÊúçÂä°Á´ØÊ®°Êãü

[![][npm-release-shield]][npm-release-link]
[![][npm-downloads-shield]][npm-downloads-link]
[![][github-action-test-shield]][github-action-test-link]
[![][github-action-release-shield]][github-action-release-link]

[github-action-release-link]: https://github.com/lobehub/mcp-hello-world/actions/workflows/release.yml
[github-action-release-shield]: https://img.shields.io/github/actions/workflow/status/lobehub/mcp-hello-world/release.yml?label=Release&logo=githubactions&logoColor=white&style=flat-square
[github-action-test-link]: https://github.com/lobehub/mcp-hello-world/actions/workflows/test.yml
[github-action-test-shield]: https://img.shields.io/github/actions/workflow/status/lobehub/mcp-hello-world/test.yml?label=Test&logo=githubactions&logoColor=white&style=flat-square
[npm-downloads-link]: https://www.npmjs.com/package/mcp-hello-world
[npm-downloads-shield]: https://img.shields.io/npm/dt/mcp-hello-world?label=Downloads&logo=npm&style=flat-square
[npm-release-link]: https://www.npmjs.com/package/mcp-hello-world
[npm-release-shield]: https://img.shields.io/npm/v/mcp-hello-world?logo=npm&style=flat-square

ËøôÊòØ‰∏Ä‰∏™Âü∫‰∫é TypeScript ÂÆûÁé∞ÁöÑ **ÊûÅÁÆÄÊ®°Âûã‰∏ä‰∏ãÊñáÂçèËÆÆ (MCP) ÊúçÂä°Á´Ø**ÔºåÂÖ∂**‰∏ªË¶ÅÁõÆÁöÑÊòØ‰Ωú‰∏∫ÊµãËØïÊõøË∫´ (Test Double) / Ê®°ÊãüÊúçÂä°Âô® (Mock Server)**„ÄÇ

**Ê†∏ÂøÉÁî®ÈÄî**ÔºöÂú®ÈíàÂØπÈúÄË¶Å‰∏é MCP ÊúçÂä°Á´Ø‰∫§‰∫íÁöÑÂÆ¢Êà∑Á´Ø‰ª£Á†ÅËøõË°å**ÂçïÂÖÉÊµãËØï**Êàñ**ÈõÜÊàêÊµãËØï**Êó∂ÔºåÊèê‰æõ‰∏Ä‰∏™ËΩªÈáèÁ∫ß„ÄÅÂèØÊéß‰∏îË°å‰∏∫ÂèØÈ¢ÑÊµãÁöÑ MCP ÊúçÂä°Á´ØÁéØÂ¢É„ÄÇ

**Ê≥®ÊÑèÔºö** Êú¨È°πÁõÆ**‰∏çÈÄÇÁî®‰∫éÁîü‰∫ßÁéØÂ¢É**Êàñ‰Ωú‰∏∫ÈÄöÁî®ÁöÑ MCP ÊúçÂä°Á´ØÈÉ®ÁΩ≤„ÄÇ

## ‰∏∫‰ªÄ‰πàÂú®ÊµãËØï‰∏≠‰ΩøÁî® `mcp-hello-world`Ôºü

Âú®ÊµãËØï‰∏é MCP ÂÆ¢Êà∑Á´ØÁõ∏ÂÖ≥ÁöÑ‰ª£Á†ÅÊó∂Ôºå‰Ω†ÈÄöÂ∏∏‰∏çÂ∏åÊúõ‰æùËµñ‰∏Ä‰∏™ÁúüÂÆûÁöÑ„ÄÅÂèØËÉΩÂ§çÊùÇÁöÑ„ÄÅÂìçÂ∫î‰∏çÁ°ÆÂÆöÁöÑ AI ÂêéÁ´ØÊúçÂä°„ÄÇ‰ΩøÁî® `mcp-hello-world` ‰Ωú‰∏∫ÊµãËØïÊõøË∫´Êúâ‰ª•‰∏ãÂ•ΩÂ§ÑÔºö

1.  **ÈöîÁ¶ªÊÄß (Isolation)**ÔºöËÆ©‰Ω†ÁöÑÊµãËØï‰∏ìÊ≥®‰∫éÂÆ¢Êà∑Á´ØÈÄªËæëÔºåËÄåÊó†ÈúÄÂÖ≥ÂøÉÁΩëÁªúÈóÆÈ¢òÊàñÁúüÂÆûÊúçÂä°Á´ØÁöÑÂèØÁî®ÊÄß„ÄÇ
2.  **ÂèØÈ¢ÑÊµãÊÄß (Predictability)**ÔºöÊèê‰æõÁöÑ `echo` Âíå `debug` Â∑•ÂÖ∑Ë°å‰∏∫ÁÆÄÂçï‰∏îÂõ∫ÂÆöÔºåÊñπ‰æøÁºñÂÜôÊñ≠Ë®Ä„ÄÇ
3.  **ÈÄüÂ∫¶ (Speed)**ÔºöÂêØÂä®ÂíåÂìçÂ∫îÈÄüÂ∫¶Âø´ÔºåÈÄÇÂêàÂú®ÂçïÂÖÉÊµãËØï‰∏≠È¢ëÁπÅ‰ΩøÁî®„ÄÇ
4.  **ËΩªÈáèÁ∫ß (Lightweight)**Ôºö‰æùËµñÂ∞ëÔºåÊòì‰∫éÂú®ÊµãËØïÁéØÂ¢É‰∏≠ÈõÜÊàê„ÄÇ
5.  **ÂçèËÆÆË¶ÜÁõñ (Protocol Coverage)**ÔºöÂêåÊó∂ÊîØÊåÅ `STDIO` Âíå `HTTP/SSE` ‰∏§Áßç MCP ‰º†ËæìÂçèËÆÆÔºåÂèØ‰ª•ÊµãËØïÂÆ¢Êà∑Á´ØÂú®‰∏çÂêåËøûÊé•ÊñπÂºè‰∏ãÁöÑË°®Áé∞„ÄÇ

## ÂÆâË£Ö

Â∞ÜÊ≠§ÂåÖ‰Ωú‰∏∫**ÂºÄÂèë‰æùËµñ**Ê∑ªÂä†Âà∞‰Ω†ÁöÑÈ°πÁõÆ‰∏≠Ôºö

```bash
# ‰ΩøÁî® pnpm
pnpm add --save-dev mcp-hello-world

# ÊàñËÄÖ‰ΩøÁî® bun
bun add --dev mcp-hello-world
```

## ÊâãÂä®ËøêË°å (Áî®‰∫éË∞ÉËØïÊµãËØï)

ÊúâÊó∂‰Ω†ÂèØËÉΩÊÉ≥ÊâãÂä®ËøêË°åÊúçÂä°Êù•Ë∞ÉËØï‰Ω†ÁöÑÊµãËØïÊàñÂÆ¢Êà∑Á´ØË°å‰∏∫„ÄÇ

### STDIO Ê®°Âºè

ËøôÊòØÊúÄÁÆÄÂçïÁöÑËøêË°åÊñπÂºèÔºåÂ∞§ÂÖ∂ÊòØÂú®Êú¨Âú∞ÂºÄÂèëÂíåË∞ÉËØïÊó∂„ÄÇ

```bash
# Á°Æ‰øùÂ∑≤ÂÆâË£Ö
# ‰ΩøÁî® npx (ÈÄöÁî®)
npx mcp-hello-world

# ÊàñËÄÖ‰ΩøÁî® pnpm dlx
pnpm dlx mcp-hello-world

# ÊàñËÄÖ‰ΩøÁî® bunx
bunx mcp-hello-world
```

ÊúçÂä°Â∞ÜÁõëÂê¨Ê†áÂáÜËæìÂÖ•ÔºåÂπ∂Â∞Ü MCP ÂìçÂ∫îËæìÂá∫Âà∞Ê†áÂáÜËæìÂá∫„ÄÇ‰Ω†ÂèØ‰ª•‰ΩøÁî® [MCP Inspector](https://github.com/lobehub/mcp-inspector) Á≠âÂ∑•ÂÖ∑ËøûÊé•Âà∞ËØ•ËøõÁ®ã„ÄÇ

### HTTP/SSE Ê®°Âºè

Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÈÄöËøáÁΩëÁªúÊé•Âè£ËøõË°åË∞ÉËØïÔºåÊàñËÄÖÊµãËØïÂü∫‰∫é HTTP ÁöÑ MCP ÂÆ¢Êà∑Á´Ø„ÄÇ

```bash
# 1. ÂÖãÈöÜ‰ªìÂ∫ì (Â¶ÇÊûúÂ∞öÊú™Âú®È°πÁõÆ‰∏≠ÂÆâË£Ö)
# git clone https://github.com/lobehub/mcp-hello-world.git
# cd mcp-hello-world
# pnpm install / bun install

# 2. ÊûÑÂª∫È°πÁõÆ
# ‰ΩøÁî® pnpm
pnpm build
# ÊàñËÄÖ‰ΩøÁî® bun
bun run build

# 3. ÂêØÂä® HTTP ÊúçÂä°
# ‰ΩøÁî® pnpm
pnpm start:http
# ÊàñËÄÖ‰ΩøÁî® bun
bun run start:http
```

ÊúçÂä°Â∞ÜÂú® `http://localhost:3000` ÂêØÂä®ÔºåÂπ∂Êèê‰æõÔºö
-   SSE Á´ØÁÇπ: `/sse`
-   Ê∂àÊÅØÁ´ØÁÇπ: `/messages`

## Âú®ÊµãËØï‰∏≠‰ΩøÁî®

‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑÊµãËØïÊ°ÜÊû∂ÔºàÂ¶Ç Jest, Vitest, Mocha Á≠âÔºâ‰∏≠ÔºåÈÄöËøáÁºñÁ®ãÊñπÂºèÂêØÂä®ÂíåÂÅúÊ≠¢ `mcp-hello-world` ÊúçÂä°Ôºå‰ª•‰æøÂú®Ëá™Âä®ÂåñÊµãËØï‰∏≠‰ΩøÁî®„ÄÇ

### Á§∫‰æãÔºö‰ΩøÁî® STDIO Ê®°ÂºèËøõË°åÊµãËØï (Node.js)

```typescript
// test/my-mcp-client.test.ts (Á§∫‰æã‰ΩøÁî® Jest)
import { spawn } from 'child_process';
import { MCPClient } from '../src/my-mcp-client'; // ÂÅáËÆæËøôÊòØ‰Ω†Ë¶ÅÊµãËØïÁöÑÂÆ¢Êà∑Á´Ø

describe('My MCP Client (STDIO)', () => {
  let mcpServerProcess;
  let client: MCPClient;

  beforeAll(() => {
    // Âú®ÊµãËØïÂºÄÂßãÂâçÂêØÂä® mcp-hello-world ËøõÁ®ã
    // ‰ΩøÁî® npx (Êàñ pnpm dlx / bunx) Á°Æ‰øùËÉΩÊâæÂà∞Âπ∂ÊâßË°åÂëΩ‰ª§
    mcpServerProcess = spawn('npx', ['mcp-hello-world']);

    // ÂÆû‰æãÂåñ‰Ω†ÁöÑÂÆ¢Êà∑Á´ØÔºåÂπ∂ËøûÊé•Âà∞Â≠êËøõÁ®ãÁöÑ stdio
    client = new MCPClient(mcpServerProcess.stdin, mcpServerProcess.stdout);
  });

  afterAll(() => {
    // ÊµãËØïÁªìÊùüÂêéÂÖ≥Èó≠ mcp-hello-world ËøõÁ®ã
    mcpServerProcess.kill();
  });

  it('should receive echo response', async () => {
    const request = {
      jsonrpc: '2.0',
      id: 1,
      method: 'tools/invoke',
      params: { name: 'echo', parameters: { message: 'test message' } },
    };

    const response = await client.sendRequest(request); // ÂÅáËÆæ‰Ω†ÁöÑÂÆ¢Êà∑Á´ØÊúâÊ≠§ÊñπÊ≥ï

    expect(response).toEqual({
      jsonrpc: '2.0',
      id: 1,
      result: { content: [{ type: 'text', text: 'Hello test message' }] },
    });
  });

  it('should get greeting resource', async () => {
    const request = {
      jsonrpc: '2.0',
      id: 2,
      method: 'resources/get',
      params: { uri: 'greeting://Alice' },
    };
    const response = await client.sendRequest(request);
    expect(response).toEqual({
      jsonrpc: '2.0',
      id: 2,
      result: { data: 'Hello Alice!' }, // Ê†πÊçÆÂÆûÈôÖÂÆûÁé∞Á°ÆËÆ§ËøîÂõûÊ†ºÂºè
    });
  });

  // ... ÂÖ∂‰ªñÊµãËØïÁî®‰æã
});
```

### Á§∫‰æãÔºö‰ΩøÁî® HTTP/SSE Ê®°ÂºèËøõË°åÊµãËØï

ÂØπ‰∫é HTTP/SSEÔºå‰Ω†ÂèØËÉΩÈúÄË¶ÅÔºö
1.  Âú® `beforeAll` ‰∏≠‰ΩøÁî® `exec` Êàñ `spawn` ÂêØÂä® `pnpm start:http` Êàñ `bun run start:http`„ÄÇ
2.  ‰ΩøÁî® HTTP ÂÆ¢Êà∑Á´Ø (Â¶Ç `axios`, `node-fetch`, ÊàñÊµãËØïÊ°ÜÊû∂ÂÜÖÁΩÆÁöÑ) ËøûÊé•Âà∞ `http://localhost:3000/sse` Âíå `/messages` Á´ØÁÇπËøõË°åÊµãËØï„ÄÇ
3.  Âú® `afterAll` ‰∏≠Á°Æ‰øùÂÖ≥Èó≠ÂêØÂä®ÁöÑÊúçÂä°Âô®ËøõÁ®ã„ÄÇ

## Êèê‰æõÁöÑ MCP ËÉΩÂäõ (Áî®‰∫éÊµãËØïÊñ≠Ë®Ä)

`mcp-hello-world` Êèê‰æõ‰ª•‰∏ãÂõ∫ÂÆöÁöÑËÉΩÂäõÔºå‰æõ‰Ω†Âú®ÊµãËØï‰∏≠ËøõË°å‰∫§‰∫íÂíåÊñ≠Ë®ÄÔºö

### ËµÑÊ∫ê (Resources)

-   **`hello://world`**
    -   ÊèèËø∞: ‰∏Ä‰∏™ÈùôÊÄÅÁöÑ Hello World ËµÑÊ∫ê„ÄÇ
    -   ÊñπÊ≥ï: `resources/get`
    -   ÂèÇÊï∞: Êó†
    -   ËøîÂõû: `{ data: 'Hello World!' }`
-   **`greeting://{name}`**
    -   ÊèèËø∞: ‰∏Ä‰∏™Âä®ÊÄÅÁöÑÈóÆÂÄôËµÑÊ∫ê„ÄÇ
    -   ÊñπÊ≥ï: `resources/get`
    -   ÂèÇÊï∞: URI ‰∏≠ÂåÖÂê´ `name`Ôºå‰æãÂ¶Ç `greeting://Bob`„ÄÇ
    -   ËøîÂõû: `{ data: 'Hello {name}!' }` (‰æãÂ¶Ç: `{ data: 'Hello Bob!' }`)

### Â∑•ÂÖ∑ (Tools)

-   **`echo`**
    -   ÊèèËø∞: ÂõûÊòæËæìÂÖ•ÁöÑÊ∂àÊÅØÔºåÂπ∂Ê∑ªÂä† "Hello " ÂâçÁºÄ„ÄÇ
    -   ÊñπÊ≥ï: `tools/invoke`
    -   ÂèÇÊï∞: `{ name: 'echo', parameters: { message: string } }`
    -   ËøîÂõû: `{ content: [{ type: 'text', text: 'Hello {message}' }] }` (‰æãÂ¶Ç: `{ content: [{ type: 'text', text: 'Hello test' }] }`)
-   **`debug`**
    -   ÊèèËø∞: ÂàóÂá∫ÊúçÂä°Á´ØÊâÄÊúâÂèØÁî®ÁöÑ MCP ÊñπÊ≥ïÂÆö‰πâ„ÄÇ
    -   ÊñπÊ≥ï: `tools/invoke`
    -   ÂèÇÊï∞: `{ name: 'debug', parameters: {} }`
    -   ËøîÂõû: ÂåÖÂê´ÊâÄÊúâÂ∑≤Ê≥®ÂÜåÁöÑ resources, tools, prompts ÂÆö‰πâÁöÑ JSON ÁªìÊûÑ„ÄÇ

### ÊèêÁ§∫ËØç (Prompts)

-   **`helpful-assistant`**
    -   ÊèèËø∞: ‰∏Ä‰∏™Âü∫Á°ÄÁöÑÂä©ÊâãÊèêÁ§∫ËØçÂÆö‰πâ„ÄÇ
    -   ÊñπÊ≥ï: `prompts/get`
    -   ÂèÇÊï∞: Êó†
    -   ËøîÂõû: ‰∏Ä‰∏™ÂåÖÂê´È¢ÑÂÆö‰πâ `system` Âíå `user` ËßíËâ≤ÁöÑÊèêÁ§∫ËØçÁªìÊûÑ JSON„ÄÇ

## ËÆ∏ÂèØËØÅ

MIT 


================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./build",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}



================================================
FILE: .bunfig.toml
================================================
[install.lockfile]

save = false



================================================
FILE: .changelogrc.cjs
================================================
module.exports = require('@lobehub/lint').changelog;



================================================
FILE: .commitlintrc.js
================================================
module.exports = require('@lobehub/lint').commitlint;



================================================
FILE: .editorconfig
================================================
# http://editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false

[Makefile]
indent_style = tab



================================================
FILE: .eslintignore
================================================
# Eslintignore for LobeHub
################################################################

# dependencies
node_modules

# ci
coverage
.coverage

# test
jest*
_test_
__test__

# umi
.umi
.umi-production
.umi-test
.dumi/tmp*
!.dumirc.ts

# production
dist
es
lib
logs

# misc
# add other ignore file below



================================================
FILE: .eslintrc.js
================================================
const config = require('@lobehub/lint').eslint;

module.exports = {
  ...config,
  globals: {
    HeadersInit: false,
  },
  rules: {
    ...config.rules,
    'unicorn/no-useless-undefined': 0,
    'unicorn/prefer-string-replace-all': 0,
    'unicorn/switch-case-braces': 0,
  },
};



================================================
FILE: .npmrc
================================================
lockfile=false
resolution-mode=highest
public-hoist-pattern[]=*@umijs/lint*
public-hoist-pattern[]=*changelog*
public-hoist-pattern[]=*commitlint*
public-hoist-pattern[]=*eslint*
public-hoist-pattern[]=*postcss*
public-hoist-pattern[]=*prettier*
public-hoist-pattern[]=*remark*
public-hoist-pattern[]=*semantic-release*
public-hoist-pattern[]=*stylelint*



================================================
FILE: .prettierignore
================================================
# Prettierignore for LobeHub
################################################################

# general
.DS_Store
.editorconfig
.idea
.vscode
.history
.temp
.env.local
.husky
.npmrc
.gitkeep
venv
temp
tmp
LICENSE

# dependencies
node_modules
*.log
*.lock
package-lock.json

# ci
coverage
.coverage
.eslintcache
.stylelintcache
test-output
tests/__snapshots__
*.snap

# production
dist
es
lib
logs

# umi
.umi
.umi-production
.umi-test
.dumi/tmp*

# ignore files
.*ignore

# docker
docker
Dockerfile*

# image
*.webp
*.gif
*.png
*.jpg

# misc
# add other ignore file below



================================================
FILE: .prettierrc.js
================================================
const {prettier}= require('@lobehub/lint');

export default prettier;



================================================
FILE: .releaserc.cjs
================================================
module.exports = require('@lobehub/lint').semanticRelease;



================================================
FILE: .stylelintrc.js
================================================
const config = require('@lobehub/lint').stylelint;

module.exports = {
  ...config,
  rules: {
    'custom-property-pattern': null,
    'selector-pseudo-element-no-unknown': null,
  },
};



================================================
FILE: src/http.ts
================================================
#!/usr/bin/env node

import express from "express";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import { createServer } from "./server.js";

async function main() {
  // Create the server
  const server = createServer();

  // Create Express app
  const app = express();
  const port = process.env.PORT || 3000;

  // Server-side connections
  const connections = new Map();

  // Handle SSE connections
  app.get("/sse", async (req, res) => {
    // Generate a unique connection ID (UUID format)
    const sessionId = req.query.sessionId as string ||
                     `${Math.random().toString(36).substring(2, 15)}-${Date.now().toString(36)}`;

    try {
      // Create a new SSE transport
      const transport = new SSEServerTransport(`/messages?sessionId=${sessionId}`, res);
      connections.set(sessionId, transport);

      // Connect the server to this transport
      await server.connect(transport);
    } catch (error: any) {
      console.error('Error establishing SSE connection:', error);
      // If headers already sent due to transport.start(), don't try to set them again
      if (!res.headersSent) {
        res.status(500).end(`Server error: ${error.message || 'Unknown error'}`);
      }
    }

    // Handle client disconnect
    req.on("close", () => {
      if (connections.has(sessionId)) {
        connections.delete(sessionId);
        console.error(`Client ${sessionId} disconnected`);
      }
    });
  });

  // Handle messages from client
  app.post("/messages", express.json(), async (req, res) => {
    try {
      // Extract sessionId from query parameters
      const sessionId = req.query.sessionId as string;

      console.log(`Received message for session ${sessionId}, body:`, req.body);

      if (!sessionId || !connections.has(sessionId)) {
        // If no sessionId or connection not found, try the first connection
        if (connections.size === 0) {
          return res.status(400).json({ error: "No active connections" });
        }
        console.log('Using first available connection');
        const transport = connections.values().next().value;
        await transport.handlePostMessage(req, res, req.body);
      } else {
        // Use the specific connection for this session
        console.log(`Using connection for session ${sessionId}`);
        const transport = connections.get(sessionId);
        await transport.handlePostMessage(req, res, req.body);
      }
    } catch (error: any) {
      console.error('Error handling message:', error);
      if (!res.headersSent) {
        res.status(500).json({ error: `Internal server error: ${error.message || 'Unknown error'}` });
      }
    }
  });

  // Debug: log available methods
  console.error('Available methods in the MCP server:');
  console.error('Server object keys:', Object.keys(server));
  console.error('Server constructor:', server.constructor.name);

  // Start the server
  app.listen(port, () => {
    console.error(`Hello World MCP Server running on http://localhost:${port}`);
    console.error(`- Connect to /sse for server-sent events`);
    console.error(`- Send messages to /messages endpoint`);
  });
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});



================================================
FILE: src/index.ts
================================================
export { createServer } from './server.js';


================================================
FILE: src/server.ts
================================================
import {
  McpServer,
  ResourceTemplate,
} from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

/**
 * Creates and configures a Hello World MCP server
 * with one resource, one prompt, and one tool
 */
export function createServer() {
  // Create an MCP server
  const server = new McpServer({
    name: "hello-world",
    version: "1.0.0",
    // Debug handler for incoming method calls
    debug: true,
  });

  // Add a static resource
  server.resource("hello", "hello://world", async (uri) => ({
    contents: [
      {
        uri: uri.href,
        text: "Hello, World from the resource!",
      },
    ],
  }));

  // Add a dynamic resource with parameters
  server.resource(
    "greeting",
    new ResourceTemplate("greeting://{name}", { list: undefined }),
    async (uri, { name }) => ({
      contents: [
        {
          uri: uri.href,
          text: `Hello, ${name} from the resource!`,
        },
      ],
    })
  );

  // Add a prompt
  server.prompt(
    "helpful-assistant",
    "A helpful assistant prompt", // Add description as second parameter
    () => ({
      messages: [
        {
          role: "assistant",
          content: {
            type: "text",
            text: "You are a helpful assistant.",
          },
        },
      ],
    })
  );

  // Add an echo tool
  server.tool(
    "echo",
    "Echoes back a message with 'Hello' prefix",
    { message: z.string().describe("The message to echo") },
    async ({ message }) => ({
      content: [
        {
          type: "text",
          text: `You said: ${message}`,
        },
      ],
    })
  );

  // Add a debug tool to list available tools
  server.tool(
    "debug",
    "Lists all available tools and methods",
    {},
    async () => ({
      content: [
        {
          type: "text",
          text: JSON.stringify({
            tools: Object.keys(server),
            methods: ["tools/invoke", "mcp/capabilities", "debug/info"]
          }, null, 2),
        },
      ],
    })
  );


  server.tool(
    'add',
    'Adds two numbers',
    {
      a: z.number().describe('The first number'),
      b: z.number().describe('The second number'),
    },
    async ({ a, b }) => {
      console.log(`[Mock SDK Server] Executing add tool with a=${a}, b=${b}`);
      const sum = a + b;
      return {
        content: [
          {
            text: `The sum is: ${sum}`,
            type: 'text',
          },
        ],
      };
    },
  );

  return server;
}



================================================
FILE: src/stdio.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./server.js";

async function main() {
  // Create the server
  const server = createServer();
  
  // Create stdio transport
  const transport = new StdioServerTransport();
  
  // Connect the server to the transport
  await server.connect(transport);
  
  console.error("Hello World MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});


================================================
FILE: .github/workflows/release.yml
================================================
name: Release CI
on:
  push:
    branches:
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Install bun
        uses: oven-sh/setup-bun@v2

      - name: Install deps
        run: bun i
      - name: Build
        run: bun run build

      - name: Release
        run: bun run release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


