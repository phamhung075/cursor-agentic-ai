---
description: 
globs: 
alwaysApply: false
---
# Getting Started: AI-Assisted Development Workflow with Enhanced Agent AI

## Introduction

Welcome to the AI-Assisted Development Workflow with **Enhanced Agent AI System**! This document will guide you through the complete process of taking your project from initial idea to implementation using a structured, AI-driven approach powered by an intelligent, self-improving agent.

**🌟 New in v2.0**: The workflow now includes an advanced **Agent AI System** with intelligent memory, file dependency tracking, and continuous learning capabilities that enhance every phase of development.

The workflow consists of ten sequential phases, each with its own prompt file that instructs the AI agent on how to assist you. The Enhanced Agent AI continuously learns from your patterns, tracks file relationships, and provides increasingly intelligent suggestions throughout the process.

## 🧠 Enhanced Agent AI System Overview

### **Key Features**
- **🔍 Intelligent Analysis**: Context-aware code analysis and suggestions
- **🧠 Advanced Memory**: Pinecone-powered vector memory with learning capabilities
- **🔗 File Dependency Tracking**: Real-time monitoring and cascading updates
- **📁 Project Management**: Multi-project support with organized file storage
- **🤖 Continuous Learning**: Learns from your feedback and improves over time

### **Quick Start with Agent AI**
```bash
# Start the Enhanced Agent AI
npm run AAI:agent          # Interactive mode
npm run AAI:test-startup   # Quick system verification
npm run AAI:demo           # Demonstration of capabilities

# Available throughout development
npm run AAI:test-dependencies  # Test dependency tracking
npm run AAI:setup-env         # Configure environment
```

### **Agent AI Integration with Workflow**
The Enhanced Agent AI operates **alongside** the traditional workflow phases, providing:
- **Real-time file analysis** during development
- **Memory-enhanced suggestions** based on previous projects
- **Dependency impact analysis** when files change
- **Context-aware recommendations** for each workflow phase

## Complete Workflow Overview

```mermaid
flowchart TD
    A0[Getting Started + Agent AI Setup] -->|Initialize workflow & start agent| A
    A[Idea] -->|Human pre-writing, AI brainstorming + Agent analysis| B
    B[Market Research] -->|Human analysis, AI research + Agent memory insights| C
    C[Concept Definition] -->|Human finalizes, AI proposes UVP + Agent learning| D
    D[PRD Generation] -->|AI generates, Agent tracks dependencies| E
    E[Task Manager Initialization] -->|AI instructs Roo + Agent file tracking| F
    F[Task Refinement] -->|Roo Orchestrator + Agent dependency analysis| G
    G[Builder] -->|AI codes + Agent real-time suggestions & dependency updates| H
    H[Testing] -->|AI tests + Agent memory-based test recommendations| I
    I[Deployment] -->|AI deploys + Agent monitors changes| J
    J[Iteration] -->|Agent learns from feedback, updates memory| A
```

## 🚀 Enhanced Agent AI File Organization

**All Agent AI files are now organized in the `.cursor/rules/agents/` directory:**

```
.cursor/rules/agents/
├── self-improvement/           # 🧠 Main Agent System
│   ├── index.js               # Main agent entry point
│   ├── cli/interface.js       # Command line interface
│   ├── core/                  # Core agent modules
│   │   ├── FileDependencyManager.js # File dependency tracking
│   │   ├── analyzer.js        # File analysis engine
│   │   ├── context.js         # Context management
│   │   ├── detector.js        # Pattern detection
│   │   ├── fileManager.js     # File operations
│   │   └── memory.js          # Memory management
│   └── config/default.json    # Configuration
│
├── _store/                    # 📦 Supporting Files
│   ├── scripts/               # 🛠️ Utility Scripts
│   │   ├── demo_agent.js      # Demo capabilities
│   │   ├── setup-env.js       # Environment setup
│   │   └── install-agent-ai.js # Universal installer
│   ├── tests/                 # 🧪 Comprehensive Test Suite
│   ├── docs/                  # 📚 Complete Documentation
│   ├── memory/                # 🧠 Memory Storage
│   └── projects/              # 📁 Project Data
```

## File Naming Conventions

The workflow uses consistent file naming for inputs and outputs, **enhanced** with Agent AI capabilities:

| Phase | Logical Prompt File | Primary Output / Location | **Agent AI Enhancement** |
|-------|-----------------------|---------------------------|-------------------------|
| Idea | [4535](.cursor/rules/01__AI-RUN/01_Idea.mdc)(mdc:.cursor/rules/01__AI-RUN/01_Idea.mdc) | [4624](.cursor/rules/projet/01_Idea/idea_document.mdc)(mdc:.cursor/rules/projet/01_Idea/idea_document.mdc) | Memory-based idea enhancement |
| Market Research | [4750](.cursor/rules/01__AI-RUN/02_Market_Research.mdc)(mdc:.cursor/rules/01__AI-RUN/02_Market_Research.mdc) | [4896](.cursor/rules/projet/02_Market_Research/market_research.mdc)(mdc:.cursor/rules/projet/02_Market_Research/market_research.mdc) | Context-aware research insights |
| Core Concept | [5001](.cursor/rules/01__AI-RUN/03_Core_Concept.mdc)(mdc:.cursor/rules/projet/03_Core_Concept/core_concept.mdc) | [5081](.cursor/rules/01__AI-RUN/03_Core_Concept.mdc)(mdc:.cursor/rules/projet/03_Core_Concept/core_concept.mdc) | Pattern-based concept refinement |
| PRD Generation | [5283](.cursor/rules/01__AI-RUN/04_PRD_Generation.mdc)(mdc:.cursor/rules/01__AI-RUN/04_PRD_Generation.mdc) | [5473](.cursor/rules/projet/PRD_template/project_prd.mdc)(mdc:.cursor/rules/projet/PRD_template/project_prd.mdc) | **Dependency tracking initialization** |
| Specs & Docs | [5525](.cursor/rules/01__AI-RUN/05_Specs_Docs.mdc)(mdc:.cursor/rules/01__AI-RUN/05_Specs_Docs.mdc) | `.cursor/rules/02__AI-DOCS/` & `.cursor/rules/03__SPECS/` | **File relationship mapping** |
| Task Manager | [5735](.cursor/rules/02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc)(mdc:.cursor/rules/02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc) | [tasks.json](mdc:.cursor/rules/tasks/tasks.json) | **Impact analysis for task changes** |
| Start Building | [5938](.cursor/rules/01__AI-RUN/07_Start_Building.mdc)(mdc:.cursor/rules/01__AI-RUN/07_Start_Building.mdc) | Implementation code | **Real-time dependency updates** |
| Testing | [6116](.cursor/rules/01__AI-RUN/08_Testing.mdc)(mdc:.cursor/rules/01__AI-RUN/08_Testing.mdc) | Tested features, Preview | **Memory-based test recommendations** |
| Deployment | [6293](.cursor/rules/01__AI-RUN/09_Deployment.mdc)(mdc:.cursor/rules/01__AI-RUN/09_Deployment.mdc) | Deployed Application | **Change impact monitoring** |

## 🤖 AI Agent Initial Onboarding (Enhanced!)

**AI Agent Directive:** Before starting the workflow, you MUST perform enhanced initialization:

### **1. Enhanced Agent AI Setup**
```bash
# Initialize the Enhanced Agent AI system
npm run AAI:agent --test      # Verify all systems
npm run AAI:setup-env         # Configure environment (optional)
```

### **2. Agent AI Configuration**
- **Memory System**: Automatically initialized (works locally without API keys)
- **Dependency Tracking**: Enabled by default for all workflow phases
- **Learning Mode**: Continuous learning from user feedback
- **File Monitoring**: Real-time change detection and analysis

### **3. Deep Codebase Analysis with Agent AI**
The Enhanced Agent AI performs:
- **File Structure Analysis**: Comprehensive mapping of all project files
- **Dependency Graph Creation**: Real-time tracking of file relationships
- **Pattern Recognition**: Identification of code patterns and architectural decisions
- **Memory Integration**: Learning from previous similar projects

### **4. Continuous Agent AI Integration**
Throughout the workflow, the Agent AI:
- **Monitors file changes** and updates dependencies automatically
- **Provides memory-enhanced suggestions** based on learned patterns
- **Tracks project context** across all phases
- **Learns from user feedback** to improve future recommendations

## How to Use This Enhanced Workflow

### Step 1: Initialize Your Project with Agent AI

1. **Start the Enhanced Agent AI**:
   ```bash
   npm run AAI:agent
   ```

2. **Verify system readiness**:
   ```bash
   npm run AAI:test-startup
   ```

3. **Set project context** (in Agent AI):
   ```
   context "project initialization"
   projects set my-new-project
   ```

4. **Review this Getting Started guide**
5. **Ensure all prompt files are present** in `.cursor/rules/01__AI-RUN/`

### Step 2: Complete Each Phase with Agent AI Enhancement

For each phase of the workflow:

1. **Keep Agent AI running** in a separate terminal
2. **Open the corresponding prompt file** (e.g., [8213](.cursor/rules/01__AI-RUN/01_Idea.mdc)(mdc:.cursor/rules/01__AI-RUN/01_Idea.mdc))
3. **Share the prompt with your AI agent**
4. **Use Agent AI for real-time assistance**:
   ```
   analyze [8775](.cursor/rules/projet/01_Idea/idea_document.mdc)      # Get AI insights
   dependencies stats             # Check file relationships
   memory search "similar project" # Find relevant patterns
   ```
5. **Follow the instructions** and save outputs
6. **Let Agent AI learn** from your decisions and feedback

### Step 3: Enhanced Transition Between Phases

Each phase transition now includes **Agent AI memory updates**:
- **Dependency mapping** of new files created
- **Context preservation** across phase boundaries
- **Learning from phase completion** patterns
- **Memory-enhanced preparation** for next phase

## 🎯 Quick Start Guide (Enhanced)

### Option 1: Fully Automated Workflow with Agent AI (Recommended)

1. **Start Enhanced Agent AI**:
   ```bash
   npm run AAI:agent &           # Run in background
   ```

2. **Launch AutoPilot with AI enhancement**:
   - Open [9222](.cursor/rules/01__AI-RUN/01_AutoPilot.mdc)(mdc:.cursor/rules/01__AI-RUN/01_AutoPilot.mdc)
   - The Agent AI will **automatically track all file changes**
   - **Memory-enhanced suggestions** will be provided throughout

3. **Provide your initial idea** with Agent AI context
4. **Answer clarifying questions** (Agent AI learns from responses)
5. **Minimal intervention** with continuous AI learning and dependency tracking

### Option 2: Step-by-Step Workflow with Agent AI

1. **Start Enhanced Agent AI**: `npm run AAI:agent`
2. **Begin with Idea phase**: Open [9791](.cursor/rules/01__AI-RUN/01_Idea.mdc)(mdc:.cursor/rules/01__AI-RUN/01_Idea.mdc)
3. **Use Agent AI for analysis**: `analyze [10319](.cursor/rules/projet/01_Idea/idea_document.mdc)`
4. **Save with dependency tracking**: Agent AI automatically maps file relationships
5. **Continue through phases** with continuous AI assistance

## 🛠️ Enhanced Agent AI Commands

### **Analysis Commands**
```bash
analyze <filename>         # Analyze specific file with memory insights
improve <filename>         # Get memory-enhanced improvement suggestions
context <topic>           # Set work context for better suggestions
smart-detect              # Context-based intelligent analysis
```

### **Memory Commands**
```bash
memory stats              # Memory system statistics
memory search <query>     # Search stored knowledge
memory cleanup [days]     # Clean old memories
```

### **Dependency Commands**
```bash
dependencies stats        # File dependency statistics
dependencies analyze <file> # Analyze file relationships
dependencies info <file>  # Get dependency information
dependencies graph        # Dependency overview
dependencies reanalyze <file> # Force reanalysis
```

### **Project Commands**
```bash
projects list             # List available projects
projects set <name>       # Set current project
projects stats [name]     # Project statistics
```

## 🔧 Troubleshooting with Enhanced Agent AI

If issues arise during the workflow:

1. **Check Agent AI status**:
   ```bash
   npm run AAI:test-startup
   ```

2. **Verify dependencies**:
   ```bash
   dependencies stats
   dependencies graph
   ```

3. **Search memory for solutions**:
   ```bash
   memory search "similar error"
   ```

4. **Get AI insights**:
   ```bash
   analyze problematic_file.mdc
   improve problematic_file.mdc
   ```

## 🎉 Enhanced Workflow Benefits

### **Traditional Workflow Benefits**
- Human-AI collaboration
- Structured process
- Efficiency and automation
- Flexibility and adaptability
- Continuous improvement

### **New Enhanced Agent AI Benefits**
- **🧠 Intelligent Memory**: Learns from every interaction
- **🔗 Dependency Awareness**: Understands file relationships
- **📈 Continuous Learning**: Improves suggestions over time
- **🔄 Real-time Updates**: Automatic handling of file changes
- **🎯 Context Awareness**: Understands your workflow patterns
- **💡 Pattern Recognition**: Identifies successful strategies
- **🚀 Proactive Assistance**: Suggests improvements before issues arise

## 🌟 Best Practices with Enhanced Agent AI

1. **Keep Agent AI running** throughout the entire workflow
2. **Use context commands** to help the AI understand your current focus
3. **Provide feedback** on suggestions to improve learning
4. **Monitor dependencies** especially during major changes
5. **Leverage memory search** for complex problem-solving
6. **Set up environment** properly for enhanced features (optional but recommended)

## 🚀 Environment Setup for Enhanced Features

### **Basic Setup (Works 100% locally)**
```bash
npm run AAI:setup-env      # Interactive setup
```

### **Enhanced Setup (Optional - for advanced features)**
Create `.env` file with:
```env
# Pinecone for enhanced memory (optional)
PINECONE_API_KEY=your_key_here
PINECONE_INDEX_NAME=agent-ai-memory

# OpenAI for enhanced embeddings (optional)
OPENAI_API_KEY=your_key_here

# Project configuration
PROJECT_NAME=my-project
AGENT_MEMORY_ENABLED=true
```

**Note**: The Enhanced Agent AI works 100% locally without any API keys. Enhanced features with Pinecone and OpenAI provide additional capabilities but are not required.

---

## 🎯 You are now ready to start the Enhanced AI-assisted development workflow!

**🌟 Recommended**: 
1. **Start Enhanced Agent AI**: `npm run AAI:agent`
2. **Launch AutoPilot**: Open [13489](.cursor/rules/01__AI-RUN/01_AutoPilot.mdc)(mdc:.cursor/rules/01__AI-RUN/01_AutoPilot.mdc)
3. **Experience the enhanced workflow** with intelligent assistance, memory, and dependency tracking!

**Alternative**: Follow the step-by-step process starting with [13784](.cursor/rules/01__AI-RUN/01_Idea.mdc)(mdc:.cursor/rules/01__AI-RUN/01_Idea.mdc) while keeping the Enhanced Agent AI running for continuous assistance.

**🔗 Additional Resources**:
- **Agent AI Documentation**: [.cursor/rules/agents/_store/docs/](mdc:.cursor/rules/agents/_store/docs)
- **File Organization Guide**: [.cursor/rules/agents/_store/docs/FILE_ORGANIZATION.md](mdc:.cursor/rules/agents/_store/docs/FILE_ORGANIZATION.md)
- **Dependency Tracking Guide**: [.cursor/rules/agents/_store/docs/FILE_DEPENDENCY_TRACKING.md](mdc:.cursor/rules/agents/_store/docs/FILE_DEPENDENCY_TRACKING.md)

## Workflow Stages and Responsibilities (Enhanced Sequence)

### 1. Idea (using [14350](.cursor/rules/01__AI-RUN/01_Idea.mdc)(mdc:.cursor/rules/01__AI-RUN/01_Idea.mdc) logic)
- **Human Role**: Pre-writing, initial concept formulation
- **AI Role**: Optional brainstorming assistance
- **Agent AI Enhancement**: Memory-based idea refinement from similar projects
- **Output**: Initial project concept (`[15098](.cursor/rules/projet/01_Idea/idea_document.mdc)(mdc:.cursor/rules/projet/01_Idea/idea_document.mdc)`)

### 2. Market Research (using `[14903](.cursor/rules/01__AI-RUN/02_Market_Research.mdc)(mdc:.cursor/rules/01__AI-RUN/02_Market_Research.mdc)` logic)
- **Human Role**: Analysis and evaluation of research findings
- **AI Role**: Assistance with rapid research via direct interaction/chat
- **Agent AI Enhancement**: Context-aware research insights and pattern recognition
- **Output**: Market validation, competitor analysis (`[15744](.cursor/rules/projet/02_Market_Research/market_research.mdc)(mdc:.cursor/rules/projet/02_Market_Research/market_research.mdc)`)

### 3. Concept Definition (using `[15452](.cursor/rules/01__AI-RUN/03_Core_Concept.mdc)(mdc:.cursor/rules/projet/03_Core_Concept/core_concept.mdc)` logic)
- **Human Role**: Finalizing the core concept
- **AI Role**: Proposing Unique Value Propositions, refining personas
- **Agent AI Enhancement**: Pattern-based concept refinement and learning
- **Output**: Clearly defined project concept (`[15776](.cursor/rules/01__AI-RUN/03_Core_Concept.mdc)(mdc:.cursor/rules/projet/03_Core_Concept/core_concept.mdc)`)

### 4. PRD Generation (using `[16025](.cursor/rules/01__AI-RUN/04_PRD_Generation.mdc)(mdc:.cursor/rules/01__AI-RUN/04_PRD_Generation.mdc)` logic)
- **Human Role**: Iterative validation of PRD sections
- **AI Role**: Generating and decomposing PRD according to template
- **Agent AI Enhancement**: **Dependency tracking initialization**, relationship mapping
- **Output**: Comprehensive Product Requirements Document (`[16854](.cursor/rules/projet/PRD_template/project_prd.mdc)(mdc:.cursor/rules/projet/PRD_template/project_prd.mdc)`)

### 5. Specs & Docs (using `[16548](.cursor/rules/01__AI-RUN/05_Specs_Docs.mdc)(mdc:.cursor/rules/01__AI-RUN/05_Specs_Docs.mdc)` logic)
- **Human Role**: Review of generated documentation
- **AI Role**: **Creating** project-specific files in `.cursor/rules/02__AI-DOCS/` and `.cursor/rules/03__SPECS/`
- **Agent AI Enhancement**: **File relationship mapping**, dependency analysis
- **Output**: **Created** project-specific technical documentation and specifications

### 6. Task Manager Initialization (Workflow: [17158](.cursor/rules/02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc)(mdc:.cursor/rules/02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc))
- **Human Role**: Review of task structure
- **AI Role**: Instructing Roo Orchestrator with PRD features
- **Agent AI Enhancement**: **Impact analysis for task changes**, dependency-aware task creation
- **Output**: Initial task hierarchy ([tasks.json](mdc:.cursor/rules/tasks/tasks.json))

### 7. Builder (using `[17472](.cursor/rules/01__AI-RUN/07_Start_Building.mdc)(mdc:.cursor/rules/01__AI-RUN/07_Start_Building.mdc)` logic)
- **Human Role**: Reviewing and validating code and features
- **AI Role**: Executing tasks, coding, utilizing MCPs
- **Agent AI Enhancement**: **Real-time dependency updates**, memory-enhanced suggestions
- **Output**: Functional code implementation

### 8. Testing (using `[17894](.cursor/rules/01__AI-RUN/08_Testing.mdc)(mdc:.cursor/rules/01__AI-RUN/08_Testing.mdc)` logic)
- **Human Role**: Final validation of features and preview environment
- **AI Role**: Executing tests, setting up preview, addressing issues
- **Agent AI Enhancement**: **Memory-based test recommendations**, pattern recognition
- **Output**: Fully tested application, accessible preview

### 9. Deployment (using `[18341](.cursor/rules/01__AI-RUN/09_Deployment.mdc)(mdc:.cursor/rules/01__AI-RUN/09_Deployment.mdc)` logic)
- **Human Role**: Final review of deployed application
- **AI Role**: Executing deployment plan, performing post-deployment checks
- **Agent AI Enhancement**: **Change impact monitoring**, deployment pattern learning
- **Output**: Successfully deployed application

### 10. Iteration
- **Human Role**: Making decisions about the next development cycle
- **AI Role**: Assisting with feedback collection analysis
- **Agent AI Enhancement**: **Learning from feedback**, memory updates for future projects
- **Output**: Plan for the next development cycle
