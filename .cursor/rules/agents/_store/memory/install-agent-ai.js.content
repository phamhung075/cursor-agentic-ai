#!/usr/bin/env node

/**
 * üöÄ Agent AI Installer - Install Agent AI system into any project
 * 
 * This script copies the complete Agent AI system to another project directory
 */

const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

class AgentAIInstaller {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    this.sourceRoot = path.resolve(__dirname, '../../..');
    this.requiredFiles = [
      // Core agent files
      '.cursor/rules/agents/self-improvement/',
      '.cursor/rules/agents/utils/',
      '.cursor/rules/agents/_store/scripts/setup-env.js',
      '.cursor/rules/agents/_store/scripts/demo_agent.js',
      '.cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js',
      '.cursor/rules/agents/_store/templates/environment-template.env',
      '.cursor/rules/agents/_store/tests/',
      '.cursor/rules/agents/README.md',
      
      // Documentation
      '.cursor/rules/agents/_store/docs/'
    ];
    
    this.requiredDependencies = {
      "chokidar": "^3.5.3",
      "marked": "^5.1.1", 
      "gray-matter": "^4.0.3",
      "chalk": "^4.1.2",
      "@pinecone-database/pinecone": "^2.0.1",
      "openai": "^4.28.0"
    };
    
    this..cursor/rules/agentscripts = {
      "AAI:start": "node .cursor/rules/agents/self-improvement/index.js",
      "AAI:agent": "node .cursor/rules/agents/self-improvement/index.js",
      "AAI:analyze": "node .cursor/rules/agents/self-improvement/index.js",
      "AAI:improve": "node .cursor/rules/agents/self-improvement/index.js",
      "AAI:legacy": "node .cursor/rules/agents/_store/scripts/self_improvement_agent_legacy.js",
      "AAI:demo": "node .cursor/rules/agents/_store/scripts/demo_agent.js",
      "AAI:install-deps": "npm install",
      "AAI:test": "echo \"Tests to be implemented\" && exit 0",
      "AAI:test-agent": "node .cursor/rules/agents/_store/tests/test_new_agent.js",
      "AAI:test-system": "node .cursor/rules/agents/_store/tests/test_new_system.js",
      "AAI:test-integration": "node .cursor/rules/agents/_store/tests/test_autopilot_integration.js",
      "AAI:test-dependencies": "node .cursor/rules/agents/_store/tests/test_dependency_tracking.js",
      "AAI:migrate-files": "node .cursor/rules/agents/utils/migrate_to_store.js",
      "AAI:setup-env": "node .cursor/rules/agents/_store/scripts/setup-env.js",
      "AAI:test-startup": "node .cursor/rules/agents/self-improvement/index.js --test"
    };
  }

  showHelp() {
    console.log('üöÄ Agent AI Installer');
    console.log('=' .repeat(50));
    console.log('Install the complete Agent AI system into any project\n');
    
    console.log('ü§ñ AI Assistant Compatibility:');
    console.log('  ‚úÖ Windsurf - Full compatibility');
    console.log('  ‚úÖ Cursor - Full compatibility');
    console.log('  ‚úÖ Cline - Full compatibility');
    console.log('  ‚úÖ Any AI Assistant - Universal support');
    console.log('  üí° Runs independently alongside your chosen AI tool!\n');
    
    console.log('üìñ Usage:');
    console.log('  node install-agent-ai.js [target-directory]');
    console.log('  node install-agent-ai.js --help\n');
    
    console.log('üìÅ Examples:');
    console.log('  node install-agent-ai.js                    # Install to current directory');
    console.log('  node install-agent-ai.js /path/to/project   # Install to specific directory');
    console.log('  node install-agent-ai.js --help             # Show this help\n');
    
    console.log('üéØ What gets installed:');
    console.log('  ‚úÖ Complete Agent AI system (.cursor/rules/agents/ directory)');
    console.log('  ‚úÖ All required dependencies in package.json');
    console.log('  ‚úÖ AAI scripts for npm run commands');
    console.log('  ‚úÖ Environment template (.env.example)');
    console.log('  ‚úÖ Proper .gitignore entries');
    console.log('  ‚úÖ Complete documentation');
    console.log('  ‚úÖ File dependency tracking system');
    console.log('  ‚úÖ Intelligent memory with Pinecone integration\n');
    
    console.log('üöÄ After installation:');
    console.log('  cd target-directory');
    console.log('  npm run AAI:agent          # Start the Agent AI');
    console.log('  npm run AAI:test-system    # Test installation');
    console.log('  npm run AAI:setup-env      # Setup environment\n');
    
    console.log('üí° The Agent AI works 100% locally without API keys!');
    console.log('ü§ñ Compatible with Windsurf, Cursor, Cline, and all AI assistants!');
    console.log('üìö Full documentation: .cursor/rules/agents/_store/docs/INSTALLATION_GUIDE.md');
  }

  async install() {
    // Check for help flag
    if (process.argv.includes('--help') || process.argv.includes('-h')) {
      this.showHelp();
      this.rl.close();
      return;
    }

    console.log('üöÄ Agent AI Installer');
    console.log('=' .repeat(50));
    
    try {
      // Get target directory
      const targetDir = await this.getTargetDirectory();
      
      // Validate target directory
      await this.validateTarget(targetDir);
      
      // Confirm installation
      const confirmed = await this.confirmInstallation(targetDir);
      if (!confirmed) {
        console.log('Installation cancelled.');
        return;
      }
      
      // Create backup if package.json exists
      await this.createBackup(targetDir);
      
      // Copy agent files
      console.log('\nüìÅ Copying Agent AI files...');
      await this.copyAgentFiles(targetDir);
      
      // Setup directory structure
      console.log('üìÇ Setting up directory structure...');
      await this.setupDirectories(targetDir);
      
      // Update package.json
      console.log('üìù Updating package.json...');
      await this.updatePackageJson(targetDir);
      
      // Create environment template
      console.log('üîß Setting up environment...');
      await this.setupEnvironment(targetDir);
      
      // Install dependencies
      console.log('üì¶ Installing dependencies...');
      await this.installDependencies(targetDir);
      
      // Create gitignore entries
      console.log('üõ°Ô∏è Setting up .gitignore...');
      await this.setupGitignore(targetDir);
      
      // Success message
      this.showSuccessMessage(targetDir);
      
    } catch (error) {
      console.error('‚ùå Installation failed:', error.message);
      console.error('Please check the error and try again.');
      console.log('\nüí° Run with --help for usage information');
    }
    
    this.rl.close();
  }

  async getTargetDirectory() {
    const argDir = process.argv[2];
    if (argDir && !argDir.startsWith('--')) {
      return path.resolve(argDir);
    }
    
    const defaultTarget = process.cwd();
    const target = await this.ask(`üìÅ Target project directory (${defaultTarget}): `) || defaultTarget;
    return path.resolve(target);
  }

  async validateTarget(targetDir) {
    try {
      const stats = await fs.stat(targetDir);
      if (!stats.isDirectory()) {
        throw new Error('Target must be a directory');
      }
    } catch (error) {
      if (error.code === 'ENOENT') {
        const create = await this.ask('Directory does not exist. Create it? (y/n): ');
        if (create.toLowerCase() === 'y') {
          await fs.mkdir(targetDir, { recursive: true });
        } else {
          throw new Error('Target directory does not exist');
        }
      } else {
        throw error;
      }
    }
  }

  async confirmInstallation(targetDir) {
    console.log(`\nüéØ Installing Agent AI to: ${targetDir}`);
    console.log('This will:');
    console.log('  ‚úÖ Copy all Agent AI files');
    console.log('  ‚úÖ Update package.json with AAI scripts');
    console.log('  ‚úÖ Install required dependencies');
    console.log('  ‚úÖ Setup environment configuration');
    console.log('  ‚úÖ Create proper .gitignore entries');
    
    const confirm = await this.ask('\nProceed with installation? (y/n): ');
    return confirm.toLowerCase() === 'y';
  }

  async createBackup(targetDir) {
    const packageJsonPath = path.join(targetDir, 'package.json');
    try {
      await fs.access(packageJsonPath);
      const backupPath = path.join(targetDir, 'package.json.backup');
      await fs.copyFile(packageJsonPath, backupPath);
      console.log('üíæ Created package.json backup');
    } catch {
      // No package.json exists, continue
    }
  }

  async copyAgentFiles(targetDir) {
    for (const filePattern of this.requiredFiles) {
      const sourcePath = path.join(this.sourceRoot, filePattern);
      const targetPath = path.join(targetDir, filePattern);
      
      try {
        await this.copyRecursive(sourcePath, targetPath);
        console.log(`  ‚úÖ ${filePattern}`);
      } catch (error) {
        console.warn(`  ‚ö†Ô∏è ${filePattern} - ${error.message}`);
      }
    }
  }

  async copyRecursive(src, dest) {
    const stats = await fs.stat(src);
    
    if (stats.isDirectory()) {
      await fs.mkdir(dest, { recursive: true });
      const files = await fs.readdir(src);
      
      for (const file of files) {
        const srcFile = path.join(src, file);
        const destFile = path.join(dest, file);
        await this.copyRecursive(srcFile, destFile);
      }
    } else {
      await fs.mkdir(path.dirname(dest), { recursive: true });
      await fs.copyFile(src, dest);
    }
  }

  async setupDirectories(targetDir) {
    const directories = [
      '.cursor/rules/agents/_store/projects',
      '.cursor/rules/agents/_store/memory/embeddings',
      '.cursor/rules/agents/_store/memory/contexts', 
      '.cursor/rules/agents/_store/memory/learning',
      '.cursor/rules/agents/_store/logs'
    ];
    
    for (const dir of directories) {
      await fs.mkdir(path.join(targetDir, dir), { recursive: true });
    }
  }

  async updatePackageJson(targetDir) {
    const packageJsonPath = path.join(targetDir, 'package.json');
    let packageJson = {};
    
    try {
      const content = await fs.readFile(packageJsonPath, 'utf8');
      packageJson = JSON.parse(content);
    } catch {
      // Create new package.json
      packageJson = {
        name: path.basename(targetDir),
        version: "1.0.0",
        description: "Project enhanced with Agent AI",
        main: "index.js"
      };
    }
    
    // Add dependencies
    packageJson.dependencies = {
      ...packageJson.dependencies,
      ...this.requiredDependencies
    };
    
    // Add scripts
    packageJson.scripts = {
      ...packageJson.scripts,
      ...this..cursor/rules/agentscripts
    };
    
    // Add keywords
    const agentKeywords = ["ai", "agent", "self-improvement", "automation"];
    packageJson.keywords = [
      ...(packageJson.keywords || []),
      ...agentKeywords.filter(k => !(packageJson.keywords || []).includes(k))
    ];
    
    await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));
  }

  async setupEnvironment(targetDir) {
    const envPath = path.join(targetDir, '.env.example');
    const envContent = `# üß† Agent AI - Environment Configuration
# Copy this to .env and fill in your API keys

# ==================================================
# üåê Pinecone Configuration (for Agent Memory)
# ==================================================
PINECONE_API_KEY=your_pinecone_api_key_here
PINECONE_INDEX_NAME=agent-ai-memory

# ==================================================
# ü§ñ OpenAI Configuration (for Embeddings)  
# ==================================================
OPENAI_API_KEY=your_openai_api_key_here

# ==================================================
# üìÅ Project Configuration
# ==================================================
PROJECT_NAME=my-project
AGENT_MEMORY_ENABLED=true
AGENT_FILESTORE_ENABLED=true

# ==================================================
# üîß Optional Settings
# ==================================================
MEMORY_RETENTION_DAYS=90
MAX_LOCAL_MEMORIES=1000
DEBUG=false
LOG_LEVEL=info
`;
    
    await fs.writeFile(envPath, envContent);
  }

  async installDependencies(targetDir) {
    try {
      process.chdir(targetDir);
      execSync('npm install', { stdio: 'inherit' });
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to install dependencies automatically.');
      console.log('Please run "npm install" manually in the target directory.');
    }
  }

  async setupGitignore(targetDir) {
    const gitignorePath = path.join(targetDir, '.gitignore');
    const agentIgnoreRules = `
# Agent AI - Protect sensitive data
.cursor/rules/agents/_store/memory/
.cursor/rules/agents/_store/logs/
.cursor/rules/agents/_store/projects/*/

# Environment files
.env
.env.local
.env.*.local

# API Keys and secrets
*.key
*.pem
secrets.json

# Node modules (if not already present)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
`;
    
    try {
      let gitignoreContent = '';
      try {
        gitignoreContent = await fs.readFile(gitignorePath, 'utf8');
      } catch {
        // .gitignore doesn't exist
      }
      
      if (!gitignoreContent.includes('.cursor/rules/agents/_store/memory/')) {
        await fs.writeFile(gitignorePath, gitignoreContent + agentIgnoreRules);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not update .gitignore:', error.message);
    }
  }

  showSuccessMessage(targetDir) {
    console.log('\nüéâ Agent AI Installation Complete!');
    console.log('=' .repeat(50));
    console.log(`üìÅ Installed to: ${targetDir}`);
    console.log('\nüöÄ Next Steps:');
    console.log('1. Navigate to your project:');
    console.log(`   cd ${targetDir}`);
    console.log('\n2. Setup environment (optional):');
    console.log('   npm run AAI:setup-env');
    console.log('\n3. Start the Agent AI:');
    console.log('   npm run AAI:agent');
    console.log('\n4. Test the installation:');
    console.log('   npm run AAI:test-system');
    console.log('\nüí° Available Commands:');
    Object.entries(this..cursor/rules/agentscripts).forEach(([script, command]) => {
      console.log(`   npm run ${script}`);
    });
    console.log('\nüìö Documentation:');
    console.log('   .cursor/rules/agents/README.md - Agent system overview');
    console.log('   .cursor/rules/agents/_store/docs/ - Complete documentation');
    console.log('\nüéØ The Agent AI is ready to enhance your project!');
  }

  ask(question) {
    return new Promise((resolve) => {
      this.rl.question(question, resolve);
    });
  }
}

// Run installer if called directly
if (require.main === module) {
  const installer = new AgentAIInstaller();
  installer.install().catch(console.error);
}

module.exports = AgentAIInstaller; 