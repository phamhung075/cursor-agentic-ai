---
description: 
globs: 
alwaysApply: false
---
# Task Management Process with TaskMaster

The project's task management process now utilizes TaskMaster, a powerful and flexible task management tool designed for AI-assisted development workflows.

## Context Awareness

**Previous Phases:**
- Idea Document ([01_Idea.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc))
- Market Research ([02_Market_Research.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc))
- Core Concept ([03_Core_Concept.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/03_Core_Concept.mdc))
- PRD Generation ([04_PRD_Generation.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/04_PRD_Generation.mdc))
- Technical Specifications ([05_Specs_Docs.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/05_Specs_Docs.mdc))

**Current Phase:** Task Management and Breakdown with TaskMaster

## Key Resources

- **TaskMaster Configuration:** `.taskmaster/config.json`
- **Task Data:** `tasks/tasks.json`
- **Task Files:** `tasks/` directory

## Purpose

This workflow step focuses on breaking down the project requirements into manageable, implementable tasks using TaskMaster. The goal is to create a comprehensive task hierarchy that will guide the development process.

### Key Goals:
- Break down PRD into granular, actionable tasks
- Establish clear task dependencies and priorities
- Create a structured implementation roadmap
- Enable efficient tracking and progress monitoring

## TaskMaster Overview

TaskMaster is a modern task management system that integrates with AI workflows. It provides:

1. **Task Structure:** A clear, consistent format for task definitions
2. **Task Hierarchy:** Support for parent tasks and subtasks
3. **Dependency Management:** Track and manage task dependencies
4. **AI Integration:** Support for AI-assisted task generation and expansion
5. **Project Organization:** Tools for organizing and tracking project progress

## Process Overview

The task management process with TaskMaster follows these key steps:

1. **PRD Analysis**: Review the completed Product Requirements Document
2. **Initial Task Creation**: Create high-level tasks from the PRD
   - Use `npx task-master-ai parse-prd` for automatic task generation
3. **Task Breakdown**: Expand high-level tasks into specific subtasks
   - Use `npx task-master-ai expand --id=<task_id>` for detailed breakdown
4. **Dependency Mapping**: Establish relationships between tasks
   - Use `npx task-master-ai add-dependency` to define dependencies
5. **Priority Assignment**: Set implementation priorities for tasks
6. **Task Generation**: Create markdown files for each task
   - Use `npx task-master-ai generate` to create task files

## TaskMaster Workflow

### Task Creation and Management

TaskMaster provides several commands for task management:

```bash
# List all tasks
npx task-master-ai list

# See the next task to work on
npx task-master-ai next

# View details of a specific task
npx task-master-ai show <task_id>

# Add a new task
npx task-master-ai add-task --prompt="Task description"

# Break down a task into subtasks
npx task-master-ai expand --id=<task_id> [--research]

# Update a task
npx task-master-ai update-task --id=<task_id> --prompt="Updated details"

# Change task status
npx task-master-ai set-status --id=<task_id> --status=<status>
```

### Task Structure

Each task in TaskMaster follows a consistent structure:

```json
{
  "id": "1",
  "title": "Task Title",
  "description": "Brief description of the task",
  "details": "Comprehensive implementation details",
  "status": "pending",
  "priority": "high",
  "dependencies": [],
  "testStrategy": "Verification approach"
}
```

### Task Statuses

TaskMaster supports various task statuses:
- `pending`: Tasks ready to be worked on
- `in-progress`: Tasks currently being worked on
- `done`: Completed tasks
- `blocked`: Tasks that cannot proceed
- `deferred`: Tasks postponed for later
- `review`: Tasks awaiting review

## Output Structure

The task management phase produces structured files in the project:

**Task Data File:** `tasks/tasks.json`
**Task Documentation:** `tasks/` directory with individual markdown files

## Integration with Project Workflow

TaskMaster integrates with the project's development workflow:

1. **Task Selection**: Use `npx task-master-ai next` to identify the next task to work on
2. **Implementation**: Implement the task according to the details
3. **Testing**: Verify the implementation following the test strategy
4. **Status Update**: Update the task status when complete
5. **Dependency Management**: Tasks with dependencies will only be available after prerequisites are complete

## Next Steps

After completing the task breakdown:

1. **Implementation Phase**: Proceed to [07_Start_Building.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/07_Start_Building.mdc)
2. **Development**: Use the task hierarchy to guide development
3. **Testing**: Follow tasks through [08_Testing.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/08_Testing.mdc)
4. **Deployment**: Complete with [09_Deployment.mdc](mdc:.cursor/rules/agents/_store/projects/_core/rules/01__AI-RUN/09_Deployment.mdc)

---

*For detailed TaskMaster usage, refer to the official TaskMaster documentation.*