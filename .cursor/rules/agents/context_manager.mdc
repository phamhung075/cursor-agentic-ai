---
description:
globs:
alwaysApply: false
---
# Context Management System

---
description: Defines how agent context is created, updated, and maintained across sessions
globs: contexts/**/*.txt
alwaysApply: true
---

## Context System Overview

The Context Management System provides a standardized approach to maintaining state and knowledge across AI sessions. This system ensures continuity, reduces redundancy, and improves the efficiency of AI agents working on the project.

## Context File Structure

Each context file follows a standardized format:

```markdown
# Context for Task XXX - [Task Title]
**Last Updated:** [Timestamp]
**Session:** [Session number]
**Tool Calls Used:** X/25

## Current Status
- **Phase:** [Analysis/Planning/Implementation/Testing/Complete]
- **Progress:** [X%] - short summary
- **Next Action:** [What comes next]

## What I Did
### Session [N] - [Date/Time]
- Actions taken
- Files created/modified
- Commands run
- Decisions made

## Code Created/Modified
**Files Created:**
- `path/to/file.ts` - Description

**Files Modified:**
- `path/to/modified-file.ts` - What was changed and why

**Key Code Snippets:**
```typescript
// Description
[Important snippet]
```

## Technical Decisions Made
- **Frameworks/Libraries:** e.g., Angular v19, Tailwind v4
- **Architecture Choices:** e.g., Component/service structure
- **Reasoning:** Why this approach was chosen

## Problems Encountered & Solutions
- Problem: [Description]
  - Solution: [How it was fixed]
  - Impact: [What changed]

## Dependencies & Integration
- **Related Tasks:** Dependencies or blockers
- **External Dependencies:** NPM packages, APIs, etc.
- **Integration Points:** Connected modules/systems

## Testing Strategy
- **Test Files:** Path and purpose
- **Test Cases:** Key logic covered
- **Manual Testing:** Steps performed

## Next Steps Priority
1. Immediate next step
2. Secondary step
3. Future ideas

## Notes for Continuation
- **Current Focus:** What AI should resume
- **Context to Remember:** Key info
- **Avoid:** Pitfalls or non-goals
```

## Context Creation Protocol

Agents must create context files at the following times:

1. **Start of task work**: Initialize a new context file
2. **Every 5â€“7 tool calls**: Update existing context
3. **Before reaching tool call limit**: Comprehensive update
4. **After major milestones**: Document achievements
5. **When facing issues**: Record problems and solutions

### Context Initialization Process

When initializing a new context file:

1. Check if a context file exists for the task
   - If yes: Load and analyze existing context
   - If no: Create new context file with basic structure
2. Populate the "Current Status" section with initial assessment
3. Set "Next Action" with planned approach
4. Establish "Session 1" entry in "What I Did" section

## Context Update Protocol

Context updates follow a progressive pattern:

### Progressive Update (Every 5-7 tool calls)

1. Add new entries to "What I Did" section under current session
2. Update "Files Created/Modified" with new changes
3. Refresh "Tool Calls Used" counter
4. Update "Current Status" and "Next Action" if changed

### Comprehensive Update (Near tool call limit)

1. Perform a full review of all sections
2. Update "Technical Decisions Made" with new decisions
3. Document any "Problems Encountered & Solutions"
4. Prioritize remaining work in "Next Steps Priority"
5. Complete "Notes for Continuation" for next session

## Context Inheritance

Context inheritance follows these rules:

1. Each new session inherits the previous session's context
2. Technical decisions persist across all sessions
3. Problems and solutions become part of the permanent record
4. Next steps are carried forward until completed
5. Status is continuously updated to reflect current progress

## Context Quality Standards

All context files must adhere to these quality standards:

### Required Elements
- Accurate file paths with correct syntax
- Focused, purposeful code snippets
- Clear reasoning for technical decisions
- Actionable next steps
- Current tool call count

### Prohibited Elements
- Full code dumps without explanation
- Outdated progress information
- Temporary debugging data
- Redundant information from previous sessions

## Context Communication

When operating near the tool call limit, the agent must:

1. Inform the user about approaching the limit
2. Update the context file with current progress
3. Document next steps for continuation
4. Indicate completion of context update

Example message to user:
> "I'm approaching the tool call limit. Let me update the context file with current progress and next steps for seamless continuation."

## Context Resumption

When resuming work on a task:

1. Load and analyze the existing context file
2. Understand current progress and next actions
3. Start a new session block in "What I Did"
4. Inform the user about resuming from previous context

Example message to user:
> "I'll check the context file for this task to understand where we left off and continue efficiently."
