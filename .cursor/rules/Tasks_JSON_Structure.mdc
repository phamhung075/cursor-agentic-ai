---
description: 
globs: 
alwaysApply: false
---
# üìã Taskmaster Task JSON Structure

---
description: Detailed documentation of the Taskmaster JSON task structure
globs: tasks/*.json, tasks/*.md
alwaysApply: true
---

## üìÑ Overview

This document provides a comprehensive reference for the JSON structure used by Taskmaster to store and manage tasks. Understanding this structure is essential for AI agents working with the Taskmaster system through MCP tools.

## üîç Core Structure

The Taskmaster system uses a `tasks.json` file (typically located in the `tasks/` directory) as its primary data store. This file contains an array of task objects with the following structure:

```json
{
  "tasks": [
    {
      "id": "1",
      "title": "Project Setup",
      "description": "Initialize the project structure and dependencies",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "Create repository, configure TypeScript, set up linting...",
      "testStrategy": "Verify all scripts run without errors",
      "subtasks": [
        {
          "id": "1.1",
          "title": "Initialize Git Repository",
          "description": "Set up Git with proper .gitignore",
          "status": "done",
          "details": "Implementation details for this subtask..."
        },
        {
          "id": "1.2",
          "title": "Configure TypeScript",
          "description": "Set up tsconfig.json",
          "status": "done",
          "details": "Implementation details for this subtask..."
        }
      ]
    },
    // Additional top-level tasks...
  ]
}
```

## üìù Field Definitions

### Task Properties

| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `id` | String | Yes | Unique identifier for the task (e.g., "1", "2", "3") |
| `title` | String | Yes | Brief, descriptive title of the task |
| `description` | String | Yes | Concise summary of what the task involves |
| `status` | String | Yes | Current state of the task (e.g., "pending", "in-progress", "done", "deferred") |
| `dependencies` | Array | Yes | IDs of prerequisite tasks that must be completed first |
| `priority` | String | Yes | Importance level ("high", "medium", "low") |
| `details` | String | No | In-depth implementation instructions |
| `testStrategy` | String | No | Approach for verifying task completion |
| `subtasks` | Array | No | List of component tasks (see Subtask Properties) |

### Subtask Properties

| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `id` | String | Yes | Unique identifier with parent prefix (e.g., "1.1", "1.2") |
| `title` | String | Yes | Brief, descriptive title of the subtask |
| `description` | String | No | Concise summary of what the subtask involves |
| `status` | String | Yes | Current state of the subtask |
| `details` | String | No | In-depth implementation instructions |
| `dependencies` | Array | No | IDs of prerequisite tasks/subtasks |

## üß© Relationships and Hierarchy

### ID Structure

Task IDs follow a hierarchical dot notation:

- Top-level tasks use simple numeric IDs: `"1"`, `"2"`, `"3"`
- Subtasks append their position to the parent ID: `"1.1"`, `"1.2"`, `"2.1"`
- Further nesting can be represented with additional levels: `"1.1.1"`, `"1.1.2"`

### Dependencies

Dependencies are stored as arrays of task IDs:

```json
"dependencies": ["1", "2.3"]
```

This example indicates that the task depends on both:
- The completion of top-level task "1"
- The completion of subtask "3" of top-level task "2"

## üîÑ Status Values

The `status` field can contain the following standard values:

| Status | Description |
|--------|-------------|
| `"pending"` | Task is ready to be worked on, all dependencies are satisfied |
| `"in-progress"` | Work has started but is not yet complete |
| `"done"` | Task has been completed and verified |
| `"deferred"` | Task has been postponed to a later time |
| `"blocked"` | Task cannot proceed due to external factors |
| `"review"` | Task is complete but awaiting review |
| `"cancelled"` | Task has been cancelled and will not be implemented |

Custom status values can be added as needed for specific project workflows.

## üìä Priority Values

The `priority` field typically contains one of the following values:

| Priority | Description |
|----------|-------------|
| `"high"` | Critical tasks that should be addressed first |
| `"medium"` | Standard importance, default for most tasks |
| `"low"` | Tasks that can be deferred if necessary |

## üóÇÔ∏è Complete Schema Example

```json
{
  "tasks": [
    {
      "id": "1",
      "title": "Authentication System",
      "description": "Implement user authentication with JWT",
      "status": "in-progress",
      "dependencies": [],
      "priority": "high",
      "details": "Create login, registration, and token refresh endpoints...",
      "testStrategy": "Unit tests for each endpoint, integration tests for login flow",
      "subtasks": [
        {
          "id": "1.1",
          "title": "User Registration API",
          "description": "Create endpoint for new user signup",
          "status": "done",
          "dependencies": [],
          "details": "Implement /auth/register endpoint with email validation..."
        },
        {
          "id": "1.2",
          "title": "User Login API",
          "description": "Create endpoint for user authentication",
          "status": "in-progress",
          "dependencies": ["1.1"],
          "details": "Implement /auth/login endpoint with JWT generation..."
        },
        {
          "id": "1.3",
          "title": "Token Refresh",
          "description": "Implement JWT refresh mechanism",
          "status": "pending",
          "dependencies": ["1.2"],
          "details": "Create /auth/refresh endpoint for token renewal..."
        }
      ]
    },
    {
      "id": "2",
      "title": "User Profile Management",
      "description": "Create user profile CRUD operations",
      "status": "pending",
      "dependencies": ["1"],
      "priority": "medium",
      "details": "Implement endpoints for viewing and updating user profiles...",
      "testStrategy": "CRUD tests covering all profile operations",
      "subtasks": []
    }
  ]
}
```

## üß† AI Usage Guidance

### Reading Task Data

When working with tasks via MCP tools:

```javascript
// Get all tasks
const tasksResult = await mcpTool.call('get_tasks', {});

// Get a specific task by ID
const taskResult = await mcpTool.call('get_task', {
  id: '1.2'
});

// Get the next task to work on
const nextTaskResult = await mcpTool.call('next_task', {});
```

### Updating Task Data

Always update tasks using the appropriate MCP tools:

```javascript
// Update task status
await mcpTool.call('set_task_status', {
  id: '1.2',
  status: 'done'
});

// Add implementation details to a subtask
await mcpTool.call('update_subtask', {
  id: '1.2',
  prompt: 'Added JWT generation using the jsonwebtoken library...'
});

// Update task with new information
await mcpTool.call('update_task', {
  id: '2',
  prompt: 'Need to add avatar upload feature to the profile management...'
});
```

### Creating New Tasks

When adding new tasks:

```javascript
// Add a new top-level task
await mcpTool.call('add_task', {
  prompt: 'Implement data export feature for user data',
  dependencies: '2',
  priority: 'medium'
});

// Break down a task into subtasks
await mcpTool.call('expand_task', {
  id: '3',
  num: 5,
  research: true
});

// Add a single subtask
await mcpTool.call('add_subtask', {
  id: '3',
  title: 'PDF Export Format',
  description: 'Implement PDF export option for user data',
  details: 'Use PDFKit library to generate formatted user data exports'
});
```

## üìö Related Documents

- [Taskmaster Command Reference](mdc:.cursor/rules/taskmaster.mdc)
- [Development Workflow](mdc:.cursor/rules/dev_workflow.mdc)
- [Nested AI Task Manager](mdc:.cursor/rules/agents/_store/projects/_core/rules/projet/06_Task_Manager/06_Nested_AI_Task_Manager.mdc)
- [Roo Task Workflow](mdc:.cursor/rules/Roo_Task_Workflow.mdc)
- [Centralized MCP Rules](mdc:.cursor/rules/CENTRALIZED_MCP_RULES.mdc)
