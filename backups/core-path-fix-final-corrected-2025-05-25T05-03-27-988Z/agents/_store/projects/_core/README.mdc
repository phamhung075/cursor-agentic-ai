---
description:
globs:
alwaysApply: false
---
# 🚀 Agentic Coding Framework - Core Development System

**Location:** `agents/_store/projects/_core`
**Purpose:** Complete development framework for project creation and AI-assisted coding
**Status:** Active Core Framework

## 📋 Overview

This directory contains the **foundational core development framework** for the Agentic Coding Framework. It provides comprehensive guides, templates, workflows, and documentation needed to build projects using AI-assisted development methodologies.

## 📁 Directory Structure

### 🎯 **Root Framework Files**
```
agents/_store/projects/_core/
├── AI_AGENT_RULES.mdc              # Core rules for all AI agents
├── ORGANIZATION_COMPLETE.mdc        # Organization summary & status
├── BACKUP_SAFETY_REPORT.mdc        # Safety and backup procedures
├── MIGRATION_REPORT.mdc            # Migration tracking and status
├── INTEGRATION_MANIFEST.json       # Integration configuration
└── README.mdc                      # This file
```

### 📚 **Rules Directory** (`rules/`)
Complete development workflow and documentation system:

#### 🤖 **01__AI-RUN/** - **Primary Development Workflow**
```
rules/01__AI-RUN/
├── 00_Getting_Started.mdc          # Master initialization guide
├── 01_Idea.mdc                     # Project idea definition & validation
├── 01_AutoPilot.mdc               # Fully automated development workflow
├── 02_Market_Research.mdc          # Market analysis and validation
├── 03_Core_Concept.mdc            # Core concept refinement
├── 04_PRD_Generation.mdc          # Product Requirements Document generation
├── 05_Specs_Docs.mdc              # Technical specifications & documentation
├── 06_Task_Manager.mdc            # Task breakdown and management
├── 07_Start_Building.mdc          # Implementation phase guide
├── 08_Testing.mdc                 # Testing and validation procedures
├── 09_Deployment.mdc              # Deployment and release procedures
├── Quick_Self_Improvement_Reference.mdc # AI agent command reference
└── Template/                       # Workflow templates
```

#### 📖 **02__AI-DOCS/** - **Documentation Framework**
```
rules/02__AI-DOCS/
├── Architecture/                   # System architecture documentation
├── AI-Coder/                      # AI coding guidelines and patterns
├── BusinessLogic/                 # Business logic documentation templates
├── Conventions/                   # Coding conventions and standards
├── Deployment/                    # Deployment documentation templates
├── Documentation/                 # General documentation guidelines
├── Integrations/                  # Integration documentation
└── TaskManagement/                # Task management documentation
```

#### 📋 **03__SPECS/** - **Specification Templates**
```
rules/03__SPECS/
├── agents/                        # Agent specification templates
├── features/                      # Feature specification templates
├── bugfixes/                      # Bug fix specification templates
├── documentation_index.mdc        # Documentation organization index
├── feature_spec_template.mdc      # Standard feature spec template
├── bugfix_spec_template.mdc       # Standard bugfix spec template
├── user_authentication.mdc        # Authentication specifications
└── login_timeout_fix.mdc          # Login timeout specifications
```

#### 🛠️ **00__TOOLS/** - **Development Tools & Utilities**
```
rules/00__TOOLS/
├── SCRIPT_ORGANIZATION_RULES.mdc   # Script organization guidelines
├── cursor_path_fix.mdc            # Path fixing utilities and guides
├── file_update_and_link_processing_guide.mdc # File processing guides
├── cursor_files_list.mdc          # Cursor files tracking
└── .cI-DOCS/                      # Internal documentation tools
```

#### 📁 **projet/** - **Project Output Templates**
```
rules/projet/
├── 01_Idea/                       # Idea phase output templates
├── 02_Market_Research/            # Market research output templates
├── 03_Core_Concept/               # Core concept output templates
└── PRD_template/                  # PRD generation templates
```

#### ⚙️ **Core System Files**
```
rules/
├── logic.mdc                      # Core system logic and rules
├── workflow.mdc                   # Workflow coordination system
├── Inspiration.mdc                # Inspiration and patterns library
├── README.mdc                     # Rules directory documentation
└── tasks/                         # Task management system (empty - to be implemented)
```

### 📚 **Documentation Directory** (`docs/`)
```
docs/
├── README.mdc                     # Documentation index and guidelines
└── path-fixing/                   # Path fixing documentation and memory
```

## 🎯 **Purpose & Core Functions**

This framework serves as:

1. **📋 Template Repository** - Comprehensive templates for all development phases
2. **🔄 Workflow Engine** - Step-by-step guided development processes
3. **🧠 Knowledge Base** - Accumulated best practices, patterns, and solutions
4. **🤖 AI Enhancement Hub** - Specialized guides for AI-assisted development
5. **📚 Documentation Center** - Complete reference materials and standards
6. **🔧 Tool Integration** - Utilities and tools for development automation

## 🚀 **Integration with Agentic AI**

### **AI Agent Capabilities**
- **Pattern Recognition** - Learn from established workflows and templates
- **Template Application** - Apply proven patterns to new development scenarios
- **Workflow Automation** - Execute complete development cycles automatically
- **Knowledge Synthesis** - Combine multiple templates and patterns intelligently
- **Quality Assurance** - Maintain consistency across all projects using core standards

### **Key Integration Points**
- **Memory System** - Core patterns stored in AI agent memory for quick reference
- **Workflow Execution** - Direct integration with AI workflow automation
- **Template Instantiation** - AI can instantiate templates with project-specific data
- **Progressive Enhancement** - Framework evolves based on AI learning and feedback

## 📖 **Quick Start Guide**

### **For New Projects:**
1. **Start Here:** `rules/01__AI-RUN/00_Getting_Started.mdc`
2. **AutoPilot Mode:** `rules/01__AI-RUN/01_AutoPilot.mdc`
3. **Manual Process:** Follow numbered sequence 01-09 in `01__AI-RUN/`

### **For AI Agent Development:**
1. **Agent Rules:** Review `AI_AGENT_RULES.mdc`
2. **Command Reference:** `rules/01__AI-RUN/Quick_Self_Improvement_Reference.mdc`
3. **Tool Integration:** `rules/00__TOOLS/`

### **For Documentation:**
1. **Architecture:** Browse `rules/02__AI-DOCS/Architecture/`
2. **Specifications:** Use templates in `rules/03__SPECS/`
3. **Conventions:** Follow guidelines in `rules/02__AI-DOCS/Conventions/`

## 🔧 **Maintenance & Evolution**

### **Framework Maintenance**
- **🔄 Regular Updates** - Incorporate new patterns and learnings
- **📚 Template Enhancement** - Improve templates based on usage feedback
- **🧠 AI Learning Integration** - Update based on AI agent learning outcomes
- **🔒 Version Control** - Maintain integrity of core templates and workflows

### **Quality Assurance**
- **✅ Template Validation** - Regular testing of all templates and workflows
- **📊 Usage Analytics** - Track which patterns and templates are most effective
- **🔍 Gap Analysis** - Identify missing templates or workflow steps
- **🚀 Performance Optimization** - Continuously improve workflow efficiency

## 📊 **Framework Statistics**

### **Current Inventory**
- **Workflow Files:** 11 core workflow stages in `01__AI-RUN/`
- **Documentation Categories:** 7 major documentation areas in `02__AI-DOCS/`
- **Specification Templates:** 6+ ready-to-use spec templates in `03__SPECS/`
- **Development Tools:** 4+ utilities and guides in `00__TOOLS/`
- **Project Templates:** 4 project phase templates in `projet/`

### **Coverage Areas**
- ✅ **Complete Development Lifecycle** - From idea to deployment
- ✅ **AI Agent Integration** - Full AI-assisted development support
- ✅ **Documentation Standards** - Comprehensive documentation framework
- ✅ **Quality Assurance** - Testing and validation procedures
- ✅ **Deployment Automation** - Deployment and release management

## 📝 **Migration & Integration Notes**

### **Migration Status**
- ✅ **Framework Migration Complete** - All core files successfully migrated
- ✅ **Path Integrity Verified** - All internal references updated and validated
- ✅ **Structure Preservation** - Original organization and relationships maintained
- ✅ **Extension Consistency** - All `.mdc` extensions preserved
- ✅ **Integration Ready** - Framework ready for AI agent integration

### **Integration Capabilities**
- **🔗 Cross-Reference Support** - Internal linking system functional
- **🤖 AI Agent Ready** - Compatible with AI workflow automation
- **📊 Analytics Ready** - Structure supports usage tracking and optimization
- **🔄 Version Control** - Git-friendly structure for collaborative development

---

**🎯 Framework Philosophy:** *This core framework embodies the collective intelligence and proven methodologies of the Agentic Coding Framework. It serves as the definitive source of truth for AI-assisted development workflows, ensuring consistency, quality, and continuous improvement across all projects.*

**🚀 Next Steps:** Begin with `rules/01__AI-RUN/00_Getting_Started.mdc` for new projects or `AI_AGENT_RULES.mdc` for AI agent configuration.
