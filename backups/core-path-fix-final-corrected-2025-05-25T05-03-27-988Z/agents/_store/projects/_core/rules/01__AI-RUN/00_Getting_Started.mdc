---
description:
globs:
alwaysApply: false
---
# 🚀 Getting Started: Agentic AI-Assisted Development Workflow

## 📋 Introduction

Welcome to the **Agentic Coding Framework** - a sophisticated AI-assisted development workflow that takes your project from initial concept to full deployment through a structured, intelligent process.

This comprehensive framework consists of **nine sequential development phases**, each with specialized AI guidance and templates. The system leverages advanced AI agents, memory systems, and proven development methodologies to create high-quality applications with minimal manual intervention.

## 🏗️ Framework Location & Structure

**Core Framework Path:** `agents/_store/projects/_core/`

```
agents/_store/projects/_core/
├── rules/01__AI-RUN/              # Primary workflow stages (this directory)
│   ├── 00_Getting_Started.mdc     # This file - master guide
│   ├── 01_Idea.mdc               # Project concept definition
│   ├── 01_AutoPilot.mdc          # Fully automated workflow
│   ├── 02_Market_Research.mdc     # Market analysis and validation
│   ├── 03_Core_Concept.mdc       # Core concept refinement
│   ├── 04_PRD_Generation.mdc     # Product Requirements Document
│   ├── 05_Specs_Docs.mdc         # Technical specifications
│   ├── 06_Task_Manager.mdc       # Task breakdown and management
│   ├── 07_Start_Building.mdc     # Implementation phase
│   ├── 08_Testing.mdc            # Testing and validation
│   ├── 09_Deployment.mdc         # Deployment and release
│   ├── Quick_Self_Improvement_Reference.mdc # AI command reference
│   └── Template/                  # Workflow templates
│       ├── PRD_template.mdc      # PRD template
│       ├── MCP-Context.mdc       # MCP context template
│       └── MCP-Server.json       # MCP server configuration
│
├── rules/02__AI-DOCS/            # Documentation framework
│   ├── Architecture/             # System architecture docs
│   ├── AI-Coder/                # AI coding guidelines
│   ├── BusinessLogic/            # Business logic templates
│   ├── Conventions/              # Coding standards
│   ├── Deployment/               # Deployment docs
│   ├── Documentation/            # General documentation
│   ├── Integrations/             # Integration guides
│   └── TaskManagement/           # Task management system
│       ├── Roo_Task_Workflow.mdc
│       └── Tasks_JSON_Structure.mdc
│
├── rules/03__SPECS/              # Specification templates
│   ├── agents/                   # Agent specifications
│   ├── features/                 # Feature specifications
│   ├── bugfixes/                 # Bug fix specifications
│   └── documentation_index.mdc   # Documentation index
│
├── rules/00__TOOLS/              # Development utilities
│   ├── SCRIPT_ORGANIZATION_RULES.mdc
│   ├── cursor_path_fix.mdc
│   ├── file_update_and_link_processing_guide.mdc
│   └── cursor_files_list.mdc
│
├── rules/projet/                 # Project output templates
│   ├── 01_Idea/                 # Idea phase outputs
│   ├── 02_Market_Research/       # Market research outputs
│   ├── 03_Core_Concept/          # Core concept outputs
│   └── PRD_template/             # PRD generation templates
│
├── docs/                         # Documentation directory
│   ├── README.mdc               # Documentation index
│   └── path-fixing/             # Path fixing guides
│
├── AI_AGENT_RULES.mdc           # Core AI agent rules
├── ORGANIZATION_COMPLETE.mdc     # Organization summary
├── BACKUP_SAFETY_REPORT.mdc     # Safety procedures
├── MIGRATION_REPORT.mdc         # Migration tracking
└── INTEGRATION_MANIFEST.json    # Integration configuration
```

## 🤖 Enhanced Agent AI Integration

### 🚀 Advanced AI System Features

The framework includes a **sophisticated Agent AI system** that enhances your development workflow:

**🎯 Core Capabilities:**
- **🧠 Advanced Memory System** - Vector-based learning with Pinecone integration
- **🔍 Intelligent Code Analysis** - Deep pattern recognition and context understanding
- **🔗 Dependency Tracking** - Real-time file relationship monitoring
- **📁 Multi-Project Management** - Organized contexts with cross-project learning
- **⚡ Context-Aware Assistance** - Phase-specific recommendations and guidance
- **🌐 Universal Compatibility** - Works with any AI coding assistant (Cursor, Windsurf, Cline, etc.)
- **🏠 Local-First Design** - Core functionality without API dependencies

### 🚀 Quick Start Commands

```bash
# 🎯 Primary Agent Commands
npm run AAI:start           # Start the main AI agent
npm run AAI:agent          # Interactive agent mode
npm run AAI:demo           # Quick capability demonstration
npm run AAI:setup-env      # Interactive environment setup

# 🧪 System Testing & Validation
npm run AAI:test-system         # Core system functionality tests
npm run AAI:test-dependencies   # Dependency tracking validation
npm run AAI:test-agent          # Agent functionality verification
npm run AAI:test-startup        # Startup sequence validation

# 📊 System Status & Analysis
npm run AAI:core-status         # Framework health overview
npm run AAI:core-scan          # File structure analysis
npm run AAI:core-health        # Comprehensive health check
```

### 📚 Agent AI Documentation

**Core Documentation Location:** `agents/_store/docs/`

- **[Main README](agents/_store/projects/_core/docs/README.mdc)** - Complete system overview
- **Installation Guide** - Setup instructions *(referenced but not found)*
- **AI Assistant Compatibility** - Integration guide *(referenced but not found)*
- **File Organization** - Structure guidelines *(referenced but not found)*
- **File Dependency Tracking** - Dependency system *(referenced but not found)*
- **Organizational Rules** - Framework rules *(referenced but not found)*

## 🌊 Complete Workflow Overview

```mermaid
graph TD
    A0[📖 Getting Started] -->|Initialize Framework| A
    A[💡 Idea Definition] -->|Concept & Vision| B
    B[📊 Market Research] -->|Validation & Analysis| C
    C[🎯 Core Concept] -->|Refinement & UVP| D
    D[📋 PRD Generation] -->|Requirements & Features| E
    E[📄 Specs & Docs] -->|Technical Documentation| F
    F[⚙️ Task Management] -->|Task Breakdown| G
    G[🔨 Building Phase] -->|Implementation| H
    H[🧪 Testing Phase] -->|Validation & QA| I
    I[🚀 Deployment] -->|Release & Launch| J
    J[🔄 Iteration] -->|Feedback & Next Cycle| A

    subgraph "Agent AI Support"
        AI1[🧠 Memory System]
        AI2[🔍 Pattern Recognition]
        AI3[⚡ Context Awareness]
        AI4[🔗 Dependency Tracking]
    end

    A0 -.-> AI1
    A -.-> AI2
    B -.-> AI3
    C -.-> AI4
```

## 📂 File Naming Conventions & Output Locations

The framework uses **consistent file naming** and **structured output locations** for all generated artifacts:

| Phase | Prompt File | Primary Output Location | Output Type |
|-------|-------------|------------------------|-------------|
| **Idea** | [01_Idea.mdc](agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc) | `../projet/01_Idea/idea_document.mdc` | Project concept |
| **Market Research** | [02_Market_Research.mdc](agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc) | `../projet/02_Market_Research/market_research.mdc` | Market analysis |
| **Core Concept** | [03_Core_Concept.mdc](agents/_store/projects/_core/rules/01__AI-RUN/03_Core_Concept.mdc) | `../projet/03_Core_Concept/core_concept.mdc` | Refined concept |
| **PRD Generation** | [04_PRD_Generation.mdc](agents/_store/projects/_core/rules/01__AI-RUN/04_PRD_Generation.mdc) | `../projet/PRD_template/project_prd.mdc` | Requirements document |
| **Specs & Docs** | [05_Specs_Docs.mdc](agents/_store/projects/_core/rules/01__AI-RUN/05_Specs_Docs.mdc) | `../02__AI-DOCS/` & `../03__SPECS/` | Technical documentation |
| **Task Management** | [06_Task_Manager.mdc](agents/_store/projects/_core/rules/01__AI-RUN/06_Task_Manager.mdc) | `../tasks/tasks.json` | Task breakdown |
| **Implementation** | [07_Start_Building.mdc](agents/_store/projects/_core/rules/01__AI-RUN/07_Start_Building.mdc) | Project codebase | Functional code |
| **Testing** | [08_Testing.mdc](agents/_store/projects/_core/rules/01__AI-RUN/08_Testing.mdc) | Test reports & preview | Validated features |
| **Deployment** | [09_Deployment.mdc](agents/_store/projects/_core/rules/01__AI-RUN/09_Deployment.mdc) | Production environment | Live application |

### 📋 Key Reference Documents

**Generated during workflow:**
- **Project PRD**: `../projet/PRD_template/project_prd.mdc`
- **Technical Architecture**: `../02__AI-DOCS/Architecture/architecture.mdc`
- **Coding Conventions**: `../02__AI-DOCS/Conventions/coding_conventions.mdc`
- **Design Guidelines**: `../02__AI-DOCS/Conventions/design_conventions.mdc`
- **Feature Specifications**: `../03__SPECS/features/feature_spec_*.mdc`
- **Task Structure**: `../tasks/tasks.json` (follows [Tasks_JSON_Structure.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc))

**Framework templates and guides:**
- **Task Workflow**: [Roo_Task_Workflow.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc)
- **Task Structure Guide**: [Tasks_JSON_Structure.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)
- **Documentation Index**: [documentation_index.mdc](agents/_store/projects/_core/rules/03__SPECS/documentation_index.mdc)
- **AI Optimization Guides**: [AI_*_Optimization.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/Documentation)

## 🤖 AI Agent Pre-Flight Checklist

**Critical: AI Agent Initial Analysis Requirements**

Before starting any workflow (AutoPilot or manual), the AI agent **MUST** perform comprehensive analysis:

### 1. 📁 **File Structure Analysis**
- **Examine** all directories in `agents/_store/projects/_core/`
- **Understand** purpose of each subdirectory:
  - `01__AI-RUN/` - Workflow stage prompts and guidance
  - `02__AI-DOCS/` - Documentation templates and AI guidance
  - `03__SPECS/` - Specification templates and structures
  - `00__TOOLS/` - Utilities and development tools
  - `projet/` - Project output templates and structures

### 2. 🧠 **Deep Codebase Understanding**
- **Read and analyze** core framework files:
  - `../logic.mdc` - Core system logic and rules
  - `../workflow.mdc` - Workflow coordination system
  - [AI_AGENT_RULES.mdc](agents/_store/projects/_core/AI_AGENT_RULES.mdc) - Fundamental AI agent rules
  - Templates in `../02__AI-DOCS/` and `../03__SPECS/`
- **Build mental model** of project state, logic, and component interactions
- **Understand** file relationships and dependencies

### 3. 🎯 **Key Reference Document Identification**
- **Locate** primary sources of truth for the project
- **Prioritize** generated project-specific documents over templates
- **Reference** detailed specifications for all development tasks
- **Follow** established patterns from `../02__AI-DOCS/Documentation/`

### 4. 📋 **Spec-Driven Development**
- **Read and adhere** to relevant specification documents in `../03__SPECS/`
- **Reference** task details in `tasks.json` following [Tasks_JSON_Structure.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)
- **Apply** coding conventions and design guidelines strictly
- **Validate** against feature specifications before implementation

## 🚀 How to Use This Workflow

### 📋 **Step 1: Environment Preparation**

1. **Review** this Getting Started guide thoroughly
2. **Initialize** the Agent AI system:
   ```bash
   npm run AAI:setup-env      # Interactive setup
   npm run AAI:agent          # Start agent system
   ```
3. **Verify** framework structure and file accessibility
4. **Ensure** all prompt files are present and correctly referenced

### ⚙️ **Step 2: Choose Your Development Approach**

#### **Option A: Fully Automated Workflow (Recommended)**
1. **Open** [01_AutoPilot.mdc](agents/_store/projects/_core/rules/01__AI-RUN/01_AutoPilot.mdc) and share with your AI assistant
2. **Provide** initial project idea (1-3 sentences)
3. **Answer** clarifying questions (5-7 targeted questions)
4. **Monitor** automated progression through all phases
5. **Validate** key outputs when prompted

#### **Option B: Manual Step-by-Step Workflow**
1. **Start** with [01_Idea.mdc](agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc) for project concept definition
2. **Complete** each phase sequentially (01-09)
3. **Save outputs** in designated locations with correct naming
4. **Reference** previous outputs when moving to next phases
5. **Follow** transition guidance between phases

### 🔄 **Step 3: Phase Transition Management**

Each phase includes **"Next Steps"** sections that specify:
- **Output saving** procedures and file naming conventions
- **Next phase** prompt file and requirements
- **Input dependencies** from previous phases
- **Validation checkpoints** for quality assurance

## 🎯 Quick Start Options

### 🤖 **Option 1: AutoPilot Mode (Recommended)**

**Best for:** Complete automation with minimal intervention

```bash
# 1. Start Agent AI system
npm run AAI:agent

# 2. Open AutoPilot prompt
# File: agents/_store/projects/_core/rules/01__AI-RUN/01_AutoPilot.mdc

# 3. Provide your project idea
# Example: "A task management app for remote teams with real-time collaboration"

# 4. Answer 5-7 clarifying questions
# 5. Monitor automated workflow execution
```

**Benefits:**
- ✅ **Minimal manual intervention** required
- ✅ **Consistent quality** across all phases
- ✅ **Integrated AI memory** for context retention
- ✅ **Automatic error handling** and correction

### 📋 **Option 2: Guided Step-by-Step**

**Best for:** Learning the framework or complex custom requirements

```bash
# 1. Start with Idea phase
# File: agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc

# 2. Complete each phase in sequence:
# → 02_Market_Research.mdc
# → 03_Core_Concept.mdc
# → 04_PRD_Generation.mdc
# → 05_Specs_Docs.mdc
# → 06_Task_Manager.mdc
# → 07_Start_Building.mdc
# → 08_Testing.mdc
# → 09_Deployment.mdc

# 3. Save outputs as specified in each phase
```

**Benefits:**
- ✅ **Full control** over each development phase
- ✅ **Learning opportunity** to understand the framework
- ✅ **Custom modifications** possible at each step
- ✅ **Detailed validation** at each checkpoint

## 🛠️ Troubleshooting Guide

### ❌ **Common Issues & Solutions**

#### **AI Agent Context Loss**
**Symptoms:** AI seems confused or lacks project context
**Solutions:**
1. ✅ Verify all previous phases are completed
2. ✅ Check output files are correctly named and located
3. ✅ Explicitly reference relevant output files from previous phases
4. ✅ Restart Agent AI system: `npm run AAI:agent`

#### **File Path Errors**
**Symptoms:** Links or references not working
**Solutions:**
1. ✅ Verify you're in the correct working directory
2. ✅ Check relative path accuracy from current location
3. ✅ Ensure framework structure is intact
4. ✅ Run path validation: `npm run AAI:core-health`

#### **Template Access Issues**
**Symptoms:** Cannot access templates or documentation
**Solutions:**
1. ✅ Verify framework location: `agents/_store/projects/_core/`
2. ✅ Check directory permissions
3. ✅ Validate file structure: `npm run AAI:core-scan`
4. ✅ Restore from backup if needed

#### **Agent AI Memory Issues**
**Symptoms:** AI not learning or remembering patterns
**Solutions:**
1. ✅ Check memory system status: `🤖 > memory stats`
2. ✅ Verify Pinecone integration (if configured)
3. ✅ Restart memory system: `npm run AAI:sync-memory`
4. ✅ Check memory configuration in environment

## 📊 Workflow Stages & Responsibilities

### 🎯 **Development Phases Overview**

#### **Phase 1: 💡 Idea Definition**
- **File:** [01_Idea.mdc](agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc)
- **Human Role:** Concept formulation and initial vision
- **AI Role:** Brainstorming assistance and concept refinement
- **Output:** `../projet/01_Idea/idea_document.mdc`
- **Duration:** 15-30 minutes

#### **Phase 2: 📊 Market Research**
- **File:** [02_Market_Research.mdc](agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc)
- **Human Role:** Analysis and evaluation of research findings
- **AI Role:** Rapid research execution and data compilation
- **Output:** `../projet/02_Market_Research/market_research.mdc`
- **Duration:** 30-60 minutes

#### **Phase 3: 🎯 Core Concept**
- **File:** [03_Core_Concept.mdc](agents/_store/projects/_core/rules/01__AI-RUN/03_Core_Concept.mdc)
- **Human Role:** Final concept validation and decision
- **AI Role:** UVP proposal and persona refinement
- **Output:** `../projet/03_Core_Concept/core_concept.mdc`
- **Duration:** 20-40 minutes

#### **Phase 4: 📋 PRD Generation**
- **File:** [04_PRD_Generation.mdc](agents/_store/projects/_core/rules/01__AI-RUN/04_PRD_Generation.mdc)
- **Human Role:** Iterative validation and approval
- **AI Role:** Complete PRD generation using templates
- **Output:** `../projet/PRD_template/project_prd.mdc`
- **Duration:** 45-90 minutes

#### **Phase 5: 📄 Specifications & Documentation**
- **File:** [05_Specs_Docs.mdc](agents/_store/projects/_core/rules/01__AI-RUN/05_Specs_Docs.mdc)
- **Human Role:** Review and approval of technical documentation
- **AI Role:** Create project-specific docs from templates in `../02__AI-DOCS/` and `../03__SPECS/`
- **Output:** Technical documentation and specifications
- **Duration:** 30-60 minutes

#### **Phase 6: ⚙️ Task Management**
- **File:** [06_Task_Manager.mdc](agents/_store/projects/_core/rules/01__AI-RUN/06_Task_Manager.mdc)
- **Human Role:** Review and validation of task structure
- **AI Role:** Generate `tasks.json` following [Tasks_JSON_Structure.mdc](agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)
- **Output:** `../tasks/tasks.json`
- **Duration:** 20-45 minutes

#### **Phase 7: 🔨 Implementation**
- **File:** [07_Start_Building.mdc](agents/_store/projects/_core/rules/01__AI-RUN/07_Start_Building.mdc)
- **Human Role:** Code review and feature validation
- **AI Role:** Execute tasks, write code, implement features
- **Output:** Functional application codebase
- **Duration:** 2-8+ hours (varies by complexity)

#### **Phase 8: 🧪 Testing**
- **File:** [08_Testing.mdc](agents/_store/projects/_core/rules/01__AI-RUN/08_Testing.mdc)
- **Human Role:** Final validation and acceptance testing
- **AI Role:** Automated testing, preview setup, issue resolution
- **Output:** Tested application with preview environment
- **Duration:** 30-120 minutes

#### **Phase 9: 🚀 Deployment**
- **File:** [09_Deployment.mdc](agents/_store/projects/_core/rules/01__AI-RUN/09_Deployment.mdc)
- **Human Role:** Go/no-go decision and final approval
- **AI Role:** Execute deployment plan and post-deployment validation
- **Output:** Live, deployed application
- **Duration:** 15-60 minutes

## 🎖️ Best Practices & Success Tips

### ✅ **Development Excellence**

1. **📋 Sequential Completion** - Complete phases in order for optimal results
2. **💾 Save All Outputs** - Maintain all generated documents for reference
3. **🔍 Validate Key Decisions** - Review critical decisions before proceeding
4. **🔄 Provide Feedback** - Refine outputs to match your vision
5. **📱 Version Control** - Maintain git history for all project artifacts

### 🚀 **AI Optimization**

1. **🧠 Agent AI Integration** - Start Agent AI before beginning workflow
2. **📝 Clear Communication** - Provide specific, detailed requirements
3. **🔗 Context Maintenance** - Reference previous outputs when transitioning
4. **⚡ Pattern Learning** - Allow AI to learn from your preferences and decisions
5. **🎯 Spec Adherence** - Ensure AI follows generated specifications strictly

### 🔧 **Framework Mastery**

1. **📚 Study Templates** - Familiarize yourself with available templates
2. **🎮 Use Commands** - Leverage Agent AI commands for efficiency
3. **📊 Monitor Progress** - Use status commands to track development health
4. **🔄 Iterate Effectively** - Use feedback loops for continuous improvement
5. **🌐 Scale Patterns** - Apply successful patterns across multiple projects

## 🎯 Key Benefits Summary

### 🚀 **Development Acceleration**
- **⚡ Rapid Prototyping** - From idea to working prototype in hours
- **🤖 Intelligent Automation** - AI handles repetitive and complex tasks
- **📋 Structured Process** - Proven methodology reduces decision fatigue
- **🔄 Iterative Improvement** - Built-in feedback loops for continuous enhancement

### 🎖️ **Quality Assurance**
- **📄 Comprehensive Documentation** - Auto-generated technical documentation
- **🧪 Automated Testing** - Built-in testing and validation procedures
- **📏 Consistent Standards** - Enforced coding and design conventions
- **🔍 Pattern Recognition** - AI learns and applies best practices

### 🧠 **Learning & Growth**
- **📚 Knowledge Retention** - AI memory system captures and applies learnings
- **🔗 Cross-Project Benefits** - Patterns improve across all projects
- **👥 Team Scaling** - Framework supports multiple developers and teams
- **🎯 Skill Development** - Learn proven development methodologies

---

## 🚀 Ready to Begin!

**🎯 Recommended Next Step:**

Start the Agent AI system and begin with AutoPilot mode for the best experience:

```bash
# 1. Initialize Agent AI
npm run AAI:agent

# 2. Open AutoPilot file
# agents/_store/projects/_core/rules/01__AI-RUN/01_AutoPilot.mdc

# 3. Share with your AI assistant and provide your project idea
```

**Alternative:** For step-by-step learning, start with:
```bash
# agents/_store/projects/_core/rules/01__AI-RUN/01_Idea.mdc
```

**🎮 Pro Tips:**
- ✅ Have your project idea ready (1-3 sentences)
- ✅ Be prepared to answer 5-7 clarifying questions
- ✅ Keep this guide open for reference during the workflow
- ✅ Use Agent AI commands for enhanced assistance

**Welcome to the future of AI-assisted development! 🚀**
