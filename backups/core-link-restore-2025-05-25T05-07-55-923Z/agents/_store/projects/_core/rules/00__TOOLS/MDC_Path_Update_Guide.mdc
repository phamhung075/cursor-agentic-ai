---
description: 
globs: agents/_store/projects/_core/*.mdc
alwaysApply: false
---
# MDC File Path Update Guide - Methodology & Standards

## Overview

This guide documents the standardized methodology for updating .mdc files within the Agentic Coding Framework to ensure accurate file paths and clickable URL references. Use this guide whenever updating documentation files to maintain consistency and accuracy across the framework.

## üéØ Core Objectives

1. **Path Accuracy**: Verify all file references exist in the actual directory structure
2. **Clickable Navigation**: Convert existing file paths to clickable URLs
3. **Consistency**: Maintain uniform URL formatting across all documentation
4. **Future-Proofing**: Document methodology for reusable updates

## üìã Step-by-Step Methodology

### Phase 1: File Path Verification

#### 1.1 Directory Structure Analysis
```bash
# Use list_dir tool to verify directory contents
agents/_store/projects/_core/
‚îú‚îÄ‚îÄ rules/
‚îÇ   ‚îú‚îÄ‚îÄ 01__AI-RUN/     # Check all workflow files
‚îÇ   ‚îú‚îÄ‚îÄ 02__AI-DOCS/    # Check documentation templates
‚îÇ   ‚îú‚îÄ‚îÄ 03__SPECS/      # Check specification templates
‚îÇ   ‚îú‚îÄ‚îÄ 00__TOOLS/      # Check utility files
‚îÇ   ‚îî‚îÄ‚îÄ projet/         # Check project workspace
```

#### 1.2 File Existence Verification Process
1. **Read Current Document**: Identify all file path references in the target .mdc file
2. **Extract Path References**: List all paths mentioned (relative and absolute)
3. **Verify Each Path**: Use `list_dir` tool to check if files actually exist
4. **Categorize Results**:
   - ‚úÖ **Existing Files**: Convert to clickable URLs
   - ‚ùå **Non-Existent Files**: Leave as plain text paths
   - üîÑ **Template Destinations**: Files that will be created during workflow

#### 1.3 Path Categories & Handling

| Category | Example | Handling |
|----------|---------|-----------|
| **Existing Workflow Files** | `rules/01__AI-RUN/00_Getting_Started.mdc` | Convert to clickable URL |
| **Existing Templates** | `03__SPECS/feature_spec_template.mdc` | Convert to clickable URL |
| **Generated Documents** | `projet/01_Idea/idea_document.mdc` | Keep as plain text path |
| **Future Creation** | `02__AI-DOCS/Architecture/architecture.mdc` | Keep as plain text path |

### Phase 2: URL Standardization

#### 2.1 URL Format Standard
```markdown
# Standard Format:
[Display Text](mdc:agents/_store/projects/_core/path/to/file.mdc)

# Examples:
[agents/_store/projects/_core/rules/01__AI-RUN/00_Getting_Started.mdc](mdc:agents/_store/projects/_core/rules/01__AI-RUN/00_Getting_Started.mdc)

[Task JSON Structure Guide](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)
```

#### 2.2 URL Formatting Rules
1. **Always Start With**: `agents/_store/projects/_core`
2. **Use Forward Slashes**: Even on Windows systems
3. **Preserve File Extensions**: Always include `.mdc`
4. **Display Text Options**:
   - Full path (for reference clarity)
   - Descriptive name (for readability)
   - Consistent with context

#### 2.3 Context-Appropriate Display Text

| Context | Display Text Style | Example |
|---------|-------------------|---------|
| **Technical Reference** | Full path | `agents/_store/projects/_core/rules/01__AI-RUN/00_Getting_Started.mdc` |
| **User-Friendly Links** | Descriptive name | `Getting Started Guide` |
| **Workflow Steps** | Action-oriented | `Task Management Workflow` |

### Phase 3: Content Update Process

#### 3.1 Pre-Update Checklist
- [ ] Backup original file (if critical)
- [ ] Read entire document to understand context
- [ ] Identify all path references
- [ ] Verify current working directory structure
- [ ] Plan update approach (systematic vs. selective)

#### 3.2 Update Execution Steps

1. **Systematic Path Review**:
   ```markdown
   # Find all instances of:
   - `rules/01__AI-RUN/filename.mdc`
   - `02__AI-DOCS/directory/filename.mdc`
   - `03__SPECS/filename.mdc`
   - Any relative path references
   ```

2. **Verification Commands**:
   ```bash
   # Check specific directory
   list_dir("agents/_store/projects/_core/rules/01__AI-RUN")
   
   # Verify file existence
   file_search("filename.mdc")
   ```

3. **Replace Pattern**:
   ```markdown
   # From:
   `rules/01__AI-RUN/00_Getting_Started.mdc`
   
   # To:
   [agents/_store/projects/_core/rules/01__AI-RUN/00_Getting_Started.mdc](mdc:agents/_store/projects/_core/rules/01__AI-RUN/00_Getting_Started.mdc)
   ```

#### 3.3 Quality Assurance
- [ ] All existing files have clickable URLs
- [ ] Non-existent files remain as plain text
- [ ] URL format is consistent throughout
- [ ] Display text is appropriate for context
- [ ] No broken or malformed links

## üîß Tools & Commands Reference

### Essential Tools for Path Updates

#### Directory Verification
```bash
# Check framework structure
list_dir("agents/_store/projects/_core")

# Check specific workflow directory
list_dir("agents/_store/projects/_core/rules/01__AI-RUN")

# Check documentation templates
list_dir("agents/_store/projects/_core/rules/02__AI-DOCS")

# Check specifications
list_dir("agents/_store/projects/_core/rules/03__SPECS")
```

#### File Search & Verification
```bash
# Find specific file
file_search("filename.mdc")

# Read file content for verification
read_file("path/to/file.mdc")
```

#### Content Update
```bash
# Edit file with updates
edit_file("target_file.mdc", "instructions", "content_updates")
```

## üìù Template Patterns

### Pattern 1: Workflow File References
```markdown
# Before:
Execute `rules/01__AI-RUN/02_Market_Research.mdc` internally

# After:
Execute [agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc](mdc:agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc) internally
```

### Pattern 2: Documentation References
```markdown
# Before:
Follow structure defined in `02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc`

# After:
Follow structure defined in [agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/TaskManagement/Tasks_JSON_Structure.mdc)
```

### Pattern 3: Template References
```markdown
# Before:
Copy relevant templates (e.g., `03__SPECS/feature_spec_template.mdc`)

# After:
Copy relevant templates (e.g., [agents/_store/projects/_core/rules/03__SPECS/feature_spec_template.mdc](mdc:agents/_store/projects/_core/rules/03__SPECS/feature_spec_template.mdc))
```

## üéØ Common Update Scenarios

### Scenario 1: Complete Document Overhaul
**Use Case**: Rewriting entire documentation file
**Approach**: 
1. Verify all directory structures
2. Create new content with verified paths
3. Apply URL formatting throughout
4. Validate all links

### Scenario 2: Path Correction Update
**Use Case**: Fixing incorrect path references
**Approach**:
1. Identify specific incorrect paths
2. Verify correct paths
3. Update with clickable URLs
4. Test navigation

### Scenario 3: New File Integration
**Use Case**: Adding references to newly created files
**Approach**:
1. Verify new file exists
2. Add with standard URL format
3. Ensure consistency with existing links

## ‚ö†Ô∏è Important Considerations

### File Existence Rules
- **Existing Files**: Always convert to clickable URLs
- **Future Files**: Keep as plain text until they exist
- **Template Destinations**: Don't convert until actually created
- **Generated Content**: Only convert after generation is complete

### Framework Structure Awareness
- Understand the purpose of each directory
- Know which files are templates vs. actual content
- Recognize workflow-generated vs. static files
- Maintain separation between framework and project content

### Consistency Requirements
- All URLs must start with `agents/_store/projects/_core`
- Use consistent display text styles within same document
- Maintain proper markdown formatting
- Preserve document readability

## üîÑ Maintenance Workflow

### Regular Update Schedule
1. **Weekly**: Check for new files added to framework
2. **After Framework Updates**: Verify all path references
3. **Before Major Releases**: Complete documentation audit
4. **When Files Move**: Update all references immediately

### Validation Process
```bash
# 1. Verify directory structure hasn't changed
list_dir("agents/_store/projects/_core/rules")

# 2. Check for new files
find . -name "*.mdc" -newer last_update.timestamp

# 3. Validate existing links
# (Manual verification or automated link checker)

# 4. Update documentation as needed
```

## üìö Examples from Recent Updates

### AutoPilot File Update Example
**Before**:
```markdown
- Follow prompts 01-09 in sequence using relative paths:
  - `rules/01__AI-RUN/02_Market_Research.mdc`
```

**After**:
```markdown
- Follow prompts 01-09 in sequence using these verified files:
  - [agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc](mdc:agents/_store/projects/_core/rules/01__AI-RUN/02_Market_Research.mdc)
```

### Template Reference Update Example
**Before**:
```markdown
Copy relevant templates (e.g., `03__SPECS/feature_spec_template.mdc`)
```

**After**:
```markdown
Copy relevant templates (e.g., [agents/_store/projects/_core/rules/03__SPECS/feature_spec_template.mdc](mdc:agents/_store/projects/_core/rules/03__SPECS/feature_spec_template.mdc))
```

## üöÄ Quick Reference Commands

### Standard Update Sequence
```bash
# 1. Verify current structure
list_dir("agents/_store/projects/_core/rules/01__AI-RUN")

# 2. Read target file
read_file("target_file.mdc")

# 3. Plan updates based on verification
# 4. Execute updates with edit_file
# 5. Validate results
```

### Path Verification Checklist
- [ ] `rules/01__AI-RUN/` directory contents
- [ ] `rules/02__AI-DOCS/TaskManagement/` files
- [ ] `rules/03__SPECS/` templates
- [ ] `rules/02__AI-DOCS/Documentation/` guides
- [ ] Any custom directory references

## üéñÔ∏è Best Practices Summary

1. **Always Verify Before Update**: Check file existence first
2. **Maintain Context**: Use appropriate display text for readability
3. **Be Consistent**: Follow the same URL format throughout
4. **Document Changes**: Keep track of what was updated
5. **Test Navigation**: Verify links work as expected
6. **Preserve Readability**: Don't sacrifice document flow for link completeness

---

**Last Updated**: [Current Date]
**Framework Version**: 2.0.0
**Methodology Version**: 1.0.0

---

*This guide should be updated whenever the framework structure changes or new path update requirements emerge.*
