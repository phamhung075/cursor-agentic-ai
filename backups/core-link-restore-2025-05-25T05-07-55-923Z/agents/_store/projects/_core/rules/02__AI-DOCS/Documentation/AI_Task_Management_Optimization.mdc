# Product Requirements Document: Vibe-Task (MCP Tool)

## 1. Introduction

Vibe-Task is an AI-driven task management system designed to streamline software development workflows, particularly when working with Large Language Models (LLMs) and within AI-assisted coding environments such as Cursor. This document focuses on its capabilities when exposed as an MCP (Model Control Protocol) tool, allowing AI assistants to programmatically interact with its features.

The core purpose of Vibe-Task is to bridge the gap between high-level project requirements (often defined in a Product Requirements Document - PRD) and actionable, granular development tasks. It leverages AI to assist in planning, task breakdown, code-aware task refinement, and management throughout the development lifecycle.

## 2. Goals and Objectives

*   **Automate and Enhance Task Generation:** Enable AI assistants to parse project PRDs and automatically generate a structured list of development tasks. Allow AI to understand code context for more relevant task generation and refinement.
*   **Facilitate AI-Driven Development:** Provide a robust set of tools for AI assistants to manage and interact with tasks, including creation, updates, status changes, and dependency management, with smarter AI-driven suggestions.
*   **Streamline Project Planning:** Assist developers and AI in breaking down complex projects into manageable tasks and subtasks, and help in authoring/refining PRDs.
*   **Enhance Developer Productivity:** Reduce manual effort in task management and project planning by leveraging AI capabilities and providing richer task metadata.
*   **Improve Task Clarity and Management:** Ensure tasks are well-defined with descriptions, implementation details, test strategies, effort estimations, assignees, labels, and due dates. Offer more granular task statuses.
*   **Flexible AI Model Integration:** Allow seamless integration with various LLM providers for different aspects of task management.
*   **Editor Integration & Visualization:** Provide a smooth experience within AI-powered code editors through MCP. Offer visualizations for project status and dependencies.
*   **Deeper Workflow Integration:** Facilitate better integration with developer workflows, including considerations for version control.

## 3. Target Audience

*   **Software Developers using AI-assisted coding environments (e.g., Cursor):** Primary users who will interact with Vibe-Task via an AI assistant.
*   **AI Assistants/.cursor/rules/agents:** The direct consumers of the MCP tool's API, executing commands on behalf of developers.
*   **Technical Leads/Project Managers:** Who may use the system for project planning, tracking, and oversight.

## 4. User Stories / Use Cases (MCP Context)

*   **As an AI Assistant, I want to initialize a new Vibe-Task project in the current workspace, so that the developer can start using its features.**
    *   Corresponds to the `initialize_project` MCP tool.
*   **As an AI Assistant, I want to help the developer author or refine a PRD using AI, so the initial project planning is more effective and the PRD is well-structured for parsing.**
    *   Corresponds to a new `assist_prd_authoring` MCP tool.
*   **As an AI Assistant, I want to parse a PRD file provided by the developer, so that I can automatically generate a list of development tasks with improved dependency inference.**
    *   Corresponds to the `parse_prd` MCP tool (enhanced).
*   **As an AI Assistant, I want to configure the AI models (main, research, fallback) for Vibe-Task, so that subsequent operations use the developer's preferred LLMs.**
    *   Corresponds to the `models` MCP tool.
*   **As an AI Assistant, I want to list all current tasks, with advanced filtering (status, priority, assignee, labels, due date ranges) and options to include subtasks, so I can provide comprehensive project status.**
    *   Corresponds to the `list_tasks` MCP tool (enhanced).
*   **As an AI Assistant, I want to retrieve the rich details of a specific task or subtask (including effort, assignee, labels), so I can help the developer understand or work on it.**
    *   Corresponds to the `show_task` MCP tool (enhanced).
*   **As an AI Assistant, I want to identify the next actionable task for the developer using advanced prioritization, so they can proceed with development efficiently.**
    *   Corresponds to the `next_task` MCP tool (enhanced).
*   **As an AI Assistant, I want to set or update the status of tasks/tasks/tasks.json)`, so the developer can view or edit them easily.**
    *   Corresponds to the `generate_task_files` MCP tool.
*   **As an AI Assistant, I want to add a new task, providing code context, effort estimation, assignee, labels, and due date, either via AI prompt or manual input.**
    *   Corresponds to the `add_task` MCP tool (enhanced).
*   **As an AI Assistant, I want to add a new subtask to an existing parent task, or convert an existing task into a subtask, including all rich task properties.**
    *   Corresponds to the `add_subtask` MCP tool (enhanced).
*   **As an AI Assistant, I want to update multiple tasks based on new information or a pivot in project direction, considering code context for more accurate updates.**
    *   Corresponds to the `update_tasks` MCP tool (enhanced).
*   **As an AI Assistant, I want to update the details (including rich properties and code context) of a single specific task or subtask.**
    *   Corresponds to the `update_task` and `update_subtask` MCP tools (enhanced).
*   **As an AI Assistant, I want to remove a task or subtask.**
    *   Corresponds to the `remove_task` and `remove_subtask` MCP tools.
*   **As an AI Assistant, I want to clear all subtasks from one or more parent tasks.**
    *   Corresponds to the `clear_subtasks` MCP tool.
*   **As an AI Assistant, I want to analyze the complexity of all tasks using AI, so the developer can identify areas needing further breakdown or attention.**
    *   Corresponds to the `analyze_project_complexity` MCP tool.
*   **As an AI Assistant, I want to view the generated complexity report.**
    *   Corresponds to the `complexity_report` MCP tool.
*   **As an AI Assistant, I want to expand a specific task into subtasks using AI, considering code context and recommendations from the complexity analysis.**
    *   Corresponds to the `expand_task` MCP tool (enhanced).
*   **As an AI Assistant, I want to expand all pending tasks based on the complexity analysis.**
    *   Corresponds to the `expand_all_tasks` MCP tool.
*   **As an AI Assistant, I want to add or remove dependencies between tasks, with improved AI assistance for suggesting dependencies.**
    *   Corresponds to the `add_dependency` and `remove_dependency` MCP tools (potentially enhanced).
*   **As an AI Assistant, I want to validate all task dependencies for issues.**
    *   Corresponds to the `validate_dependencies` MCP tool.
*   **As an AI Assistant, I want to attempt to automatically fix identified dependency issues.**
    *   Corresponds to the `fix_dependencies` MCP tool.
*   **As an AI Assistant, I want to generate a visual dependency graph of tasks, so the developer can understand task relationships better.**
    *   Corresponds to a new `generate_dependency_graph` MCP tool.
*   **As an AI Assistant, I want to generate a progress overview visualization (e.g., task status distribution chart), so the developer can quickly grasp the project's state.**
    *   Corresponds to a new `generate_progress_overview` MCP tool.
*   **As an AI Assistant, I want to link a task to a Git branch or commit (if VCS integration is enabled), so development work is traceable.**
    *   Corresponds to a new `link_task_to_vcs` MCP tool (part of advanced VCS integration).
## 5. Features & Functionality (MCP Tools)

The Vibe-Task MCP server exposes tools that mirror its CLI capabilities, allowing for programmatic interaction. All tools require a `projectRoot` (absolute path) parameter. Enhancements focus on richer task data, smarter AI assistance, and better workflow integration.

### 5.1. Initialization & Setup
*   **`initialize_project`**:
    *   **Description:** Initializes a Vibe-Task project. Creates directories, configuration files ([`.vibetaskconfig`](claude-task-master/.taskmasterconfig), [`.env.example`](claude-task-master/assets/env.example)), editor rule files, and an example PRD. Sets up MCP server entry.
    *   **Parameters:** `projectRoot` (string, required, absolute path), `skipPrompts` (boolean, optional, default: false), `projectName` (string, optional), `projectDescription` (string, optional), `projectVersion` (string, optional, default: "0.1.0"), `authorName` (string, optional), `addAliases` (boolean, optional, default: false).
    *   **Output:** JSON object with `success` (boolean) and `message` (string). If successful, `data` contains `projectPath`.
*   **`models`**:
    *   **Description:** Manages AI model configurations. Allows viewing current settings, setting main/research/fallback models.
    *   **Parameters:** `projectRoot` (string, required, absolute path), `setMain` (string, optional, model_id), `setResearch` (string, optional, model_id), `setFallback` (string, optional, model_id), `providerHint` (string, optional, e.g., "openrouter", "ollama").
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains current model configuration or status of set operation.
*   **`assist_prd_authoring` (New)**:
    *   **Description:** Assists the developer in creating or refining a PRD using AI. Guides through sections, suggests content, and structures the output.
    *   **Parameters:** `projectRoot` (string, required, absolute path), `existingPrdPath` (string, optional, path to an existing PRD to refine), `outputPrdPath` (string, required, path to save the new/refined PRD), `prompt` (string, required, initial high-level idea or refinement request).
    *   **Output:** JSON object with `success` (boolean) and `message` (string). If successful, `data` contains the path to the authored/tasks/tasks/tasks/tasks.json)"), `statusFilter` (string, optional, filter subtasks by status).
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains the detailed task/tasks/tasks.json)").
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains the next task object or a message if no task is available.
*   **`complexity_report`**:
    *   **Description:** Displays the previously generated complexity analysis report.
    *   **Parameters:** `projectRoot` (string, required, absolute path), `reportPath` (string, optional, default: "scripts/task-complexity-report.json").
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains the complexity report content.

### 5.3. Task Status & File Management
*   **`set_task_status` (Enhanced)**:
    *   **Description:** Sets the status of one or more tasks/tasks/tasks/tasks/tasks.json)"), `outputDir` (string, optional, default: "tasks").
    *   **Output:** JSON object with `success` (boolean) and `message` (string).

### 5.4. Task Creation & Modification
*   **`parse_prd` (Enhanced)**:
    *   **Description:** Parses a PRD to generate tasks, with improved AI for dependency inference and code context awareness if available.
    *   **Parameters:** `projectRoot` (string, required, absolute path), `input` (string, optional, default: "scripts/tasks/tasks.json)"), `force` (boolean, optional, default: false), `append` (boolean, optional, default: false), `codeContextPaths` (array of strings, optional, paths to relevant code files/tasks/tasks/tasks.json)"), `parentId` (string, required), `existingTaskId` (string, optional), `title` (string, optional), `description` (string, optional), `details` (string, optional), `dependencies` (string, optional), `status` (string, optional), `estimatedEffort` (string, optional), `assignee` (string, optional), `labels` (string, optional), `dueDate` (string, optional).
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains the added/tasks/tasks/tasks/tasks/tasks.json)"), `reportPath` (string, optional, default: "scripts/tasks/tasks/tasks/tasks/tasks/tasks.json)"), `chartType` (string, optional, default: "status_distribution", e.g., "status_distribution", "burndown_data").
    *   **Output:** JSON object with `success` (boolean). If successful, `data` contains the report data/tasks/tasks.json)` file within the `tasks` directory. Each task object will be enhanced to include richer properties:

```json
{
  "id": 1, / Unique integer identifier
  "title": "Implement User Authentication API",
  "description": "Develop API endpoints for user registration, login, and logout.",
  "status": "in-progress", / e.g., "todo", "in-progress", "blocked", "review", "qa_testing", "done", "deferred"
  "dependencies": [], / Array of integer IDs of tasks that must be completed first
  "priority": "high", / e.g., "critical", "high", "medium", "low"
  "details": "1. Define User schema (email, password_hash, name).\n2. Implement /register endpoint (POST).\n3. Implement /login endpoint (POST) with JWT generation.\n4. Implement /logout endpoint (POST) with token invalidation (if applicable).",
  "testStrategy": "Unit tests for each endpoint. Integration test for full auth flow. Check password hashing and JWT validation.",
  "estimatedEffort": "8h", / String (e.g., "4h", "2d", "5sp")
  "actualEffort": "6h", / String, updated upon completion
  "assignee": "developer_alice", / String, user ID or name
  "labels": ["backend", "auth", "api"], / Array of strings
  "dueDate": "2025-12-15", / Optional, YYYY-MM-DD
  "codeContextPaths": ["src/models/user.js", "src/controllers/authController.js"], / Optional, array of relevant file/dir paths
  "subtasks": [
    {
      "id": 1, / Subtask ID, unique within the parent task
      "title": "Define User Schema",
      "description": "Create the database schema or model for the User entity.",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "Fields: email (unique, string), passwordHash (string), name (string), createdAt, updatedAt.",
      "testStrategy": "Verify schema migration/creation. Check field constraints.",
      "estimatedEffort": "1h",
      "actualEffort": "1h",
      "assignee": "developer_alice",
      "labels": ["database", "schema"],
      "dueDate": "2025-12-01"
    }
    / ... more subtasks
  ],
  "complexityScore": 8, / Optional, added by complexity analysis
  "recommendedSubtasks": 4 /tasks/tasks.json)` to prevent data corruption, possibly using temporary files and rename on success.
*   **Usability (for AI Assistant developers/tasks/tasks.json)` parsing and writing should be optimized. Consider alternative storage (e.g., SQLite) if JSON becomes a bottleneck for very large projects.
*   **Configurability:**
    *   Key behaviors (default number of subtasks, AI model parameters, status options) should be configurable via [`.vibetaskconfig`](claude-task-master/.taskmasterconfig).
*   **Extensibility:**
    *   Core logic should be modular to facilitate future additions like a plugin system.

## 8. Future Considerations /tasks/tasks.json)` to a shared backend (e.g., cloud database, dedicated server application) to enable real-time updates and collaboration for teams.
    *   Implement user authentication and authorization for shared projects.
*   **Advanced Reporting & Analytics Dashboard:**
    *   Develop a web-based UI or integrate with existing platforms to display burndown charts, velocity, task distribution, and other project metrics.
*   **Deeper Version Control System (VCS) Integration:**
    *   Automatically create feature branches from tasks.
    *   Link tasks to pull requests and automatically update task status on PR merge/close.
    *   Suggest tasks related to code changes in a commit.
*   **Interactive UI for Task Management:**
    *   A dedicated web or desktop application for visual task management (Kanban boards, Gantt charts, calendar views) that syncs with the core Vibe-Task data.
*   **More Sophisticated Dependency & Task Relationships:**
    *   Support for "blocked by," "related to," "parent of" (beyond subtasks), and "child of" relationships.
    *   Allow setting lead/lag times for dependencies.
*   **Enhanced Time Tracking & Estimation:**
    *   Integration with time tracking tools.
    *   AI-assisted effort estimation based on task details and historical data.
*   **Customizable Task Templates & Workflows:**
    *   Allow users/teams to define custom task templates with pre-filled fields for common task types.
    *   Support for defining custom multi-stage workflows beyond the standard statuses.
*   **Plugin Architecture:**
    *   Develop a robust plugin system to allow third-party integrations (e.g., Jira, Slack, Trello, CI/CD tools, specific IDE extensions beyond generic MCP).
*   **AI-Powered Proactive Assistance:**
    *   AI suggestions for potential risks, bottlenecks, or overdue tasks.
    *   AI-driven recommendations for task assignments based on skills or workload.
    *   Automated generation of daily/weekly progress summaries.
*   **Natural Language Querying of Tasks:**
    *   Allow users (via AI assistant) to query tasks using natural language (e.g., "What high-priority backend tasks are due this week?").
*   **Offline Support & Synchronization:**
    *   For local instances, ensure graceful handling of offline scenarios with later synchronization if a backend is used.
*   **Batch Editing of Tasks:**
    *   Provide MCP tools and CLI commands for bulk-editing properties of multiple selected tasks (e.g., assign labels, change priority, set assignee for several tasks at once).
