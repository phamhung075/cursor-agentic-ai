---
description:
globs:
alwaysApply: false
---
# API Endpoint Implementation Guide

## Instructions for AI Assistant

This prompt will guide you in implementing a new API endpoint according to project standards and best practices. Please follow these instructions to ensure the endpoint is correctly implemented, tested, and documented.
# üöÄ API Endpoint Implementation Template

*Comprehensive template for designing and implementing robust, secure, and well-documented API endpoints following modern best practices.*

## üìã Endpoint Specification

### Basic Information
- **Endpoint:** `[HTTP Method] [Route Path]`
- **Purpose:** [Brief description of what this endpoint does]
- **Version:** [API version - e.g., v1, v2]
- **Controller:** [Controller name]
- **Service:** [Service name]
- **Repository:** [Repository name (if applicable)]

### API Design Pattern
- **Pattern:** [REST/GraphQL/RPC]
- **Resource:** [Resource name]
- **Operation:** [CRUD operation - Create/Read/Update/Delete]
- **Idempotent:** [Yes/No]
- **Cacheable:** [Yes/No]

## üìù Request Details

### Headers

| Header | Required | Type | Description | Example |
|--------|----------|------|-------------|---------|
| Authorization | Yes/No | Bearer Token | Authentication token | `Bearer eyJhbGciOiJIUzI1NiIs...` |
| Content-Type | Yes/No | MIME Type | Request content type | `application/json` |
| Accept | No | MIME Type | Preferred response format | `application/json` |
| X-API-Version | No | String | API version override | `v2` |
| X-Request-ID | No | UUID | Request tracking ID | `550e8400-e29b-41d4-a716-446655440000` |

### Path Parameters

| Parameter | Type | Required | Validation | Description | Example |
|-----------|------|----------|------------|-------------|---------|
| [param1] | String/Number | Yes/No | [Validation rules] | [Description] | `123` |
| [param2] | UUID | Yes/No | [UUID format] | [Description] | `550e8400-e29b-41d4-a716-446655440000` |

### Query Parameters

| Parameter | Type | Required | Default | Validation | Description | Example |
|-----------|------|----------|---------|------------|-------------|---------|
| page | Number | No | 1 | min: 1 | Page number for pagination | `?page=2` |
| limit | Number | No | 20 | min: 1, max: 100 | Items per page | `?limit=50` |
| sort | String | No | created_at | enum: [field names] | Sort field | `?sort=name` |
| order | String | No | desc | enum: [asc, desc] | Sort order | `?order=asc` |
| filter | String | No | - | [Filter syntax] | Filter criteria | `?filter=status:active` |

### Request Body Schema

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["property1", "property2"],
  "properties": {
    "property1": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "description": "Description of property1"
    },
    "property2": {
      "type": "number",
      "minimum": 0,
      "description": "Description of property2"
    },
    "property3": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Optional array property"
    }
  },
  "additionalProperties": false
}
```

### Request Body Example

```json
{
  "property1": "example value",
  "property2": 42,
  "property3": ["item1", "item2"]
}
```

## üì§ Response Details

### Success Responses

#### 200 OK (Read/Update Operations)
```json
{
  "status": "success",
  "data": {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "property1": "example value",
    "property2": 42,
    "createdAt": "2024-01-15T10:30:00Z",
    "updatedAt": "2024-01-15T10:30:00Z"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z",
    "version": "v1"
  }
}
```

#### 201 Created (Create Operations)
```json
{
  "status": "success",
  "data": {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "property1": "example value",
    "property2": 42,
    "createdAt": "2024-01-15T10:30:00Z"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z",
    "location": "/api/v1/resource/550e8400-e29b-41d4-a716-446655440000"
  }
}
```

#### 204 No Content (Delete Operations)
*No response body*

### Paginated Response (for List Operations)
```json
{
  "status": "success",
  "data": [
    {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "property1": "example value 1",
      "property2": 42
    },
    {
      "id": "550e8400-e29b-41d4-a716-446655440001",
      "property1": "example value 2",
      "property2": 43
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "totalPages": 8,
    "hasNext": true,
    "hasPrev": false
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

### Error Responses

#### 400 Bad Request
```json
{
  "status": "error",
  "error": {
    "code": "VALIDATION_ERROR",
  "message": "Invalid request parameters",
    "details": [
    {
      "field": "property1",
        "code": "REQUIRED",
      "message": "Property1 is required"
      },
      {
        "field": "property2",
        "code": "INVALID_TYPE",
        "message": "Property2 must be a number"
    }
  ]
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 401 Unauthorized
```json
{
  "status": "error",
  "error": {
    "code": "UNAUTHORIZED",
    "message": "Authentication required",
    "details": "Valid authentication token must be provided"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 403 Forbidden
```json
{
  "status": "error",
  "error": {
    "code": "FORBIDDEN",
    "message": "Insufficient permissions",
    "details": "User does not have permission to perform this action"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 404 Not Found
```json
{
  "status": "error",
  "error": {
    "code": "NOT_FOUND",
    "message": "Resource not found",
    "details": "The requested resource does not exist"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 409 Conflict
```json
{
  "status": "error",
  "error": {
    "code": "CONFLICT",
    "message": "Resource already exists",
    "details": "A resource with the same identifier already exists"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 422 Unprocessable Entity
```json
{
  "status": "error",
  "error": {
    "code": "BUSINESS_LOGIC_ERROR",
    "message": "Business rule violation",
    "details": "The operation violates business rules"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

#### 429 Too Many Requests
```json
{
  "status": "error",
  "error": {
    "code": "RATE_LIMIT_EXCEEDED",
    "message": "Rate limit exceeded",
    "details": "Too many requests. Please try again later."
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z",
    "retryAfter": 60
  }
}
```

#### 500 Internal Server Error
```json
{
  "status": "error",
  "error": {
    "code": "INTERNAL_ERROR",
    "message": "An unexpected error occurred",
    "details": "Please contact support if the problem persists"
  },
  "meta": {
    "requestId": "550e8400-e29b-41d4-a716-446655440000",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

## üîß Implementation Requirements

### Controller Implementation Checklist
- [ ] Input validation using schema validation
- [ ] Request sanitization and normalization
- [ ] Authentication and authorization checks
- [ ] Rate limiting implementation
- [ ] Request ID generation and tracking
- [ ] Service method invocation
- [ ] Response formatting and transformation
- [ ] Error handling and logging
- [ ] Performance monitoring
- [ ] Security headers implementation

### Service Implementation Checklist
- [ ] Business logic implementation
- [ ] Domain validation rules
- [ ] Transaction management
- [ ] Repository/data source interactions
- [ ] External service integrations
- [ ] Caching strategy implementation
- [ ] Event publishing (if applicable)
- [ ] Error handling and custom exceptions
- [ ] Logging and monitoring
- [ ] Performance optimization

### Repository Implementation Checklist (if needed)
- [ ] Data access logic
- [ ] Database query optimization
- [ ] Connection management
- [ ] Transaction handling
- [ ] Data mapping and transformation
- [ ] Error handling for database operations
- [ ] Query result caching
- [ ] Database migration considerations

## ‚úÖ Validation Rules

### Input Validation Schema
| Field | Type | Required | Validation Rules | Error Code |
|-------|------|----------|------------------|------------|
| [field1] | String | Yes | minLength: 1, maxLength: 255, pattern: /^[a-zA-Z0-9]+$/ | INVALID_FIELD1 |
| [field2] | Number | No | min: 0, max: 1000 | INVALID_FIELD2 |
| [field3] | Email | Yes | email format validation | INVALID_EMAIL |
| [field4] | UUID | No | UUID v4 format | INVALID_UUID |

### Business Validation Rules
- [ ] Unique constraint validations
- [ ] Referential integrity checks
- [ ] Business rule validations
- [ ] State transition validations
- [ ] Permission-based validations

## üîê Security Considerations

### Authentication and Authorization
- **Authentication Required:** [Yes/No]
- **Authentication Method:** [Bearer Token/API Key/OAuth2/JWT]
- **Required Permissions:** [List of required permissions/roles]
- **Resource-level Authorization:** [Yes/No]

### Security Headers
```javascript
/ Security headers to implement
{
  'X-Content-Type-Options': 'nosniff',
  'X-Frame-Options': 'DENY',
  'X-XSS-Protection': '1; mode=block',
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
  'Content-Security-Policy': "default-src 'self'"
}
```

### Rate Limiting
- **Rate Limit:** [requests per time window]
- **Time Window:** [time period]
- **Rate Limit Headers:** Include rate limit information in response headers
- **Rate Limit Strategy:** [Fixed window/Sliding window/Token bucket]

### Input Sanitization
- [ ] SQL injection prevention
- [ ] XSS prevention
- [ ] CSRF protection
- [ ] Input size limits
- [ ] File upload security (if applicable)

## üß™ Testing Requirements

### Unit Tests
```javascript
/ Test categories to implement
describe('Controller Tests', () => {
  / Input validation tests
  / Authentication/authorization tests
  / Service method invocation tests
  / Response formatting tests
  / Error handling tests
});

describe('Service Tests', () => {
  / Business logic tests
  / Repository interaction tests
  / External service integration tests
  / Error handling tests
});

describe('Repository Tests', () => {
  / Data access tests
  / Query optimization tests
  / Error handling tests
});
```

### Integration Tests
- [ ] End-to-end request flow testing
- [ ] Authentication and authorization testing
- [ ] Database integration testing
- [ ] External service integration testing
- [ ] Performance testing
- [ ] Security testing

### Test Data Management
- [ ] Test data setup and teardown
- [ ] Mock data generation
- [ ] Database seeding for tests
- [ ] Test environment isolation

## üìö Documentation Requirements

### API Documentation (OpenAPI/Swagger)
```yaml
# OpenAPI specification template
openapi: 3.0.3
info:
  title: [API Title]
  version: [Version]
  description: [API Description]
paths:
  /api/v1/resource:
    post:
      summary: [Endpoint summary]
      description: [Detailed description]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceResponse'
```

### Code Documentation
- [ ] Inline code comments
- [ ] JSDoc/TypeDoc documentation
- [ ] README updates
- [ ] Architecture decision records (ADRs)

## üíª Example Implementation

### Modern Controller Example (Node.js/Express)

```javascript
const { body, param, query, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const { v4: uuidv4 } = require('uuid');

/ Rate limiting middleware
const createResourceLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, / 15 minutes
  max: 100, / limit each IP to 100 requests per windowMs
  message: {
    status: 'error',
    error: {
      code: 'RATE_LIMIT_EXCEEDED',
      message: 'Too many requests, please try again later.'
    }
  }
});

/ Validation middleware
const validateCreateResource = [
  body('name')
    .isString()
    .isLength({ min: 1, max: 255 })
    .trim()
    .escape(),
  body('email')
    .isEmail()
    .normalizeEmail(),
  body('age')
    .optional()
    .isInt({ min: 0, max: 150 })
];

const createResource = async (req, res, next) => {
  const requestId = req.headers['x-request-id'] || uuidv4();

  try {
    / Validate input
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        status: 'error',
        error: {
          code: 'VALIDATION_ERROR',
        message: 'Invalid request parameters',
          details: errors.array().map(err => ({
            field: err.param,
            code: 'INVALID_VALUE',
            message: err.msg
          }))
        },
        meta: {
          requestId,
          timestamp: new Date().toISOString()
        }
      });
    }

    / Check authentication
    if (!req.user) {
      return res.status(401).json({
        status: 'error',
        error: {
          code: 'UNAUTHORIZED',
          message: 'Authentication required'
        },
        meta: { requestId, timestamp: new Date().toISOString() }
      });
    }

    / Check authorization
    if (!req.user.hasPermission('resource:create')) {
      return res.status(403).json({
        status: 'error',
        error: {
          code: 'FORBIDDEN',
          message: 'Insufficient permissions'
        },
        meta: { requestId, timestamp: new Date().toISOString() }
      });
    }

    / Call service
    const resource = await resourceService.createResource({
      ...req.body,
      createdBy: req.user.id
    });

    / Set security headers
    res.set({
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY'
    });

    / Return success response
    return res.status(201).json({
      status: 'success',
      data: resource,
      meta: {
        requestId,
        timestamp: new Date().toISOString(),
        location: `/api/v1/resources/${resource.id}`
      }
    });

  } catch (error) {
    / Log error with context
    logger.error('Error creating resource', {
      requestId,
      userId: req.user?.id,
      error: error.message,
      stack: error.stack
    });

    / Handle specific errors
    if (error.name === 'DuplicateError') {
      return res.status(409).json({
        status: 'error',
        error: {
          code: 'CONFLICT',
          message: error.message
        },
        meta: { requestId, timestamp: new Date().toISOString() }
      });
    }

    if (error.name === 'ValidationError') {
      return res.status(422).json({
        status: 'error',
        error: {
          code: 'BUSINESS_LOGIC_ERROR',
        message: error.message
        },
        meta: { requestId, timestamp: new Date().toISOString() }
      });
    }

    / Pass to error handler
    next(error);
  }
};

module.exports = {
  createResource: [createResourceLimiter, validateCreateResource, createResource]
};
```

### Modern Service Example

```javascript
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcrypt');
const { ValidationError, DuplicateError } = require('../errors');

class ResourceService {
  constructor(resourceRepository, eventPublisher, cacheService) {
    this.resourceRepository = resourceRepository;
    this.eventPublisher = eventPublisher;
    this.cacheService = cacheService;
  }

  async createResource(resourceData) {
    / Validate business rules
    await this.validateBusinessRules(resourceData);

    / Check for duplicates
    const existingResource = await this.resourceRepository.findByEmail(resourceData.email);
    if (existingResource) {
      throw new DuplicateError('Resource with this email already exists');
    }

    / Prepare data
    const resource = {
      id: uuidv4(),
      ...resourceData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    / Hash sensitive data if needed
    if (resource.password) {
      resource.password = await bcrypt.hash(resource.password, 12);
    }

    / Start transaction
    const transaction = await this.resourceRepository.beginTransaction();

    try {
      / Create resource
      const createdResource = await this.resourceRepository.create(resource, transaction);

      / Publish event
      await this.eventPublisher.publish('resource.created', {
        resourceId: createdResource.id,
        createdBy: resourceData.createdBy,
        timestamp: new Date().toISOString()
      });

      / Commit transaction
      await transaction.commit();

      / Invalidate cache
      await this.cacheService.invalidate(`resources:${resourceData.createdBy}`);

      / Remove sensitive data from response
      const { password, ...safeResource } = createdResource;

      return safeResource;

    } catch (error) {
      / Rollback transaction
      await transaction.rollback();
      throw error;
    }
  }

  async validateBusinessRules(resourceData) {
    / Implement business validation logic
    if (resourceData.age && resourceData.age < 18) {
      throw new ValidationError('Age must be 18 or older');
    }

    / Add more business rules as needed
  }
}

module.exports = ResourceService;
```

### Repository Example (with ORM)

```javascript
const { Op } = require('sequelize');

class ResourceRepository {
  constructor(database) {
    this.db = database;
    this.Resource = database.models.Resource;
  }

  async create(resourceData, transaction = null) {
    try {
      const resource = await this.Resource.create(resourceData, { transaction });
      return resource.toJSON();
    } catch (error) {
      if (error.name === 'SequelizeUniqueConstraintError') {
        throw new DuplicateError('Resource already exists');
      }
      throw error;
    }
  }

  async findById(id) {
    const resource = await this.Resource.findByPk(id);
    return resource ? resource.toJSON() : null;
  }

  async findByEmail(email) {
    const resource = await this.Resource.findOne({
      where: { email }
    });
    return resource ? resource.toJSON() : null;
  }

  async findAll(options = {}) {
    const {
      page = 1,
      limit = 20,
      sort = 'createdAt',
      order = 'DESC',
      filter = {}
    } = options;

    const offset = (page - 1) * limit;

    const result = await this.Resource.findAndCountAll({
      where: filter,
      order: [[sort, order]],
      limit,
      offset
    });

    return {
      data: result.rows.map(row => row.toJSON()),
      pagination: {
        page,
        limit,
        total: result.count,
        totalPages: Math.ceil(result.count / limit),
        hasNext: page * limit < result.count,
        hasPrev: page > 1
      }
    };
  }

  async beginTransaction() {
    return await this.db.transaction();
  }
}

module.exports = ResourceRepository;
```

## üîÑ AAI Integration

### Automated Code Generation
- Use AAI agents to generate boilerplate code
- Implement consistent patterns across endpoints
- Automate test generation based on specifications
- Generate API documentation from code

### Quality Assurance
- Automated code review using AAI
- Security vulnerability scanning
- Performance optimization suggestions
- Best practices enforcement

### Continuous Improvement
- Monitor API usage patterns
- Identify optimization opportunities
- Suggest refactoring improvements
- Update templates based on learnings

## üìä Monitoring and Observability

### Metrics to Track
- Request/response times
- Error rates by endpoint
- Authentication failures
- Rate limit violations
- Resource utilization

### Logging Requirements
```javascript
/ Structured logging example
logger.info('API request processed', {
  requestId,
  method: req.method,
  path: req.path,
  userId: req.user?.id,
  responseTime: Date.now() - startTime,
  statusCode: res.statusCode
});
```

### Health Checks
```javascript
/ Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: process.env.APP_VERSION,
    uptime: process.uptime()
  });
});
```

## üìã Implementation Checklist

### Pre-Implementation
- [ ] Review API design and specifications
- [ ] Validate business requirements
- [ ] Set up development environment
- [ ] Create database migrations (if needed)

### Implementation Phase
- [ ] Implement controller with validation
- [ ] Implement service with business logic
- [ ] Implement repository (if needed)
- [ ] Add authentication and authorization
- [ ] Implement rate limiting
- [ ] Add comprehensive error handling
- [ ] Implement logging and monitoring

### Testing Phase
- [ ] Write unit tests for all layers
- [ ] Write integration tests
- [ ] Perform security testing
- [ ] Conduct performance testing
- [ ] Test error scenarios

### Documentation Phase
- [ ] Update API documentation
- [ ] Document code with comments
- [ ] Create usage examples
- [ ] Update README and guides

### Deployment Phase
- [ ] Deploy to staging environment
- [ ] Perform smoke tests
- [ ] Deploy to production
- [ ] Monitor initial performance
- [ ] Set up alerts and monitoring

---

*This comprehensive API endpoint template ensures consistent, secure, and maintainable API development following modern best practices and AAI framework integration.*
