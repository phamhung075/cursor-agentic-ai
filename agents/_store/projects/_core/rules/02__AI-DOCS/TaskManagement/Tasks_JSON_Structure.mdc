---
description: 
globs: 
alwaysApply: false
---
# AAI-Enhanced Tasks JSON Structure

The [mdc:agents/_store/projects/_core/tasks/tasks.json](mdc:agents/_store/projects/_core/tasks/tasks.json) file is the central repository for all project tasks with AAI (Agentic AI) enhancements. It follows a specific JSON structure optimized for intelligent task management.

## ðŸ¤– AAI Integration Overview

This enhanced structure includes AAI-specific fields for:
- **Intelligent Task Analysis**: AI-powered complexity and risk assessment
- **Continuous Learning**: Capturing insights for future project improvement
- **Adaptive Management**: Dynamic prioritization and resource allocation
- **Quality Optimization**: Automated quality scoring and improvement suggestions

## Root Object Structure

The root of the JSON file is an object containing three main keys: `meta`, `tasks`, and `aaiEnhancements`.

```json
{
  "meta": {
    "projectName": "Agentic Coding Framework",
    "version": "2.0.0",
    "source": "scripts/prd.txt or PRD document reference",
    "description": "AAI-enhanced tasks generated from PRD",
    "totalTasksGenerated": 0,
    "tasksIncluded": 0,
    "aaiVersion": "1.0.0",
    "lastAaiAnalysis": "2024-01-15T10:30:00Z",
    "qualityScore": 8.5
  },
  "aaiEnhancements": {
    "learningEnabled": true,
    "adaptivePrioritization": true,
    "riskAssessmentActive": true,
    "qualityMetricsEnabled": true,
    "continuousImprovement": true
  },
  "tasks": []
}
```

### `meta` Object Fields (AAI-Enhanced):
*   `projectName` (String): The official name of the project (e.g., "Agentic Coding Framework").
*   `version` (String): Version of the task list or project.
*   `source` (String): Origin of the tasks (e.g., PRD filename, AI generation session ID).
*   `description` (String): A brief description of this task set.
*   `totalTasksGenerated` (Number): The total number of tasks initially generated.
*   `tasksIncluded` (Number): The current number of tasks in the `tasks` array.
*   **ðŸ¤– `aaiVersion` (String)**: Version of the AAI system used for task generation.
*   **ðŸ¤– `lastAaiAnalysis` (String)**: ISO timestamp of the last AAI analysis.
*   **ðŸ¤– `qualityScore` (Number)**: Overall project quality score (1-10) generated by AAI.

### ðŸ¤– `aaiEnhancements` Object Fields:
*   `learningEnabled` (Boolean): Whether AAI learning features are active.
*   `adaptivePrioritization` (Boolean): Whether dynamic priority adjustment is enabled.
*   `riskAssessmentActive` (Boolean): Whether AI-powered risk assessment is running.
*   `qualityMetricsEnabled` (Boolean): Whether quality scoring is active.
*   `continuousImprovement` (Boolean): Whether continuous optimization is enabled.

### `tasks` Array:
This is an array of AAI-enhanced task objects.

## AAI-Enhanced Task Object Structure

Each object within the `tasks` array must have the following fields (including AAI enhancements):

### Core Fields (Enhanced):
*   `id` (Number or String): A unique identifier for the task (e.g., `1`, `2`, `feature-auth-1`). Must be unique across all tasks and subtasks if subtasks are flattened.
*   `title` (String): A brief, descriptive title for the task (e.g., "Initialize Project Repository").
*   `description` (String): A concise summary of what the task involves.
*   `status` (String): The current state of the task. Recommended values: "todo", "In Progress", "blocked", "review", "qa_testing", "Done", "pending", "deferred".
*   `dependencies` (Array of Numbers/Strings): An array of task IDs that must be completed before this task can start.
*   `priority` (String): The urgency or importance of the task. Recommended values: "low", "medium", "high", "critical".
*   `details` (String): **This is the most critical field.** A comprehensive description containing all the information an AI agent needs to complete the task. This field **MUST** include direct links to or embed content from all relevant project-specific documents, including:
    *   Relevant sections from the [mdc:agents/_store/projects/_core/projet/PRD_template/project_prd.mdc](mdc:agents/_store/projects/_core/projet/PRD_template/project_prd.mdc).
    *   Specific feature specifications (e.g., from `agents/_store/projects/_core/rules/03__SPECS/features/feature_spec_FEAT-XXX.mdc`).
    *   Architectural guidelines from [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Architecture/architecture.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Architecture/architecture.mdc).
    *   For UI tasks: Links to mockups, wireframes, component designs, and the [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/design_conventions_template.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/design_conventions_template.mdc). Adherence to [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Documentation/AI_Design_Agent_Optimization.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Documentation/AI_Design_Agent_Optimization.mdc) principles.
    *   For backend tasks: API contracts (from `agents/_store/projects/_core/rules/02__AI-DOCS/Integrations/` or `agents/_store/projects/_core/rules/03__SPECS/`), data models, and the [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc). Adherence to [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Documentation/AI_Coding_Agent_Optimization.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Documentation/AI_Coding_Agent_Optimization.mdc) principles.
    *   For database tasks: Schema details, migration plans, etc.
    The AI agent relies on this field to find and use the precise specifications needed for any development work (frontend, backend, database, design).
*   `testStrategy` (String): The approach for verifying that the task is completed correctly (e.g., "Unit tests for all new functions", "Manual QA on staging environment"), which should align with the specifications linked in `details`.

### ðŸ¤– AAI-Specific Fields:
*   **`aaiContext` (Object)**: AI-generated context and insights for the task.
    *   `insights` (Array of Strings): AI-generated recommendations and best practices.
    *   `riskFactors` (Array of Strings): Identified potential risks and challenges.
    *   `optimizations` (Array of Strings): Suggested improvements and optimizations.
    *   `learningNotes` (Array of Strings): Captured knowledge for future similar tasks.
*   **`aaiMetrics` (Object)**: AI-generated metrics and scores.
    *   `complexityScore` (Number): AI-assessed complexity (1-10).
    *   `riskScore` (Number): AI-assessed risk level (1-10).
    *   `qualityScore` (Number): AI-assessed quality potential (1-10).
    *   `confidenceLevel` (Number): AI confidence in estimates (0-1).
*   **`aaiRecommendations` (Object)**: AI-generated recommendations.
    *   `suggestedApproach` (String): AI-recommended implementation approach.
    *   `alternativeStrategies` (Array of Strings): Alternative implementation strategies.
    *   `resourceRequirements` (Array of Strings): Recommended resources and skills.
    *   `timeEstimateRange` (Object): AI-generated time estimates.
        *   `minimum` (String): Optimistic time estimate.
        *   `expected` (String): Most likely time estimate.
        *   `maximum` (String): Pessimistic time estimate.

### Standard Optional Fields (Enhanced):
*   `subtasks` (Array of Task Objects): A list of smaller, more specific tasks that make up this main task. Each subtask object follows the same structure as a parent task object, including all AAI enhancements.
*   `estimatedEffort` (String, optional): Estimated time or effort for the task (e.g., "4h", "2d", "5sp").
*   `actualEffort` (String, optional): Actual time or effort spent on the task, updated upon completion.
*   `assignee` (String, optional): Identifier for the person or AI agent assigned to the task (e.g., "developer_alice", "AAI-Code-Agent-1").
*   `labels` (Array of Strings, optional): Descriptive labels or tags for categorizing the task (e.g., `["backend", "auth", "api", "aai-optimized"]`).
*   `dueDate` (String, optional): Target completion date for the task in YYYY-MM-DD format.
*   `codeContextPaths` (Array of Strings, optional): An array of file or directory paths relevant to the task's implementation, providing context for AI agents.
*   `complexityScore` (Number, optional): A numerical score representing the task's complexity (now enhanced by AAI analysis).
*   `recommendedSubtasks` (Number, optional): A suggested number of subtasks this task could be broken into (AAI-optimized).

### ðŸ”„ AAI Learning and Adaptation Fields:
*   **`aaiLearning` (Object, optional)**: Continuous learning data.
    *   `previousSimilarTasks` (Array of Strings): IDs of similar tasks from previous projects.
    *   `successPatterns` (Array of Strings): Patterns that led to successful completion.
    *   `failurePatterns` (Array of Strings): Patterns that led to issues or delays.
    *   `improvementSuggestions` (Array of Strings): AI-generated suggestions for improvement.
*   **`aaiAdaptation` (Object, optional)**: Dynamic adaptation data.
    *   `priorityAdjustments` (Array of Objects): History of priority changes with reasons.
    *   `scopeModifications` (Array of Objects): History of scope changes with justifications.
    *   `resourceReallocation` (Array of Objects): History of resource changes with explanations.

### Example AAI-Enhanced Task Object:

```json
{
  "id": 1,
  "title": "Implement User Authentication API",
  "description": "Develop the backend API endpoints for user registration, login, and logout with AAI-enhanced security.",
  "status": "todo",
  "dependencies": [],
  "priority": "high",
  "details": "Endpoints required:\n- POST /auth/register\n- POST /auth/login\n- POST /auth/logout\nUtilize JWT for session management. Hash passwords using bcrypt. Follow security guidelines from [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc)",
  "testStrategy": "Write integration tests for all endpoints. Ensure proper error handling for invalid credentials or requests. Manually test flow with a frontend client. Achieve 95% code coverage.",
  "estimatedEffort": "3d",
  "actualEffort": null,
  "assignee": "AAI-Code-Agent-1",
  "labels": ["backend", "api", "authentication", "aai-optimized"],
  "dueDate": "2025-05-20",
  "codeContextPaths": ["src/api/auth/", "src/models/user.js"],
  "complexityScore": 8,
  "recommendedSubtasks": 3,
  "aaiContext": {
    "insights": [
      "Consider implementing rate limiting for authentication endpoints",
      "Use OAuth 2.0 for social authentication integration",
      "Implement proper session management with Redis"
    ],
    "riskFactors": [
      "Security vulnerabilities in authentication logic",
      "Performance issues with password hashing",
      "Session management complexity"
    ],
    "optimizations": [
      "Implement caching for user session data",
      "Use async/await for better performance",
      "Add comprehensive logging for security events"
    ],
    "learningNotes": [
      "JWT tokens should have reasonable expiration times",
      "Always validate input data before processing",
      "Implement proper error handling without exposing sensitive information"
    ]
  },
  "aaiMetrics": {
    "complexityScore": 8,
    "riskScore": 6,
    "qualityScore": 9,
    "confidenceLevel": 0.85
  },
  "aaiRecommendations": {
    "suggestedApproach": "Start with basic email/password authentication, then add social login options",
    "alternativeStrategies": [
      "Use third-party authentication service (Auth0, Firebase Auth)",
      "Implement passwordless authentication with magic links",
      "Use multi-factor authentication from the start"
    ],
    "resourceRequirements": [
      "Backend developer with security expertise",
      "Security review specialist",
      "Testing automation engineer"
    ],
    "timeEstimateRange": {
      "minimum": "2d",
      "expected": "3d",
      "maximum": "5d"
    }
  },
  "aaiLearning": {
    "previousSimilarTasks": ["auth-task-proj-1", "login-system-proj-3"],
    "successPatterns": [
      "Incremental implementation with thorough testing",
      "Early security review and validation",
      "Clear documentation of API endpoints"
    ],
    "failurePatterns": [
      "Implementing all features at once without testing",
      "Insufficient input validation",
      "Poor error handling and logging"
    ],
    "improvementSuggestions": [
      "Add automated security testing",
      "Implement comprehensive monitoring",
      "Create detailed API documentation"
    ]
  },
  "subtasks": [
    {
      "id": "1.1",
      "title": "Design Auth Database Schema",
      "description": "Define the schema for the users table with AAI optimization.",
      "status": "todo",
      "dependencies": [],
      "priority": "high",
      "details": "Fields: id, username, email, password_hash, created_at, updated_at, last_login, failed_attempts. Follow database conventions from [mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc](mdc:agents/_store/projects/_core/rules/02__AI-DOCS/Conventions/coding_conventions_template.mdc)",
      "testStrategy": "Review schema with team and validate with sample data.",
      "aaiContext": {
        "insights": ["Add indexes for email and username for faster lookups", "Consider soft delete for user accounts"],
        "riskFactors": ["Data migration complexity", "Performance with large user base"],
        "optimizations": ["Use UUID for user IDs", "Add created_at and updated_at timestamps"],
        "learningNotes": ["Always plan for data growth", "Consider GDPR compliance requirements"]
      },
      "aaiMetrics": {
        "complexityScore": 4,
        "riskScore": 3,
        "qualityScore": 8,
        "confidenceLevel": 0.9
      },
      "subtasks": []
    }
  ]
}
```

## ðŸ¤– AAI-Specific File Structure

### Additional AAI Files

The AAI system generates and maintains several additional files alongside the main tasks.json:

#### 1. AAI Insights File: `aai-insights.json`
```json
{
  "projectId": "project-123",
  "generatedAt": "2024-01-15T10:30:00Z",
  "insights": {
    "overallComplexity": 7.5,
    "riskAreas": ["Authentication security", "Database performance"],
    "recommendations": ["Implement comprehensive testing", "Add monitoring"],
    "learningPoints": ["Focus on security from the start", "Plan for scalability"]
  },
  "patterns": {
    "successFactors": ["Clear requirements", "Incremental development"],
    "riskFactors": ["Unclear scope", "Insufficient testing"]
  }
}
```

#### 2. Quality Metrics File: `quality-metrics.json`
```json
{
  "projectId": "project-123",
  "lastUpdated": "2024-01-15T10:30:00Z",
  "metrics": {
    "overallQuality": 8.5,
    "codeQuality": 8.0,
    "testCoverage": 85,
    "documentation": 9.0,
    "security": 8.5
  },
  "targets": {
    "codeQuality": 9.0,
    "testCoverage": 95,
    "documentation": 9.5,
    "security": 9.0
  },
  "improvements": [
    "Increase test coverage for authentication module",
    "Add more detailed API documentation",
    "Implement security scanning in CI/CD"
  ]
}
```

#### 3. Learning Log File: `learning-log.json`
```json
{
  "projectId": "project-123",
  "entries": [
    {
      "timestamp": "2024-01-15T10:30:00Z",
      "taskId": "1",
      "event": "task_completed",
      "insights": ["JWT implementation was straightforward", "Rate limiting prevented security issues"],
      "improvements": ["Add more comprehensive error handling", "Implement better logging"]
    }
  ],
  "patterns": {
    "recurring_issues": ["Insufficient input validation", "Poor error handling"],
    "success_strategies": ["Incremental development", "Early testing"]
  }
}
```

## ðŸ”„ AAI Integration Best Practices

### 1. Task Creation with AAI
- Always include AAI context fields for intelligent analysis
- Use AAI recommendations for effort estimation and risk assessment
- Leverage learning insights from previous similar tasks

### 2. Continuous Improvement
- Regularly update learning logs with new insights
- Use AAI metrics to identify areas for improvement
- Apply pattern recognition to optimize future task planning

### 3. Quality Assurance
- Monitor AAI quality scores and work towards targets
- Use AAI recommendations for testing strategies
- Implement AAI-suggested optimizations

### 4. Risk Management
- Pay attention to AAI-identified risk factors
- Implement suggested mitigation strategies
- Monitor risk scores throughout project execution

This AAI-enhanced structure ensures that task management becomes increasingly intelligent and effective, learning from each project to improve future outcomes while maintaining compatibility with existing task management workflows.