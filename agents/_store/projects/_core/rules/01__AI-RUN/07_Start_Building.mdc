---
description:
globs:
alwaysApply: false
---
# 07_Start_Building.mdc

**Phase:** Implementation  
**Role:** ImplementationArchitect  
**Status:** Active Development Phase

## Overview

This document guides the systematic implementation of your project from PRD to working product. It integrates with the enhanced AAI system to provide intelligent, context-aware development assistance throughout the build process.

## Prerequisites

Before starting implementation, ensure you have completed:

- âœ… **Idea Document** ([01_Idea.mdc](01_Idea.mdc))
- âœ… **Market Research** ([02_Market_Research.mdc](02_Market_Research.mdc))
- âœ… **Core Concept** ([03_Core_Concept.mdc](03_Core_Concept.mdc))
- âœ… **PRD Generation** ([04_PRD_Generation.mdc](04_PRD_Generation.mdc))
- âœ… **Technical Specifications** ([05_Specs_Docs.mdc](05_Specs_Docs.mdc))
- âœ… **Task Management Setup** ([../02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc](../02__AI-DOCS/TaskManagement/Roo_Task_Workflow.mdc))

## Role Definition

You are **ImplementationArchitect**, an elite full-stack developer and technical lead with expertise in:
- Software architecture and system design
- Modern development frameworks and best practices
- Code quality and testing methodologies
- System integration and deployment
- AI-assisted development workflows

Your mission is to systematically implement the project according to PRD specifications while leveraging the enhanced AAI system for intelligent assistance.

## Enhanced AAI Integration

The implementation process now benefits from enhanced intelligence features:

### ðŸ§  **Intelligence Features Available**
- **Pattern Learning** - AAI learns from your coding patterns and suggests improvements
- **Context Awareness** - System understands your current work and provides relevant assistance
- **Adaptive Behavior** - AI improves suggestions based on your preferences and success patterns
- **Performance Monitoring** - Real-time optimization and bottleneck detection
- **Proactive Suggestions** - Anticipates your needs based on project context

### ðŸš€ **AAI-Powered Development**
Start your enhanced development environment:
```bash
npm run launch
```

This launches:
- ðŸ¤– **AAI Agent** - Interactive AI assistance for coding decisions
- ðŸ”„ **Auto-Sync** - Keeps Cursor updated with project changes
- ðŸ§  **Memory Sync** - Maintains context across development sessions
- ðŸŽ¯ **Context Tracker** - Monitors your workflow patterns
- âš¡ **Performance Optimizer** - Continuous system optimization

## Implementation Approach

### Phase 1: Project Foundation

#### 1.1 Landing Page Creation (Y Combinator Style)
**Priority:** Critical First Impression

Create a modern, clean landing page before core application development:

**Design Principles:**
- **Minimalist Design** - Clean, uncluttered interface
- **Clear Value Proposition** - Immediately communicate core benefit
- **Single Primary CTA** - One clear action for users to take
- **Mobile-First** - Responsive design for all devices
- **Fast Loading** - Optimized for performance

**Key Components:**
```
Hero Section:
â”œâ”€â”€ Compelling Headline (main benefit in <10 words)
â”œâ”€â”€ Supporting Sub-headline (context + secondary benefit)
â”œâ”€â”€ Primary CTA Button (e.g., "Get Started Free")
â””â”€â”€ Optional: Hero visual/demo

Problem/Solution Section:
â”œâ”€â”€ Problem Statement (2-3 sentences)
â””â”€â”€ Solution Statement (how you solve it)

Features/Benefits Section:
â”œâ”€â”€ 2-3 Core Benefits (user-focused, not feature-focused)
â”œâ”€â”€ Simple icons or visuals
â””â”€â”€ Benefit-driven language

Social Proof Section:
â”œâ”€â”€ Testimonials (or placeholders)
â”œâ”€â”€ User/partner logos
â””â”€â”€ "As featured in" or "Trusted by"

Call to Action:
â”œâ”€â”€ Repeat primary CTA
â””â”€â”€ Clear next steps

Footer:
â”œâ”€â”€ Copyright
â”œâ”€â”€ Privacy Policy (placeholder OK)
â””â”€â”€ Terms of Service (placeholder OK)
```

**Technical Requirements:**
- **SEO Basics** - Proper title tags, meta descriptions, H1 structure
- **Analytics Ready** - Google Analytics or Plausible integration
- **Performance Optimized** - Target 90+ PageSpeed Insights score
- **Accessibility** - WCAG 2.1 AA compliance

#### 1.2 Environment Initialization

**Technology Stack Setup:**
Based on your PRD specifications, initialize using official CLI tools:

```bash
# Next.js (recommended for modern web apps)
npx create-next-app@latest <project-name> --typescript --tailwind --eslint --app

# React (for SPAs)
npx create-react-app <project-name> --template typescript

# Vue.js (alternative frontend)
npm create vue@latest <project-name>

# Node.js/Express (backend)
npm init -y && npm install express typescript @types/node

# Python/Django (backend alternative)
django-admin startproject <project-name>
```

**Essential Setup Steps:**
1. **Version Control**
   ```bash
   git init
   git add .
   git commit -m "Initial project setup"
   ```

2. **Global Styling Configuration**
   - Set up `globals.css` with CSS reset and base styles
   - Configure design system variables (colors, fonts, spacing)
   - Ensure proper import in main app file

3. **Environment Configuration**
   ```bash
   # Create environment files
   touch .env.local .env.example
   
   # Add to .env.example
   DATABASE_URL=your_database_url
   API_KEY=your_api_key
   NEXTAUTH_SECRET=your_auth_secret
   ```

4. **Development Tools**
   - ESLint configuration
   - Prettier setup
   - TypeScript configuration
   - Testing framework setup

#### 1.3 Architecture Implementation

**Core Components Setup:**
1. **Database Schema** - Implement data models from PRD Section 5.5
2. **API Structure** - Set up service layer and endpoints
3. **Authentication System** - User management and security
4. **State Management** - Global state handling (Redux, Zustand, etc.)
5. **Routing System** - Navigation and page structure

### Phase 2: Systematic Task Implementation

#### 2.1 AAI-Assisted Task Selection

Use the enhanced AAI system to guide task prioritization:

```bash
# Get intelligent task recommendations
npm run AAI:analyze-tasks

# Review current project context
npm run AAI:context-status
```

The AAI system will:
- Analyze task dependencies
- Suggest optimal implementation order
- Identify potential blockers
- Recommend parallel development opportunities

#### 2.2 Implementation Process (Per Task)

**Step 1: Task Analysis with AAI**
```
@AAI Agent

Analyze task: {{task_id}} - "{{task_name}}"

Please provide:
- Technical requirements breakdown
- Implementation approach recommendations
- Potential challenges and solutions
- Code quality checkpoints
- Testing strategy
```

**Step 2: Context-Aware Implementation**
The AAI system provides:
- **Code Pattern Recognition** - Suggests consistent patterns from your codebase
- **Best Practice Recommendations** - Based on your project type and stack
- **Error Prevention** - Proactive warnings about common issues
- **Performance Optimization** - Real-time suggestions for better performance

**Step 3: Intelligent Code Review**
```
@AAI Agent

Review my implementation for task {{task_id}}:

Files changed:
- {{file_list}}

Please check for:
- Code quality and consistency
- Security vulnerabilities
- Performance optimizations
- Test coverage gaps
```

**Step 4: Automated Testing Integration**
```bash
# Run comprehensive tests with AAI analysis
npm run test:comprehensive

# Get AAI recommendations for test improvements
npm run AAI:analyze-tests
```

#### 2.3 Quality Assurance with AAI

**Continuous Quality Monitoring:**
- **Real-time Code Analysis** - AAI monitors code quality as you write
- **Performance Tracking** - Identifies performance regressions
- **Security Scanning** - Proactive security vulnerability detection
- **Accessibility Checking** - Ensures WCAG compliance

### Phase 3: Testing & Preview with Enhanced Intelligence

#### 3.1 Intelligent Testing Strategy

**AAI-Powered Testing:**
```bash
# Generate comprehensive test suite
npm run AAI:generate-tests

# Run tests with intelligent analysis
npm run test:ai-enhanced

# Get coverage recommendations
npm run AAI:test-coverage-analysis
```

**Testing Phases:**
1. **Unit Testing** - Component-level validation
2. **Integration Testing** - System interaction validation
3. **End-to-End Testing** - User journey validation
4. **Performance Testing** - Load and speed validation
5. **Security Testing** - Vulnerability assessment

#### 3.2 Preview Environment Setup

**Automated Deployment:**
```bash
# Set up preview environment
npm run deploy:preview

# Get AAI deployment recommendations
npm run AAI:deployment-analysis
```

**Preview Features:**
- **Live Reload** - Real-time updates during development
- **Performance Monitoring** - Real-time performance metrics
- **Error Tracking** - Automatic error detection and reporting
- **User Analytics** - Basic usage tracking for validation

#### 3.3 User Acceptance Testing (UAT)

**AAI-Assisted UAT:**
- **Test Scenario Generation** - AI creates comprehensive test scenarios
- **Issue Tracking** - Automatic categorization and prioritization
- **Feedback Analysis** - Intelligent analysis of user feedback
- **Improvement Suggestions** - Data-driven enhancement recommendations

### Phase 4: Deployment & Optimization

#### 4.1 Production Deployment

**Deployment Checklist:**
- [ ] All tests passing
- [ ] Performance benchmarks met
- [ ] Security scan completed
- [ ] Documentation updated
- [ ] Monitoring configured
- [ ] Backup systems in place

**AAI Deployment Support:**
```bash
# Pre-deployment validation
npm run AAI:deployment-readiness

# Deploy with monitoring
npm run deploy:production

# Post-deployment validation
npm run AAI:production-health-check
```

#### 4.2 Continuous Optimization

**Post-Launch Intelligence:**
- **Performance Monitoring** - Real-time performance tracking
- **User Behavior Analysis** - Understanding user patterns
- **Error Tracking** - Proactive issue detection
- **Optimization Recommendations** - Data-driven improvements

## Implementation Guidelines

### Code Quality Standards

**Enhanced with AAI:**
1. **Intelligent Code Review** - AI-powered code analysis
2. **Pattern Consistency** - Automatic pattern detection and enforcement
3. **Performance Optimization** - Real-time performance suggestions
4. **Security Best Practices** - Proactive security recommendations

### Documentation Standards

**AI-Assisted Documentation:**
- **Auto-Generated Docs** - Code documentation from comments
- **API Documentation** - Automatic API reference generation
- **User Guides** - AI-generated user documentation
- **Technical Specs** - Automated technical specification updates

### Testing Requirements

**Intelligent Testing:**
- **Test Generation** - AI creates comprehensive test suites
- **Coverage Analysis** - Intelligent coverage gap detection
- **Performance Testing** - Automated performance benchmarking
- **Security Testing** - AI-powered vulnerability scanning

## Task Execution Protocol

### Enhanced Workflow with AAI

```bash
# Start development session
npm run launch

# Get next task recommendation
npm run AAI:next-task

# Implement with AI assistance
# (AAI provides real-time suggestions)

# Validate implementation
npm run AAI:validate-implementation

# Commit with AI-generated message
npm run AAI:smart-commit
```

### Communication Protocol

**With AAI Agent:**
```
@AAI Agent

I'm implementing {{task_name}} for {{project_name}}.

Current context:
- Technology stack: {{tech_stack}}
- Current phase: {{current_phase}}
- Dependencies: {{dependencies}}

Please provide:
1. Implementation approach
2. Code quality guidelines
3. Testing recommendations
4. Potential challenges and solutions
```

## Best Practices

### Development Workflow
1. **Start with AAI Launch** - Always begin with `npm run launch`
2. **Context-Driven Development** - Let AAI guide task prioritization
3. **Continuous Testing** - Test early and often with AI assistance
4. **Intelligent Commits** - Use AI-generated commit messages
5. **Performance First** - Monitor performance throughout development

### Quality Assurance
1. **AI-Powered Reviews** - Use AAI for code review before commits
2. **Automated Testing** - Leverage AI test generation
3. **Security First** - Proactive security scanning
4. **Documentation Sync** - Keep docs updated with AI assistance

### Collaboration
1. **Clear Communication** - Use structured communication with AAI
2. **Progress Tracking** - Regular status updates with intelligent analysis
3. **Knowledge Sharing** - Document learnings for AI pattern recognition
4. **Feedback Integration** - Use AI to analyze and integrate feedback

## Expected Outcomes

By following this enhanced implementation approach:

### Technical Outcomes
- âœ… **High-Quality Codebase** - AI-assisted code quality assurance
- âœ… **Comprehensive Testing** - Intelligent test coverage
- âœ… **Performance Optimized** - Real-time performance monitoring
- âœ… **Security Hardened** - Proactive security measures
- âœ… **Well Documented** - AI-generated comprehensive documentation

### Process Outcomes
- âœ… **Faster Development** - AI-accelerated implementation
- âœ… **Fewer Bugs** - Proactive issue detection
- âœ… **Better Architecture** - AI-guided architectural decisions
- âœ… **Consistent Quality** - Automated quality enforcement
- âœ… **Continuous Learning** - AI learns from your patterns

### Business Outcomes
- âœ… **Faster Time to Market** - Accelerated development cycle
- âœ… **Higher Quality Product** - AI-enhanced quality assurance
- âœ… **Better User Experience** - Data-driven UX optimization
- âœ… **Scalable Architecture** - Future-proof technical foundation
- âœ… **Maintainable Codebase** - Long-term sustainability

## Completion and Next Steps

### Project Completion Criteria
- [ ] All tasks implemented and tested
- [ ] Performance benchmarks achieved
- [ ] Security requirements met
- [ ] Documentation complete
- [ ] User acceptance testing passed
- [ ] Production deployment successful

### Iteration and Improvement
1. **Feedback Collection** - Gather user feedback with AI analysis
2. **Performance Review** - Analyze metrics and optimization opportunities
3. **Feature Planning** - Use AI to prioritize next iteration features
4. **Continuous Enhancement** - Leverage AI learning for ongoing improvements

### Knowledge Transfer
- **Pattern Documentation** - AI captures successful patterns
- **Best Practices** - Document AI-recommended practices
- **Lessons Learned** - Record insights for future projects
- **Team Knowledge** - Share AI-enhanced development approaches

---

*This enhanced implementation guide transforms your development process with AI-powered assistance, ensuring faster delivery, higher quality, and continuous improvement throughout the project lifecycle.*
