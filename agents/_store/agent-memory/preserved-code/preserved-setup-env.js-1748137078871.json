{
  "id": "preserved-setup-env.js-1748137078871",
  "type": "preserved-code",
  "content": "#!/usr/bin/env node\n\n/**\n * 🔧 Environment Setup Script\n * \n * Helps create .env file from template with user input\n */\n\nconst fs = require('fs').promises;\nconst readline = require('readline');\nconst chalk = require('chalk');\n\nclass EnvSetup {\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n  }\n\n  async setup() {\n    console.log(chalk.blue('🔧 Self-Improvement Agent v2.0 - Environment Setup'));\n    console.log('=' .repeat(60));\n\n    try {\n      // Check if .env already exists\n      try {\n        await fs.access('.env');\n        const overwrite = await this.ask('⚠️ .env file already exists. Overwrite? (y/n): ');\n        if (overwrite.toLowerCase() !== 'y') {\n          console.log(chalk.yellow('Setup cancelled.'));\n          this.rl.close();\n          return;\n        }\n      } catch {\n        // .env doesn't exist, proceed\n      }\n\n      console.log(chalk.green('\\n🌐 Let\\'s set up your environment variables!'));\n      console.log(chalk.gray('You can skip any field by pressing Enter (defaults will be used)\\n'));\n\n      // Get API keys\n      const pineconeKey = await this.ask('🌲 Pinecone API Key (or skip): ');\n      const openaiKey = await this.ask('🤖 OpenAI API Key (or skip): ');\n      const projectName = await this.ask('📁 Default project name (my-project): ') || 'my-project';\n\n      // Create .env content\n      const envContent = this.generateEnvContent({\n        pineconeKey: pineconeKey || 'your_pinecone_api_key_here',\n        openaiKey: openaiKey || 'your_openai_api_key_here',\n        projectName\n      });\n\n      // Write .env file\n      await fs.writeFile('.env', envContent);\n      \n      console.log(chalk.green('\\n✅ .env file created successfully!'));\n      console.log(chalk.blue('\\n💡 Next steps:'));\n      console.log(chalk.gray('  1. Update API keys in .env if you skipped them'));\n      console.log(chalk.gray('  2. Run: npm run AAI:agent'));\n      console.log(chalk.gray('  3. Test: memory stats, status'));\n\n      if (!pineconeKey || !openaiKey) {\n        console.log(chalk.yellow('\\n⚠️ Some API keys are missing:'));\n        if (!pineconeKey) console.log(chalk.gray('  • Get Pinecone key: https://app.pinecone.io/'));\n        if (!openaiKey) console.log(chalk.gray('  • Get OpenAI key: https://platform.openai.com/'));\n        console.log(chalk.gray('  • Agent will work with local memory only until keys are added'));\n        console.log(chalk.blue('\\n📄 Template available at: agents/_store/templates/environment-template.env'));\n      }\n\n    } catch (error) {\n      console.error(chalk.red('❌ Setup failed:'), error.message);\n    }\n\n    this.rl.close();\n  }\n\n  generateEnvContent({ pineconeKey, openaiKey, projectName }) {\n    return `# 🧠 Self-Improvement Agent v2.0 - Environment Configuration\n# Generated by setup script\n\n# ==================================================\n# 🌐 Required API Keys\n# ==================================================\nPINECONE_API_KEY=${pineconeKey}\nOPENAI_API_KEY=${openaiKey}\n\n# ==================================================\n# 📁 Basic Configuration\n# ==================================================\nPROJECT_NAME=${projectName}\nPINECONE_INDEX_NAME=agentic-framework-memory\n\n# Agent features\nAGENT_MEMORY_ENABLED=true\nAGENT_FILESTORE_ENABLED=true\n\n# ==================================================\n# 🧠 Memory Settings\n# ==================================================\nMEMORY_RETENTION_DAYS=90\nMAX_LOCAL_MEMORIES=1000\nENABLE_PINECONE=true\nENABLE_OPENAI=true\n\n# ==================================================\n# 🔧 Development Settings\n# ==================================================\nDEBUG=false\nLOG_LEVEL=info\nNODE_ENV=development\n\n# ==================================================\n# 📊 Learning Settings\n# ==================================================\nTRACK_USER_FEEDBACK=true\nENABLE_PATTERN_LEARNING=true\nENABLE_CONTEXT_MEMORY=true\n\n# ==================================================\n# 🎯 Performance Settings\n# ==================================================\nMAX_CONCURRENT_ANALYSES=3\nMEMORY_CLEANUP_INTERVAL=24\nCACHE_REFRESH_INTERVAL=60\n\n# ==================================================\n# 📱 UI Settings\n# ==================================================\nENABLE_COLORS=true\nCLI_PROMPT=🤖 >\nSHOW_PROGRESS=true\n`;\n  }\n\n  ask(question) {\n    return new Promise((resolve) => {\n      this.rl.question(question, resolve);\n    });\n  }\n}\n\n// Run setup if called directly\nif (require.main === module) {\n  const setup = new EnvSetup();\n  setup.setup().catch(console.error);\n}\n\nmodule.exports = EnvSetup; ",
  "metadata": {
    "content": "#!/usr/bin/env node\n\n/**\n * 🔧 Environment Setup Script\n * \n * Helps create .env file from template with user input\n */\n\nconst fs = require('fs').promises;\nconst readline = require('readline');\nconst chalk = require('chalk');\n\nclass EnvSetup {\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n  }\n\n  async setup() {\n    console.log(chalk.blue('🔧 Self-Improvement Agent v2.0 - Environment Setup'));\n    console.log('=' .repeat(60));\n\n    try {\n      // Check if .env already exists\n      try {\n        await fs.access('.env');\n        const overwrite = await this.ask('⚠️ .env file already exists. Overwrite? (y/n): ');\n        if (overwrite.toLowerCase() !== 'y') {\n          console.log(chalk.yellow('Setup cancelled.'));\n          this.rl.close();\n          return;\n        }\n      } catch {\n        // .env doesn't exist, proceed\n      }\n\n      console.log(chalk.green('\\n🌐 Let\\'s set up your environment variables!'));\n      console.log(chalk.gray('You can skip any field by pressing Enter (defaults will be used)\\n'));\n\n      // Get API keys\n      const pineconeKey = await this.ask('🌲 Pinecone API Key (or skip): ');\n      const openaiKey = await this.ask('🤖 OpenAI API Key (or skip): ');\n      const projectName = await this.ask('📁 Default project name (my-project): ') || 'my-project';\n\n      // Create .env content\n      const envContent = this.generateEnvContent({\n        pineconeKey: pineconeKey || 'your_pinecone_api_key_here',\n        openaiKey: openaiKey || 'your_openai_api_key_here',\n        projectName\n      });\n\n      // Write .env file\n      await fs.writeFile('.env', envContent);\n      \n      console.log(chalk.green('\\n✅ .env file created successfully!'));\n      console.log(chalk.blue('\\n💡 Next steps:'));\n      console.log(chalk.gray('  1. Update API keys in .env if you skipped them'));\n      console.log(chalk.gray('  2. Run: npm run AAI:agent'));\n      console.log(chalk.gray('  3. Test: memory stats, status'));\n\n      if (!pineconeKey || !openaiKey) {\n        console.log(chalk.yellow('\\n⚠️ Some API keys are missing:'));\n        if (!pineconeKey) console.log(chalk.gray('  • Get Pinecone key: https://app.pinecone.io/'));\n        if (!openaiKey) console.log(chalk.gray('  • Get OpenAI key: https://platform.openai.com/'));\n        console.log(chalk.gray('  • Agent will work with local memory only until keys are added'));\n        console.log(chalk.blue('\\n📄 Template available at: agents/_store/templates/environment-template.env'));\n      }\n\n    } catch (error) {\n      console.error(chalk.red('❌ Setup failed:'), error.message);\n    }\n\n    this.rl.close();\n  }\n\n  generateEnvContent({ pineconeKey, openaiKey, projectName }) {\n    return `# 🧠 Self-Improvement Agent v2.0 - Environment Configuration\n# Generated by setup script\n\n# ==================================================\n# 🌐 Required API Keys\n# ==================================================\nPINECONE_API_KEY=${pineconeKey}\nOPENAI_API_KEY=${openaiKey}\n\n# ==================================================\n# 📁 Basic Configuration\n# ==================================================\nPROJECT_NAME=${projectName}\nPINECONE_INDEX_NAME=agentic-framework-memory\n\n# Agent features\nAGENT_MEMORY_ENABLED=true\nAGENT_FILESTORE_ENABLED=true\n\n# ==================================================\n# 🧠 Memory Settings\n# ==================================================\nMEMORY_RETENTION_DAYS=90\nMAX_LOCAL_MEMORIES=1000\nENABLE_PINECONE=true\nENABLE_OPENAI=true\n\n# ==================================================\n# 🔧 Development Settings\n# ==================================================\nDEBUG=false\nLOG_LEVEL=info\nNODE_ENV=development\n\n# ==================================================\n# 📊 Learning Settings\n# ==================================================\nTRACK_USER_FEEDBACK=true\nENABLE_PATTERN_LEARNING=true\nENABLE_CONTEXT_MEMORY=true\n\n# ==================================================\n# 🎯 Performance Settings\n# ==================================================\nMAX_CONCURRENT_ANALYSES=3\nMEMORY_CLEANUP_INTERVAL=24\nCACHE_REFRESH_INTERVAL=60\n\n# ==================================================\n# 📱 UI Settings\n# ==================================================\nENABLE_COLORS=true\nCLI_PROMPT=🤖 >\nSHOW_PROGRESS=true\n`;\n  }\n\n  ask(question) {\n    return new Promise((resolve) => {\n      this.rl.question(question, resolve);\n    });\n  }\n}\n\n// Run setup if called directly\nif (require.main === module) {\n  const setup = new EnvSetup();\n  setup.setup().catch(console.error);\n}\n\nmodule.exports = EnvSetup; ",
    "description": "No description available",
    "filename": "setup-env.js",
    "functions": "EnvSetup",
    "keyFeatures": "Object-Oriented, Async/Await, File System, Logging",
    "originalPath": "agents/_store/scripts/setup-env.js",
    "preservedAt": "2025-05-25T01:35:35.659Z",
    "size": 4596,
    "timestamp": "2025-05-25T01:37:58.871Z",
    "type": "preserved-code"
  },
  "embedding": []
}